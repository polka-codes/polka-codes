// This file handles GitHub issue processing and task formatting
// Generated by polka.codes

/**
 * Fetches issue data including comments
 * @param {import('@actions/github').GitHub} github GitHub API client
 * @param {Object} context GitHub context object
 * @param {Object} inputs Workflow inputs
 * @returns {Promise<Object>} Formatted issue data
 */
async function getIssueData(github, context, inputs) {
  const issueNumber = inputs?.issue_number || context.issue.number

  const { data: issue } = await github.rest.issues.get({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber,
  })

  const { data: comments } = await github.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: issueNumber,
  })

  return {
    number: issue.number,
    title: issue.title,
    body: issue.body,
    author: issue.user.login,
    created_at: issue.created_at,
    comments: comments.map((c) => ({
      author: c.user.login,
      body: c.body,
      created_at: c.created_at,
    })),
  }
}

/**
 * Formats issue data into a task string
 * @param {Object} issueData Issue data from getIssueData
 * @returns {string} Formatted task string
 */
function formatTask(issueData) {
  const commentsText = issueData.comments.map((comment) => `@${comment.author} at ${comment.created_at}:\n${comment.body}\n`).join('\n')

  return `Issue #${issueData.number}: ${issueData.title}
Author: @${issueData.author}
Created: ${issueData.created_at}

${issueData.body}

Comments:
${commentsText}`
}

/**
 * Escapes a string for GitHub Actions output
 * @param {string} str String to escape
 * @returns {string} Escaped string
 */
function escapeGitHubOutput(str) {
  return str.replace(/%/g, '%25').replace(/\n/g, '%0A').replace(/\r/g, '%0D')
}

module.exports = {
  getIssueData,
  formatTask,
  escapeGitHubOutput,
}
