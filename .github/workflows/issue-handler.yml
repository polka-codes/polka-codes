name: Issue Handler

on:
  issues:
    types: [opened, labeled]

env:
  POLKA_API_PROVIDER: openrouter
  POLKA_MODEL: anthropic/claude-3.5-sonnet
  POLKA_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

jobs:
  handle:
    if: contains(github.event.issue.labels.*.name, 'polka.codes')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Get issue content
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })

            // Format the issue data
            const formattedIssue = {
              number: issue.number,
              title: issue.title,
              body: issue.body,
              author: issue.user.login,
              created_at: issue.created_at,
              comments: comments.map(c => ({
                author: c.user.login,
                body: c.body,
                created_at: c.created_at
              }))
            }

            return formattedIssue

      - name: Format task
        id: format
        run: |
          # Create a formatted task string with proper structure
          TASK=$(cat << EOF
          Issue #${{ fromJson(steps.issue.outputs.result).number }}: ${{ fromJson(steps.issue.outputs.result).title }}
          Author: @${{ fromJson(steps.issue.outputs.result).author }}
          Created: ${{ fromJson(steps.issue.outputs.result).created_at }}

          ${{ fromJson(steps.issue.outputs.result).body }}

          Comments:
          $(for comment in $(echo '${{ toJson(fromJson(steps.issue.outputs.result).comments) }}' | jq -c '.[]'); do
            author=$(echo $comment | jq -r '.author')
            created_at=$(echo $comment | jq -r '.created_at')
            body=$(echo $comment | jq -r '.body')
            echo -e "@$author at $created_at:\n$body\n"
          done)
          EOF
          )

          # Escape the task string for GitHub Actions
          TASK="${TASK//'%'/'%25'}"
          TASK="${TASK//$'\n'/'%0A'}"
          TASK="${TASK//$'\r'/'%0D'}"

          echo "TASK=$TASK" >> $GITHUB_OUTPUT

      - name: Run polka.codes CLI
        run: |
          echo "${{ steps.format.outputs.TASK }}"
          echo "${{ steps.format.outputs.TASK }}" | bun cli

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b polka-codes/issue-${{ github.event.issue.number }}
          bun cli commit -a
          bun cli pr

# Generated by polka.codes
