// Generated by polka.codes
// Defines Zod schemas for WebSocket message validation in the runner.

import { z } from 'zod'

export const wsIncomingMessageSchema = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('pending_tools'),
    step: z.number(),
    requests: z.array(
      z.object({
        index: z.number(),
        tool: z.string(),
        params: z.any(),
      }),
    ),
  }),
  z.object({ type: z.literal('get_files') }),
  z.object({ type: z.literal('done') }),
])

export type WsIncomingMessage = z.infer<typeof wsIncomingMessageSchema>

export const textBlockParamSchema = z.object({
  type: z.literal('text'),
  text: z.string(),
})

export const imageBlockParamSchema = z.object({
  type: z.literal('image'),
  source: z.union([
    z.object({
      data: z.string(),
      media_type: z.string(),
      type: z.literal('base64'),
    }),
    z.object({
      type: z.literal('url'),
      url: z.string(),
    }),
  ]),
})

export const userContentSchema = z.union([z.string(), z.array(z.union([textBlockParamSchema, imageBlockParamSchema]))])

export type UserContent = z.infer<typeof userContentSchema>

export const wsOutgoingMessageSchema = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('pending_tools_response'),
    step: z.number(),
    responses: z.array(
      z.object({
        index: z.number(),
        tool: z.string(),
        response: userContentSchema,
      }),
    ),
  }),
  z.object({
    type: z.literal('pending_tools_response_completed'),
    step: z.number(),
    index: z.number(),
  }),
  z.object({
    type: z.literal('file'),
    path: z.string(),
    content: z.string(),
  }),
  z.object({
    type: z.literal('file_deleted'),
    path: z.string(),
  }),
  z.object({
    type: z.literal('get_files_completed'),
  }),
  z.object({
    type: z.literal('error'),
    message: z.string(),
    details: z.string().optional(),
  }),
])

export type WsOutgoingMessage = z.infer<typeof wsOutgoingMessageSchema>
