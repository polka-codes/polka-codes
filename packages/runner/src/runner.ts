// Generated by polka.codes
import { getProvider, loadConfig } from '@polka-codes/cli-shared'
import chalk from 'chalk'

export interface RunnerOptions {
  sessionToken: string
  githubToken?: string
  api?: string
}

export async function runRunner(options: RunnerOptions): Promise<void> {
  try {
    // Validate required options
    if (!options.githubToken) {
      console.error(chalk.red('Error: GitHub token is required. Provide it via --github-token or GITHUB_TOKEN environment variable.'))
      process.exit(1)
    }

    // Load configuration
    const config = loadConfig() ?? {}

    // Create provider
    const provider = getProvider('coder', config || {}, {
      command: {
        onStarted(command) {
          console.log(`$ >>>> $ ${command}`)
        },
        onStdout(data) {
          process.stdout.write(data)
        },
        onStderr(data) {
          process.stderr.write(data)
        },
        onExit(code) {
          console.log(`$ <<<< $ Command exited with code: ${code}`)
        },
        onError(error) {
          console.log(`$ <<<< $ Command error: ${error}`)
        },
      },
      excludeFiles: config.excludeFiles,
      interactive: false,
    })

    // Here you would implement the actual runner functionality
    // For now, we'll just log the options and success message
    console.log(chalk.green('Runner initialized with:'))
    console.log(`  Session Token: ${options.sessionToken.substring(0, 4)}...`)
    console.log(`  GitHub Token: ${options.githubToken.substring(0, 4)}...`)
    console.log(`  API URL: ${options.api}`)

    console.log(chalk.green('\nRunner completed successfully!'))
  } catch (error) {
    console.error(chalk.red(`Error: ${error instanceof Error ? error.message : String(error)}`))
    process.exit(1)
  }
}
