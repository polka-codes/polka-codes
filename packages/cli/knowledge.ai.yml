description: "This package contains the command-line interface for interacting with the AI."
files:
  "src/Chat.ts":
    description: "Provides an interactive chat interface in the terminal."
    api:
      classes:
        "1":
          name: "Chat"
          constructor:
            params:
              "1":
                name: "options"
                type: "ChatOptions"
          methods:
            "1":
              name: "close"
              returns: "void"
              description: "Closes the readline interface."
      types:
        "1":
          name: "ChatOptions"
          properties:
            "1":
              name: "onMessage"
              type: "(message: string) => Promise<string | undefined>"
              description: "Callback for when the user sends a message."
            "2":
              name: "onExit"
              type: "() => Promise<void>"
              description: "Callback for when the chat is exited."
            "3":
              name: "onInterrupt"
              type: "() => void"
              optional: true
              description: "Callback for when the user presses Ctrl+C during a busy state."
  "src/commands/chat.ts":
    description: "Implements the chat command, setting up a Runner and a Chat interface to handle interactive sessions with the AI."
    api:
      functions:
        "1":
          name: "runChat"
          params:
            "1":
              name: "opts"
              type: "any"
            "2":
              name: "command"
              type: "Command"
              optional: true
          returns: "Promise<void>"
          description: "Initializes and runs the chat session. It configures the provider, creates a Runner, and sets up the Chat interface with handlers for messages, exit, and interruptions."
  "src/ApiProviderConfig.ts":
    description: "Manages API provider configurations, resolving appropriate settings for commands and agents by merging global, provider-specific, and command/agent-specific parameters."
    api:
      classes:
        "1":
          name: "ApiProviderConfig"
          constructor:
            params:
              "1":
                name: "config"
                type: "Config"
            description: "Initializes with a Config object, setting up default provider, provider-specific settings, command/agent configurations, and global default parameters."
          methods:
            "1":
              name: "getConfigForCommand"
              params:
                "1":
                  name: "command"
                  type: "string"
              returns: "{ provider: AiServiceProvider; model: string; apiKey: string | undefined; parameters: any } | undefined"
              description: "Resolves the configuration for a given command, merging global defaults, provider defaults, and command-specific settings. Returns undefined if no provider can be determined."
            "2":
              name: "getConfigForAgent"
              params:
                "1":
                  name: "agent"
                  type: "string"
              returns: "{ provider: AiServiceProvider; model: string; apiKey: string | undefined; parameters: any } | undefined"
              description: "Resolves the configuration for a given agent, merging global defaults, provider defaults, and agent-specific settings. Returns undefined if no provider can be determined."
rules:
  "1": "Each command should have its own file in the `src/commands` directory."
  "2": "Use the `Runner` class to execute tasks."