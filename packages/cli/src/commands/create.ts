/**
 * Create new project command.
 * Generated by polka.codes
 */

import { existsSync } from 'node:fs'
import { mkdir, stat } from 'node:fs/promises'
import os from 'node:os'
import { join } from 'node:path'
import { Command } from 'commander'

import { confirm, input } from '@inquirer/prompts'
import {
  ArchitectAgent,
  CoderAgent,
  MultiAgent,
  UsageMeter,
  architectAgentInfo,
  coderAgentInfo,
  createNewProject,
  createService,
} from '@polka-codes/core'
import { configPrompt } from '../configPrompt'
import { parseOptions } from '../options'
import { getProvider } from '../provider'
import { printEvent } from '../utils/eventHandler'

const askForPath = async (projectName: string) => {
  let targetPath = join(process.cwd(), projectName)
  while (true) {
    const confirmPath = await confirm({
      message: `Do you want to create project at ${targetPath}?`,
      default: true,
    })

    if (confirmPath) {
      if (existsSync(targetPath)) {
        // check if it's a directory
        const targetStat = await stat(targetPath)
        if (targetStat.isDirectory()) {
          const confirmPath = await confirm({
            message: `Directory ${targetPath} already exists. Do you want to overwrite it?`,
            default: true,
          })

          if (!confirmPath) {
            return targetPath
          }
        } else {
          console.error('Target path is not a directory')
        }
      } else {
        return targetPath
      }
    }

    const inputPath = await input({ message: 'Please provide a new path:', default: targetPath })
    targetPath = inputPath.trim()
  }
}

export const createCommand = new Command('create')
  .description('Create a new project')
  .argument('[name]', 'Project name')
  .action(async (name: string | undefined, options: any, command: Command) => {
    const cmdOptions = command.parent?.opts() ?? {}
    const { config, providerConfig, maxMessageCount, verbose, budget } = parseOptions(cmdOptions)

    let { provider, model, apiKey } = providerConfig.getConfigForAgent('architect') ?? {}

    if (!provider) {
      // new user? ask for config
      const newConfig = await configPrompt({ provider, model, apiKey })
      provider = newConfig.provider
      model = newConfig.model
      apiKey = newConfig.apiKey
    }

    let projectName = name

    // Get project name if not provided
    if (!projectName) {
      const inputName = await input({ message: 'What would you like to name your project?' })
      projectName = inputName.trim()
    }

    // Build target path
    const targetPath = await askForPath(projectName)

    // Create project directory
    try {
      await mkdir(targetPath, { recursive: true })
    } catch (error) {
      console.error(`Failed to create directory: ${targetPath}`, error)
      process.exit(1)
    }

    // Change working directory
    process.chdir(targetPath)

    const usageMeter = new UsageMeter({
      maxCost: budget,
      maxMessageCount,
    })

    // Create AI service
    const service = createService(provider, {
      apiKey,
      model,
      usageMeter,
      enableCache: true,
    })

    const agents = [architectAgentInfo, coderAgentInfo]

    // Create MultiAgent
    const multiAgent = new MultiAgent({
      createAgent: async (name: string) => {
        const agentName = name.trim().toLowerCase()
        switch (agentName) {
          case architectAgentInfo.name:
            return new ArchitectAgent({
              ai: service, // TODO: different code may use different ai service
              os: os.platform(),
              provider: getProvider('architect', config, { interactive: true }),
              interactive: true,
              agents,
            })
          case coderAgentInfo.name:
            return new CoderAgent({
              ai: service, // TODO: different code may use different ai service
              os: os.platform(),
              provider: getProvider('coder', config, { interactive: true }),
              interactive: true,
              agents,
            })
          default:
            throw new Error(`Unknown agent: ${name}`)
        }
      },
    })

    // Start project creation
    await createNewProject(multiAgent, projectName, printEvent(verbose))
  })
