/**
 * Initialize polkacodes configuration command.
 * Generated by polka.codes
 */

import { existsSync, readFileSync, writeFileSync } from 'node:fs'
import { confirm } from '@inquirer/prompts'
import { type AiServiceProvider, createService, generateProjectConfig } from '@polka-codes/core'
import { Command } from 'commander'
import { parse, stringify } from 'yaml'

import { loadConfig, localConfigFileName } from '../config'
import { addSharedOptions } from '../options'
import { listFiles } from '../utils/listFiles'
import { configPrompt } from './config'

export const initCommand = new Command('init').description('Initialize polkacodes configuration')

initCommand.action(async (options) => {
  try {
    // Check for existing config
    const existingConfig = loadConfig()
    if (existingConfig) {
      const proceed = await confirm({
        message: `Found existing config at ${localConfigFileName}. Do you want to proceed? This will overwrite the existing config.`,
        default: false,
      })
      if (!proceed) {
        console.log('Initialization cancelled')
        return
      }
    }

    // Configure AI provider
    const { provider, model, apiKey } = await configPrompt({
      provider: existingConfig?.defaultProvider,
      model: existingConfig?.defaultModel,
    })

    // Create AI service
    const service = createService(provider as AiServiceProvider, {
      apiKey: apiKey ?? process.env.POLKA_API_KEY ?? options.apiKey ?? existingConfig?.providers?.[provider]?.apiKey,
      model,
    })

    // Generate project config
    console.log('Analyzing project files...')
    const files: Record<string, string> = {}
    const [relevantFiles] = await listFiles('.', true, 1000, process.cwd())

    // Read relevant files
    for (const filePath of relevantFiles) {
      if (typeof filePath === 'string' && existsSync(filePath)) {
        try {
          const content = readFileSync(filePath, 'utf8')
          files[filePath] = content
        } catch (error) {
          console.warn(`Failed to read file: ${filePath}`)
        }
      }
    }

    const { response: generatedConfig } = await generateProjectConfig(service, relevantFiles)

    // Parse generated config
    const parsedConfig = generatedConfig ? parse(generatedConfig) : {}

    // Combine configs
    const config = {
      defaultProvider: provider,
      defaultModel: model,
      ...parsedConfig,
    }

    if (apiKey) {
      config.providers = {
        [provider]: {
          apiKey,
        },
      }
    }

    // Save config
    writeFileSync(localConfigFileName, stringify(config))
    console.log(`Configuration saved to ${localConfigFileName}`)
  } catch (error) {
    console.error('Failed to generate configuration:', error)
    process.exit(1)
  }
})

addSharedOptions(initCommand)
