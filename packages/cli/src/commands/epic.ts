// generated by polka.codes
import { input } from '@inquirer/prompts'
import { Command } from 'commander'
import { createLogger } from '../logger'
import { runWorkflow } from '../runWorkflow'
import { type EpicWorkflowInput, epicWorkflow } from '../workflows/epic.workflow'

export async function runEpic(task: string | undefined, _options: any, command: Command) {
  let taskInput = task

  if (!taskInput) {
    try {
      taskInput = await input({
        message: 'What epic or large feature do you want to implement?',
      })
    } catch (error) {
      if (error instanceof Error && error.name === 'ExitPromptError') {
        return
      }
      throw error
    }
  }

  if (!taskInput) {
    // This should not happen based on the logic above, but as a safeguard:
    console.error('No task provided. Aborting.')
    return
  }

  const workflowInput: EpicWorkflowInput = {
    task: taskInput,
  }

  const globalOpts = (command.parent ?? command).opts()
  const { verbose } = globalOpts
  const logger = createLogger({
    verbose,
  })

  await runWorkflow(epicWorkflow, workflowInput, { commandName: 'epic', command, logger })
}

export const epicCommand = new Command('epic')
  .description('Orchestrates a large feature or epic, breaking it down into smaller tasks.')
  .argument('[task]', 'The epic to plan and implement.')
  .action(runEpic)
