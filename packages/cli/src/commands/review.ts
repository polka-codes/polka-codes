// generated by polka.codes

import type { StepRunResult, UsageMeter } from '@polka-codes/core'
import { Command } from 'commander'
import { runWorkflowCommand } from '../runWorkflow'
import { type HandleResultOutput, reviewWorkflow } from '../workflows'
import { runTask } from './task'

export const reviewCommand = new Command('review')
  .description('Review a GitHub pull request or local changes')
  .option('--pr <pr>', 'The pull request number or URL to review')
  .option('--json', 'Output the review in JSON format', false)
  .option('-y, --yes', 'Automatically apply review feedback', false)
  .action(async (options: { pr?: string; json: boolean; yes: boolean }, command: Command) => {
    const { json, pr, yes } = options
    const input = { json, ...(pr && { pr }), yes }

    let _willRunTask = false

    const handleSuccess = async (result: StepRunResult<HandleResultOutput>, command?: Command, usageMeter?: UsageMeter) => {
      if (result.type === 'success' && result.output.shouldRunTask) {
        _willRunTask = true
        if (!command) {
          throw new Error('Command object not available in handleSuccess')
        }
        const taskInstruction = `please address the review result:\n\n${result.output.formattedReview}`
        await runTask(taskInstruction, {}, command, {
          externalUsageMeter: usageMeter,
          suppressUsagePrint: false, // Let task print the final consolidated usage
        })
      } else if (usageMeter && !json) {
        // If no task will run, print usage here
        usageMeter.printUsage()
      }
    }

    await runWorkflowCommand('review', reviewWorkflow, command, input, handleSuccess, {
      json,
      suppressUsagePrint: true, // Always suppress, let handleSuccess decide when to print
    })
  })
