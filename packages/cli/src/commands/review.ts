// generated by polka.codes
import { execSync } from 'node:child_process'
import { getProvider, type ProviderOptions } from '@polka-codes/cli-shared'
import { reviewDiff, UsageMeter } from '@polka-codes/core'
import { Command } from 'commander'
import { merge } from 'lodash'
import ora, { type Ora } from 'ora'
import { getModel } from '../getModel'
import { parseOptions } from '../options'
import prices from '../prices'

export const reviewCommand = new Command('review')
  .description('Review a GitHub pull request or local changes')
  .option('--pr <pr>', 'The pull request number or URL to review')
  .option('--json', 'Output the review in JSON format', false)
  .action(async (options: { pr?: string; json: boolean }, command: Command) => {
    const parentOptions = command.parent?.opts() ?? {}
    const { providerConfig, config } = parseOptions(parentOptions)
    const commandConfig = providerConfig.getConfigForCommand('review')

    if (!commandConfig || !commandConfig.provider || !commandConfig.model) {
      console.error('Error: No provider specified. Please run "polka config" to configure your AI provider.')
      process.exit(1)
    }

    if (!options.json) {
      console.log('Provider:', commandConfig.provider)
      console.log('Model:', commandConfig.model)
    }

    const spinner = ora({
      text: 'Gathering information...',
      stream: options.json ? process.stderr : process.stdout,
    }).start()

    const usage = new UsageMeter(merge(prices, config.prices ?? {}))
    const ai = getModel(commandConfig)
    const toolProviderOptions: ProviderOptions = {
      excludeFiles: parentOptions.config.excludeFiles,
      interactive: parentOptions.interactive,
    }
    const toolProvider = getProvider('analyzer', config, toolProviderOptions)
    const sharedAiOptions = {
      ai,
      usageMeter: usage,
      os: process.platform,
      provider: toolProvider,
      interactive: false,
      policies: [],
      toolFormat: commandConfig.toolFormat,
    }

    try {
      if (options.pr) {
        await reviewPR(options.pr, spinner, sharedAiOptions, options.json)
      } else {
        await reviewLocal(spinner, sharedAiOptions, options.json)
      }
    } catch (error) {
      spinner.fail(`Error reviewing: ${error instanceof Error ? error.message : String(error)}`)
      console.error(error)
      process.exit(1)
    }
    if (!options.json) {
      usage.printUsage()
    }
  })

async function reviewPR(prIdentifier: string, spinner: Ora, sharedAiOptions: any, isJsonOutput: boolean) {
  const prNumberMatch = prIdentifier.match(/\d+$/)
  if (!prNumberMatch) {
    spinner.fail('Invalid PR number or URL.')
    process.exit(1)
  }
  const prNumber = prNumberMatch[0]

  try {
    execSync('gh --version', { stdio: 'ignore' })
  } catch {
    spinner.fail('Error: GitHub CLI (gh) is not installed. Please install it from https://cli.github.com/')
    process.exit(1)
  }

  try {
    spinner.text = `Checking out PR #${prNumber}...`
    execSync(`gh pr checkout ${prNumber}`, { stdio: 'pipe' })
  } catch (_error) {
    spinner.fail(`Error checking out PR #${prNumber}. Make sure the PR number is correct and you have access to the repository.`)
    process.exit(1)
  }

  const gitRoot = execSync('git rev-parse --show-toplevel', { encoding: 'utf-8' }).trim()
  const remoteUrl = execSync('git remote get-url origin', { cwd: gitRoot, encoding: 'utf-8' }).trim()
  const remoteMatch = remoteUrl.match(/github\.com[/:](?<owner>[^/]+)\/(?<repo>[^/]+)\.git$/)

  if (!remoteMatch?.groups) {
    spinner.fail('Could not determine GitHub repository owner and repo from remote URL.')
    process.exit(1)
  }

  spinner.text = 'Fetching pull request details...'
  const prDetails = JSON.parse(execSync(`gh pr view ${prNumber} --json title,body,commits`, { encoding: 'utf-8' }))
  const defaultBranch = execSync('gh repo view --json defaultBranchRef --jq .defaultBranchRef.name', {
    encoding: 'utf-8',
  }).trim()
  const commitMessages = prDetails.commits.map((c: any) => c.messageBody).join('\n---\n')
  spinner.text = 'Generating review...'
  const result = await reviewDiff(sharedAiOptions, {
    commitRange: `${defaultBranch}...HEAD`,
    pullRequestTitle: prDetails.title,
    pullRequestDescription: prDetails.body,
    commitMessages,
  })

  spinner.succeed('Review generated successfully')
  if (isJsonOutput) {
    console.log(JSON.stringify(result, null, 2))
  } else {
    console.log(formatReviewForConsole(result))
  }
}

async function reviewLocal(spinner: Ora, sharedAiOptions: any, isJsonOutput: boolean) {
  const gitStatus = execSync('git status --porcelain=v1', { encoding: 'utf-8' }).trim()
  const statusLines = gitStatus.split('\n').filter((line) => line)

  const hasStagedChanges = statusLines.some((line) => 'MARC'.includes(line[0]))
  const hasUnstagedChanges = statusLines.some((line) => 'MARCDU'.includes(line[1]))

  if (hasStagedChanges) {
    spinner.text = 'Generating review for staged changes...'
    const result = await reviewDiff(sharedAiOptions, { staged: true })
    spinner.succeed('Review generated successfully')
    if (isJsonOutput) {
      console.log(JSON.stringify(result, null, 2))
    } else {
      console.log(formatReviewForConsole(result))
    }
    return
  }

  if (hasUnstagedChanges) {
    spinner.text = 'Generating review for unstaged changes...'
    const result = await reviewDiff(sharedAiOptions, { staged: false })
    spinner.succeed('Review generated successfully')
    if (isJsonOutput) {
      console.log(JSON.stringify(result, null, 2))
    } else {
      console.log(formatReviewForConsole(result))
    }
    return
  }

  spinner.text = 'No local changes detected. Falling back to branch diff...'
  spinner.render()

  try {
    execSync('gh --version', { stdio: 'ignore' })
  } catch {
    spinner.fail(
      'Error: GitHub CLI (gh) is not installed, and there are no local changes to review. Please install it from https://cli.github.com/ to review branch changes.',
    )
    process.exit(1)
  }

  const defaultBranch = execSync('gh repo view --json defaultBranchRef --jq .defaultBranchRef.name', {
    encoding: 'utf-8',
  }).trim()

  const currentBranch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim()

  if (currentBranch === defaultBranch) {
    spinner.succeed(`No changes to review. You are on the default branch ('${defaultBranch}').`)
    process.exit(0)
  }

  spinner.text = `Generating review for changes between '${defaultBranch}' and '${currentBranch}'...`
  const result = await reviewDiff(sharedAiOptions, {
    commitRange: `${defaultBranch}...${currentBranch}`,
  })

  spinner.succeed('Review generated successfully')
  if (isJsonOutput) {
    console.log(JSON.stringify(result, null, 2))
  } else {
    console.log(formatReviewForConsole(result))
  }
}

function formatReviewForConsole(output: { overview: string; specificReviews: { file: string; lines: string; review: string }[] }): string {
  let formatted = `### Overview\n\n${output.overview}`

  if (output.specificReviews.length > 0) {
    formatted += `\n\n### File-specific feedback\n`
    for (const item of output.specificReviews) {
      formatted += `\n**${item.file}:${item.lines}**\n\n${item.review}\n`
    }
  }
  return formatted
}
