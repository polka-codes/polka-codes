// generated by polka.codes
import { Command } from 'commander'
import { createLogger } from '../logger'
import { runWorkflow } from '../runWorkflow'
import { type FixWorkflowInput, fixWorkflow } from '../workflows/fix.workflow'

export const fixCommand = new Command('fix')
  .description('Fix issues by running a command and letting an agent fix it.')
  .argument('[command]', 'The command to run')
  .option('-t, --task <task>', 'The task to perform, providing specific instructions to the agent.')
  .action(async (command: string | undefined, options: { task?: string }, cmd: Command) => {
    const workflowInput: FixWorkflowInput = { command, task: options.task }
    const globalOpts = (cmd.parent ?? cmd).opts()
    const { verbose } = globalOpts
    const logger = createLogger({
      verbose,
    })
    await runWorkflow(fixWorkflow, workflowInput, { commandName: 'fix', command: cmd, logger })
  })
