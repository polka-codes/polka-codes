// generated by polka.codes
import type { WorkflowTools } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../../workflow-tools'
import { PLAN_PROMPT } from '../plan.prompt'

const PlanSchema = z.object({
  plan: z.string().optional(),
  question: z.string().optional(),
})

type CreatePlanInput = {
  tools: WorkflowTools<CliToolRegistry>
  task: string
  plan?: string
  userFeedback?: string
}

export async function* createPlan(input: CreatePlanInput): AsyncGenerator<any, string, any> {
  const { tools, task } = input
  let plan = input.plan || ''
  let userFeedback = input.userFeedback || ''

  while (true) {
    const currentTask = userFeedback ? `${task}\n\nUser feedback: ${userFeedback}` : task
    const planContent = plan ? `The content of an existing plan file:\n<plan_file>\n${plan}\n</plan_file>` : ''
    const prompt = PLAN_PROMPT.replace('{task}', currentTask).replace('{planContent}', planContent)

    const { output } = yield* tools.invokeAgent({
      agent: 'architect',
      messages: [{ type: 'user', content: prompt }],
      outputSchema: PlanSchema,
      defaultContext: true,
    })

    const { plan: newPlan, question } = output as z.infer<typeof PlanSchema>

    if (newPlan !== undefined) {
      plan = newPlan
    }

    if (question) {
      const answer = yield* tools.input({ message: question })
      userFeedback = `Question: ${question}\nAnswer: ${answer}`
    } else {
      return plan
    }
  }
}
