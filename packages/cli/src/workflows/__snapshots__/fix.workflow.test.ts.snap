// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`should succeed when command passes on first attempt 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun test",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should succeed when command passes on first attempt 2`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should prompt for command when not provided 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should prompt for command when not provided 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun typecheck && bun test",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should prompt for command when not provided 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should use check command as default when only check available 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should use check command as default when only check available 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun typecheck",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should use check command as default when only check available 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should use test command as default when only test available 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should use test command as default when only test available 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun test",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should use test command as default when only test available 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should combine check and test commands when both available 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should combine check and test commands when both available 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "eslint . && jest",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should combine check and test commands when both available 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle object-style script config 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should handle object-style script config 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "tsc --noEmit && vitest",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should handle object-style script config 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle no default command 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should handle no default command 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "npm run build",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should handle no default command 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should retry and invoke coder agent when command fails 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun test",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should retry and invoke coder agent when command fails 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "agent": "coder",
      "defaultContext": true,
      "messages": [
        {
          "content": 
"# Code Fixing Task

## Context

This is attempt 1 of 10 to fix the issues.
## Command Failed

Command: \`bun test\`
Exit code: 1

## Output

<stdout>
FAIL src/test.ts
</stdout>

<stderr>
TypeError: undefined is not a function
</stderr>

## Systematic Debugging Approach

### 1. Error Analysis

- **Identify the root cause** from error messages (don't just treat symptoms)
- **Categorize the error type**:
  - Type errors (TypeScript compilation issues)
  - Test failures (assertion failures, unexpected behavior)
  - Runtime errors (crashes, exceptions)
  - Linting/formatting issues
  - Build/compilation errors
- **Check for patterns**: Are multiple similar errors occurring?


### 2. Investigation

- **Read the files mentioned in error messages** to understand the context
- **Search for related code** that might be affected by the same issue
- **Look for similar patterns** in the codebase that work correctly
- **Check imports and dependencies** for missing or incorrect references
- **Verify type definitions** match actual usage

### 3. Fix Strategy

- **Make minimal targeted changes**: Fix only what's broken
- **Address root cause, not symptoms**: Don't just silence errors

- **Consider ripple effects**: Will this fix break something else?
- **Maintain consistency**: Follow existing patterns and conventions
- **Preserve functionality**: Don't remove features to fix errors

### 4. Common Error Patterns

**Type Errors:**
- Missing or incorrect type imports
- Type mismatches in function calls or assignments
- Missing properties on objects
- Incorrect generic type parameters

**Test Failures:**
- Outdated test expectations (snapshots, assertions)
- Missing test setup or teardown
- Incorrect mock data or stubs
- Changed function signatures

**Import/Module Errors:**
- Incorrect import paths
- Missing exports
- Circular dependencies
- Module resolution issues

### 5. Verification

- Ensure your fix resolves the specific error shown
- Check that you haven't introduced new issues
- Verify the fix aligns with project conventions
- Consider if similar issues exist elsewhere in the codebase

## Your Task

Analyze the error output systematically and fix the code. Focus on understanding the root cause before making changes. Make minimal, targeted fixes that address the actual problem."
,
          "type": "user",
        },
      ],
    },
    "tool": "invokeAgent",
    "type": "tool",
  },
}
`;

exports[`should retry and invoke coder agent when command fails 3`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "bun test",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should retry and invoke coder agent when command fails 4`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should retry multiple times before succeeding 1`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle command with stdout and stderr 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "agent": "coder",
      "defaultContext": true,
      "messages": [
        {
          "content": 
"# Code Fixing Task

## Context

This is attempt 1 of 10 to fix the issues.
## Command Failed

Command: \`make build\`
Exit code: 2

## Output

<stdout>
Building...
Compiling source files
</stdout>

<stderr>
Warning: deprecated API
Error: compilation failed
</stderr>

## Systematic Debugging Approach

### 1. Error Analysis

- **Identify the root cause** from error messages (don't just treat symptoms)
- **Categorize the error type**:
  - Type errors (TypeScript compilation issues)
  - Test failures (assertion failures, unexpected behavior)
  - Runtime errors (crashes, exceptions)
  - Linting/formatting issues
  - Build/compilation errors
- **Check for patterns**: Are multiple similar errors occurring?


### 2. Investigation

- **Read the files mentioned in error messages** to understand the context
- **Search for related code** that might be affected by the same issue
- **Look for similar patterns** in the codebase that work correctly
- **Check imports and dependencies** for missing or incorrect references
- **Verify type definitions** match actual usage

### 3. Fix Strategy

- **Make minimal targeted changes**: Fix only what's broken
- **Address root cause, not symptoms**: Don't just silence errors

- **Consider ripple effects**: Will this fix break something else?
- **Maintain consistency**: Follow existing patterns and conventions
- **Preserve functionality**: Don't remove features to fix errors

### 4. Common Error Patterns

**Type Errors:**
- Missing or incorrect type imports
- Type mismatches in function calls or assignments
- Missing properties on objects
- Incorrect generic type parameters

**Test Failures:**
- Outdated test expectations (snapshots, assertions)
- Missing test setup or teardown
- Incorrect mock data or stubs
- Changed function signatures

**Import/Module Errors:**
- Incorrect import paths
- Missing exports
- Circular dependencies
- Module resolution issues

### 5. Verification

- Ensure your fix resolves the specific error shown
- Check that you haven't introduced new issues
- Verify the fix aligns with project conventions
- Consider if similar issues exist elsewhere in the codebase

## Your Task

Analyze the error output systematically and fix the code. Focus on understanding the root cause before making changes. Make minimal, targeted fixes that address the actual problem."
,
          "type": "user",
        },
      ],
    },
    "tool": "invokeAgent",
    "type": "tool",
  },
}
`;

exports[`should handle command with stdout and stderr 2`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should throw error after 10 failed attempts 1`] = `
{
  "error": "Failed to fix the issue after 10 attempts.",
  "status": "failed",
}
`;

exports[`should throw error when no command provided and user provides empty input 1`] = `
{
  "error": "No command provided. Aborting.",
  "status": "failed",
}
`;

exports[`should handle command with only stdout 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "agent": "coder",
      "defaultContext": true,
      "messages": [
        {
          "content": 
"# Code Fixing Task

## Context

This is attempt 1 of 10 to fix the issues.
## Command Failed

Command: \`echo test\`
Exit code: 1

## Output

<stdout>
Some output
</stdout>

<stderr>
(empty)
</stderr>

## Systematic Debugging Approach

### 1. Error Analysis

- **Identify the root cause** from error messages (don't just treat symptoms)
- **Categorize the error type**:
  - Type errors (TypeScript compilation issues)
  - Test failures (assertion failures, unexpected behavior)
  - Runtime errors (crashes, exceptions)
  - Linting/formatting issues
  - Build/compilation errors
- **Check for patterns**: Are multiple similar errors occurring?


### 2. Investigation

- **Read the files mentioned in error messages** to understand the context
- **Search for related code** that might be affected by the same issue
- **Look for similar patterns** in the codebase that work correctly
- **Check imports and dependencies** for missing or incorrect references
- **Verify type definitions** match actual usage

### 3. Fix Strategy

- **Make minimal targeted changes**: Fix only what's broken
- **Address root cause, not symptoms**: Don't just silence errors

- **Consider ripple effects**: Will this fix break something else?
- **Maintain consistency**: Follow existing patterns and conventions
- **Preserve functionality**: Don't remove features to fix errors

### 4. Common Error Patterns

**Type Errors:**
- Missing or incorrect type imports
- Type mismatches in function calls or assignments
- Missing properties on objects
- Incorrect generic type parameters

**Test Failures:**
- Outdated test expectations (snapshots, assertions)
- Missing test setup or teardown
- Incorrect mock data or stubs
- Changed function signatures

**Import/Module Errors:**
- Incorrect import paths
- Missing exports
- Circular dependencies
- Module resolution issues

### 5. Verification

- Ensure your fix resolves the specific error shown
- Check that you haven't introduced new issues
- Verify the fix aligns with project conventions
- Consider if similar issues exist elsewhere in the codebase

## Your Task

Analyze the error output systematically and fix the code. Focus on understanding the root cause before making changes. Make minimal, targeted fixes that address the actual problem."
,
          "type": "user",
        },
      ],
    },
    "tool": "invokeAgent",
    "type": "tool",
  },
}
`;

exports[`should handle command with only stdout 2`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle command with only stderr 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "agent": "coder",
      "defaultContext": true,
      "messages": [
        {
          "content": 
"# Code Fixing Task

## Context

This is attempt 1 of 10 to fix the issues.
## Command Failed

Command: \`test-cmd\`
Exit code: 1

## Output

<stdout>
(empty)
</stdout>

<stderr>
Error occurred
</stderr>

## Systematic Debugging Approach

### 1. Error Analysis

- **Identify the root cause** from error messages (don't just treat symptoms)
- **Categorize the error type**:
  - Type errors (TypeScript compilation issues)
  - Test failures (assertion failures, unexpected behavior)
  - Runtime errors (crashes, exceptions)
  - Linting/formatting issues
  - Build/compilation errors
- **Check for patterns**: Are multiple similar errors occurring?


### 2. Investigation

- **Read the files mentioned in error messages** to understand the context
- **Search for related code** that might be affected by the same issue
- **Look for similar patterns** in the codebase that work correctly
- **Check imports and dependencies** for missing or incorrect references
- **Verify type definitions** match actual usage

### 3. Fix Strategy

- **Make minimal targeted changes**: Fix only what's broken
- **Address root cause, not symptoms**: Don't just silence errors

- **Consider ripple effects**: Will this fix break something else?
- **Maintain consistency**: Follow existing patterns and conventions
- **Preserve functionality**: Don't remove features to fix errors

### 4. Common Error Patterns

**Type Errors:**
- Missing or incorrect type imports
- Type mismatches in function calls or assignments
- Missing properties on objects
- Incorrect generic type parameters

**Test Failures:**
- Outdated test expectations (snapshots, assertions)
- Missing test setup or teardown
- Incorrect mock data or stubs
- Changed function signatures

**Import/Module Errors:**
- Incorrect import paths
- Missing exports
- Circular dependencies
- Module resolution issues

### 5. Verification

- Ensure your fix resolves the specific error shown
- Check that you haven't introduced new issues
- Verify the fix aligns with project conventions
- Consider if similar issues exist elsewhere in the codebase

## Your Task

Analyze the error output systematically and fix the code. Focus on understanding the root cause before making changes. Make minimal, targeted fixes that address the actual problem."
,
          "type": "user",
        },
      ],
    },
    "tool": "invokeAgent",
    "type": "tool",
  },
}
`;

exports[`should handle command with only stderr 2`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle config with undefined scripts 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should handle config with undefined scripts 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "custom-command",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should handle config with undefined scripts 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;

exports[`should handle mixed script formats 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": "bun typecheck && bun test -u",
      "message": "Please enter the command to run to identify issues:",
    },
    "tool": "input",
    "type": "tool",
  },
}
`;

exports[`should handle mixed script formats 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "command": "eslint . && jest --coverage",
      "pipe": true,
      "shell": true,
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should handle mixed script formats 3`] = `
{
  "output": {
    "success": true,
  },
  "status": "completed",
}
`;
