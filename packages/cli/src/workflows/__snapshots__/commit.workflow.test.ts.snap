// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`should generate commit message with staged files 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": undefined,
    "tool": "printChangeFile",
    "type": "tool",
  },
}
`;

exports[`should generate commit message with staged files 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--name-status",
        "--no-color",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should generate commit message with staged files 3`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should generate commit message with staged files 4`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should generate commit message with staged files 5`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "feat: add newFunc to file.ts",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should generate commit message with staged files 6`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should auto-stage all files when all=true 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "add",
        ".",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should auto-stage all files when all=true 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--name-status",
        "--no-color",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should auto-stage all files when all=true 3`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should auto-stage all files when all=true 4`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should auto-stage all files when all=true 5`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "refactor: update file.ts with new code",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should auto-stage all files when all=true 6`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should prompt user and stage when confirmed 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "default": false,
      "message": "No staged files found. Stage all files?",
    },
    "tool": "confirm",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "add",
        ".",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 3`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--name-status",
        "--no-color",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 4`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "args": [
        "diff",
        "--staged",
      ],
      "command": "git",
    },
    "tool": "executeCommand",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 5`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 6`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "fix: update file.ts",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should prompt user and stage when confirmed 7`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should throw UserCancelledError when user declines staging 1`] = `
{
  "errorName": "UserCancelledError",
  "status": "failed",
}
`;

exports[`should throw error when no files to commit 1`] = `
{
  "error": "No files to commit. Aborting.",
  "status": "failed",
}
`;

exports[`should include user context in agent prompt 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should include user context in agent prompt 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "feat: implement feature X for ticket #123",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should include user context in agent prompt 3`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should handle various file statuses 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should handle various file statuses 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "refactor: update multiple files",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should handle various file statuses 3`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should handle empty diff name status result 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "kind": "StartTask",
      "systemPrompt": 
"
You are an expert at writing git commit messages.
Based on the provided list of staged files in <file_status>, the diff in <diff> and optional user context in <tool_input_context>, generate a concise and descriptive commit message.

Follow the conventional commit format.

Respond with a JSON object containing the commit message.
Example format:
\`\`\`json
{
  "commitMessage": "feat: add new feature\\n\\ndescribe the new feature in more detail"
}
\`\`\`
"
,
    },
    "tool": "taskEvent",
    "type": "tool",
  },
}
`;

exports[`should handle empty diff name status result 2`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "fix: update file.ts with new code",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should handle empty diff name status result 3`] = `
{
  "output": undefined,
  "status": "completed",
}
`;

exports[`should handle workflow with all stages 1`] = `
{
  "next": [Function: AsyncFunction],
  "status": "pending",
  "throw": [Function: AsyncFunction],
  "tool": {
    "input": {
      "message": "fix: correct validation logic in validator.ts",
    },
    "tool": "createCommit",
    "type": "tool",
  },
}
`;

exports[`should handle workflow with all stages 2`] = `
{
  "output": undefined,
  "status": "completed",
}
`;
