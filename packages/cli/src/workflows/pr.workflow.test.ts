// generated by polka.codes

import { expect, test } from 'bun:test'
import assert from 'node:assert/strict'
import { run } from '@polka-codes/workflow'
import { prWorkflow } from './pr.workflow'

test('should create PR with user context', async () => {
  const result1 = await run(prWorkflow, { context: 'Implementing new authentication feature' })
  expect(result1).toMatchSnapshot()

  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  expect(result2).toMatchSnapshot()
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/add-auth\n',
    stderr: '',
  })
  expect(result3).toMatchSnapshot()
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  expect(result4).toMatchSnapshot()
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  expect(result5).toMatchSnapshot()
  assert(result5.status === 'pending')

  // git log --oneline
  const result6 = await result5.next({
    exitCode: 0,
    stdout: 'abc1234 feat: add authentication module\ndef5678 fix: resolve login bug\n',
    stderr: '',
  })
  expect(result6).toMatchSnapshot()
  assert(result6.status === 'pending')

  // git diff
  const result7 = await result6.next({
    exitCode: 0,
    stdout: `--- a/src/auth.ts
+++ b/src/auth.ts
@@ -1,3 +1,5 @@
+export function authenticate() {
+  return true;
+}
 export function login() {}
`,
    stderr: '',
  })
  expect(result7).toMatchSnapshot()
  assert(result7.status === 'pending')

  // invokeAgent
  const result8 = await result7.next({
    output: {
      title: 'feat: add authentication feature',
      description:
        'This PR implements the authentication feature for the application.\n\n### Changes\n- Added authenticate function\n- Fixed login bug',
    },
    messages: [],
  })
  expect(result8).toMatchSnapshot()
  assert(result8.status === 'pending')

  // createPullRequest
  const result9 = await result8.next({
    title: 'feat: add authentication feature',
    description:
      'This PR implements the authentication feature for the application.\n\n### Changes\n- Added authenticate function\n- Fixed login bug',
  })
  expect(result9).toMatchSnapshot()
})

test('should create PR without context', async () => {
  const result1 = await run(prWorkflow, {})
  expect(result1).toMatchSnapshot()
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  expect(result2).toMatchSnapshot()
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/new-feature\n',
    stderr: '',
  })
  expect(result3).toMatchSnapshot()
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  expect(result4).toMatchSnapshot()
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  expect(result5).toMatchSnapshot()
  assert(result5.status === 'pending')

  // git log --oneline
  const result6 = await result5.next({
    exitCode: 0,
    stdout: 'xyz9876 chore: update dependencies\n',
    stderr: '',
  })
  expect(result6).toMatchSnapshot()
  assert(result6.status === 'pending')

  // git diff
  const result7 = await result6.next({
    exitCode: 0,
    stdout: `--- a/package.json
+++ b/package.json
@@ -10,7 +10,7 @@
-    "lodash": "^4.17.20"
+    "lodash": "^4.17.21"
`,
    stderr: '',
  })
  expect(result7).toMatchSnapshot()
  assert(result7.status === 'pending')

  // invokeAgent
  const result8 = await result7.next({
    output: {
      title: 'chore: update dependencies',
      description: 'Updated lodash to latest version',
    },
    messages: [],
  })
  expect(result8).toMatchSnapshot()
  assert(result8.status === 'pending')

  // createPullRequest
  const result9 = await result8.next({
    title: 'chore: update dependencies',
    description: 'Updated lodash to latest version',
  })
  expect(result9).toMatchSnapshot()
})

test('should fail when GitHub CLI is not installed', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version fails
  const result2 = await result1.next({
    exitCode: 1,
    stdout: '',
    stderr: 'command not found: gh',
  })

  assert(result2.status === 'failed')
  expect({
    status: result2.status,
    error: (result2.error as Error)?.message,
  }).toMatchSnapshot()
})

test('should fail when unable to determine default branch', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/my-branch\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git show-ref --verify --quiet refs/heads/develop
  const result6 = await result5.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result6.status === 'pending')

  // gh --version (for gh repo view check)
  const result7 = await result6.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result7.status === 'pending')

  // gh repo view
  const result8 = await result7.next({
    exitCode: 1,
    stdout: '',
    stderr: 'not a git repository',
  })
  assert(result8.status === 'pending')

  // git remote show origin
  const result9 = await result8.next({
    exitCode: 1,
    stdout: '',
    stderr: 'fatal: No remote named origin',
  })
  assert(result9.status === 'failed')
  expect({
    status: result9.status,
    error: (result9.error as Error)?.message,
  }).toMatchSnapshot()
})

test('should handle branch with special characters', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/fix-bug-#123\n',
    stderr: '',
  })
  expect(result3).toMatchSnapshot()
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git log --oneline
  const result6 = await result5.next({
    exitCode: 0,
    stdout: 'aaa1111 fix: resolve issue #123\n',
    stderr: '',
  })
  assert(result6.status === 'pending')

  // git diff
  const result7 = await result6.next({
    exitCode: 0,
    stdout: `--- a/src/bugfix.ts
+++ b/src/bugfix.ts
@@ -5,7 +5,7 @@
-  return false;
+  return true;
`,
    stderr: '',
  })
  expect(result7).toMatchSnapshot()
  assert(result7.status === 'pending')

  // invokeAgent
  const result8 = await result7.next({
    output: {
      title: 'fix: resolve issue #123',
      description: 'Fixed the bug by correcting return value',
    },
    messages: [],
  })
  assert(result8.status === 'pending')

  // createPullRequest
  const result9 = await result8.next({
    title: 'fix: resolve issue #123',
    description: 'Fixed the bug by correcting return value',
  })
  expect(result9).toMatchSnapshot()
})

test('should handle no commits between branches', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/empty-branch\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git log --oneline (empty)
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  expect(result5).toMatchSnapshot()
  assert(result5.status === 'pending')

  // git diff
  const result6 = await result5.next({
    exitCode: 0,
    stdout: `--- a/README.md
+++ b/README.md
@@ -1 +1,2 @@
 # Project
+Updated readme
`,
    stderr: '',
  })
  expect(result6).toMatchSnapshot()
  assert(result6.status === 'pending')

  // invokeAgent
  const result7 = await result6.next({
    output: {
      title: 'docs: update README',
      description: 'Updated project readme',
    },
    messages: [],
  })
  assert(result7.status === 'pending')

  // createPullRequest
  const result8 = await result7.next({
    title: 'docs: update README',
    description: 'Updated project readme',
  })
  expect(result8).toMatchSnapshot()
})

test('should handle empty diff', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/empty-diff\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git log --oneline
  const result6 = await result5.next({
    exitCode: 0,
    stdout: 'bbb2222 chore: trigger CI\n',
    stderr: '',
  })
  assert(result6.status === 'pending')

  // git diff (empty)
  const result7 = await result6.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  expect(result7).toMatchSnapshot()
  assert(result7.status === 'pending')

  // invokeAgent
  const result8 = await result7.next({
    output: {
      title: 'chore: trigger CI',
      description: 'Empty commit to trigger CI pipeline',
    },
    messages: [],
  })
  assert(result8.status === 'pending')

  // createPullRequest
  const result9 = await result8.next({
    title: 'chore: trigger CI',
    description: 'Empty commit to trigger CI pipeline',
  })
  expect(result9).toMatchSnapshot()
})

test('should handle multiple commits with various messages', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/multi-commit\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git log --oneline (multiple commits)
  const result6 = await result5.next({
    exitCode: 0,
    stdout: `abc1234 feat: add user profile page
def5678 fix: resolve navigation issue
ghi9012 test: add unit tests
jkl3456 docs: update API documentation
mno7890 refactor: clean up code
`,
    stderr: '',
  })
  expect(result6).toMatchSnapshot()
  assert(result6.status === 'pending')

  // git diff
  const result7 = await result6.next({
    exitCode: 0,
    stdout: `--- a/src/profile.ts
+++ b/src/profile.ts
@@ -0,0 +1,10 @@
+export function getUserProfile() {
+  return { name: 'User' };
+}
--- a/src/nav.ts
+++ b/src/nav.ts
@@ -5,7 +5,7 @@
-  router.push('/wrong');
+  router.push('/correct');
--- a/docs/API.md
+++ b/docs/API.md
@@ -1 +1,5 @@
 # API
+
+## Endpoints
+- GET /profile
`,
    stderr: '',
  })
  expect(result7).toMatchSnapshot()
  assert(result7.status === 'pending')

  // invokeAgent
  const result8 = await result7.next({
    output: {
      title: 'feat: add user profile page',
      description: `This PR adds a new user profile page and related improvements.

### Changes
- Added user profile page
- Fixed navigation routing issue
- Added comprehensive unit tests
- Updated API documentation
- Code refactoring and cleanup`,
    },
    messages: [],
  })
  assert(result8.status === 'pending')

  // createPullRequest
  const result9 = await result8.next({
    title: 'feat: add user profile page',
    description: `This PR adds a new user profile page and related improvements.

### Changes
- Added user profile page
- Fixed navigation routing issue
- Added comprehensive unit tests
- Updated API documentation
- Code refactoring and cleanup`,
  })
  expect(result9).toMatchSnapshot()
})

test('should use develop as default branch', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/new-feature\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git show-ref --verify --quiet refs/heads/develop
  const result6 = await result5.next({
    exitCode: 0,
    stdout: '',
    stderr: '',
  })
  expect(result6).toMatchSnapshot()
  assert(result6.status === 'pending')

  // git log --oneline
  const result7 = await result6.next({
    exitCode: 0,
    stdout: 'ccc3333 feat: implement feature\n',
    stderr: '',
  })
  assert(result7.status === 'pending')

  // git diff
  const result8 = await result7.next({
    exitCode: 0,
    stdout: `--- a/src/feature.ts
+++ b/src/feature.ts
@@ -1 +1,3 @@
+export function feature() {}
`,
    stderr: '',
  })
  assert(result8.status === 'pending')

  // invokeAgent
  const result9 = await result8.next({
    output: {
      title: 'feat: implement feature',
      description: 'Implemented new feature',
    },
    messages: [],
  })
  assert(result9.status === 'pending')

  // createPullRequest
  const result10 = await result9.next({
    title: 'feat: implement feature',
    description: 'Implemented new feature',
  })
  expect(result10).toMatchSnapshot()
})

test('should use gh repo view to determine default branch', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/custom-branch\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git show-ref --verify --quiet refs/heads/develop
  const result6 = await result5.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result6.status === 'pending')

  // gh --version (for gh repo view check)
  const result7 = await result6.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result7.status === 'pending')

  // gh repo view
  const result8 = await result7.next({
    exitCode: 0,
    stdout: 'trunk\n',
    stderr: '',
  })
  expect(result8).toMatchSnapshot()
  assert(result8.status === 'pending')

  // git log --oneline
  const result9 = await result8.next({
    exitCode: 0,
    stdout: 'ddd4444 refactor: code cleanup\n',
    stderr: '',
  })
  assert(result9.status === 'pending')

  // git diff
  const result10 = await result9.next({
    exitCode: 0,
    stdout: `--- a/src/cleanup.ts
+++ b/src/cleanup.ts
@@ -1,5 +1,3 @@
-// old code
-// more old code
 // clean code
`,
    stderr: '',
  })
  assert(result10.status === 'pending')

  // invokeAgent
  const result11 = await result10.next({
    output: {
      title: 'refactor: code cleanup',
      description: 'Cleaned up old code',
    },
    messages: [],
  })
  assert(result11.status === 'pending')

  // createPullRequest
  const result12 = await result11.next({
    title: 'refactor: code cleanup',
    description: 'Cleaned up old code',
  })
  expect(result12).toMatchSnapshot()
})

test('should use git remote show origin to determine default branch', async () => {
  const result1 = await run(prWorkflow, {})
  assert(result1.status === 'pending')

  // gh --version
  const result2 = await result1.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result2.status === 'pending')

  // git rev-parse --abbrev-ref HEAD
  const result3 = await result2.next({
    exitCode: 0,
    stdout: 'feature/test-branch\n',
    stderr: '',
  })
  assert(result3.status === 'pending')

  // git show-ref --verify --quiet refs/heads/master
  const result4 = await result3.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result4.status === 'pending')

  // git show-ref --verify --quiet refs/heads/main
  const result5 = await result4.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result5.status === 'pending')

  // git show-ref --verify --quiet refs/heads/develop
  const result6 = await result5.next({
    exitCode: 1,
    stdout: '',
    stderr: '',
  })
  assert(result6.status === 'pending')

  // gh --version (for gh repo view check)
  const result7 = await result6.next({
    exitCode: 0,
    stdout: 'gh version 2.40.0',
    stderr: '',
  })
  assert(result7.status === 'pending')

  // gh repo view fails
  const result8 = await result7.next({
    exitCode: 1,
    stdout: '',
    stderr: 'error',
  })
  assert(result8.status === 'pending')

  // git remote show origin
  const result9 = await result8.next({
    exitCode: 0,
    stdout: `* remote origin
  Fetch URL: git@github.com:user/repo.git
  Push  URL: git@github.com:user/repo.git
  HEAD branch: production
  Remote branches:
    production tracked
    feature/test-branch tracked`,
    stderr: '',
  })
  expect(result9).toMatchSnapshot()
  assert(result9.status === 'pending')

  // git log --oneline
  const result10 = await result9.next({
    exitCode: 0,
    stdout: 'eee5555 build: update config\n',
    stderr: '',
  })
  assert(result10.status === 'pending')

  // git diff
  const result11 = await result10.next({
    exitCode: 0,
    stdout: `--- a/config.yml
+++ b/config.yml
@@ -1 +1,2 @@
 version: 1.0
+env: production
`,
    stderr: '',
  })
  assert(result11.status === 'pending')

  // invokeAgent
  const result12 = await result11.next({
    output: {
      title: 'build: update config',
      description: 'Updated configuration for production',
    },
    messages: [],
  })
  assert(result12.status === 'pending')

  // createPullRequest
  const result13 = await result12.next({
    title: 'build: update config',
    description: 'Updated configuration for production',
  })
  expect(result13).toMatchSnapshot()
})
