// generated by polka.codes

import { delegate, executeCommand, handOver, listFiles, readFile, replaceInFile, searchFiles, writeToFile } from '@polka-codes/core'
import { agentWorkflowV2, type JsonUserContent, type WorkflowFnV2 } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'
import { fixWorkflow } from './fix.workflow'
import { planWorkflow } from './plan.workflow'
import { CODER_SYSTEM_PROMPT, getImplementPrompt } from './prompts'

export type JsonImagePart = {
  type: 'image'
  mediaType: string
  image: string // base64 encoded
}

export type JsonFilePart = {
  type: 'file'
  mediaType: string
  filename: string
  data: string // base64 encoded
}

export type CodeWorkflowInput = {
  task: string
  files?: (JsonFilePart | JsonImagePart)[]
}

export const codeWorkflow: WorkflowFnV2<CodeWorkflowInput, void, CliToolRegistry> = async (input, context) => {
  const { logger } = context
  const { task, files } = input

  // Planning phase
  logger.info('\n📋 Phase 1: Creating implementation plan...\n')
  const planResult = await planWorkflow({ task, files, mode: 'confirm' }, context)

  if (!planResult) {
    logger.info('Plan not approved. Exiting.')
    return
  }

  const { plan, files: planFiles } = planResult

  // Implementation phase
  logger.info('\n⚙️  Phase 2: Implementing the plan...\n')

  let implementPrompt = getImplementPrompt(plan)
  if (planFiles && planFiles.length > 0) {
    const fileContentString = planFiles.map((f) => `<file path="${f.path}">${f.content}</file>`).join('\n')
    implementPrompt += `\n\nHere are the files related to the plan:\n${fileContentString}`
  }
  const userContent: JsonUserContent = [{ type: 'text', text: implementPrompt }]
  if (files) {
    for (const file of files) {
      if (file.type === 'file') {
        userContent.push({
          type: 'file',
          mediaType: file.mediaType,
          filename: file.filename,
          data: { type: 'base64', value: file.data },
        })
      } else if (file.type === 'image') {
        userContent.push({
          type: 'image',
          mediaType: file.mediaType,
          image: { type: 'base64', value: file.image },
        })
      }
    }
  }

  await agentWorkflowV2(
    {
      systemPrompt: CODER_SYSTEM_PROMPT,
      userMessage: [{ role: 'user', content: userContent }],
      tools: [readFile, writeToFile, replaceInFile, searchFiles, listFiles, executeCommand, delegate, handOver],
    },
    context,
  )

  logger.info('\n✅ Implementation complete!\n')

  // Fixing phase
  logger.info('\n🔧 Phase 3: Checking for errors...\n')
  await fixWorkflow({ interactive: false, task: input.task }, context)
}
