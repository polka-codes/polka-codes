// generated by polka.codes

import type { Workflow } from '@polka-codes/workflow'
import { runSubWorkflow } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'
import { fixWorkflow } from './fix.workflow'
import { getImplementPrompt } from './prompts'
import { type CreatePlanOutput, createPlan } from './utils/createPlan'

export type JsonImagePart = {
  type: 'image'
  mediaType: string
  image: string // base64 encoded
}

export type JsonFilePart = {
  type: 'file'
  mediaType: string
  filename: string
  data: string // base64 encoded
}

export type CodeWorkflowInput = {
  task: string
  files?: (JsonFilePart | JsonImagePart)[]
}

export const codeWorkflow: Workflow<CodeWorkflowInput, void, CliToolRegistry> = {
  name: 'Code Task',
  description: 'Plan and implement a feature or task using architect and coder agents.',
  async *fn(input, { tools, logger }) {
    const { task, files } = input
    let plan = ''
    let userFeedback = ''

    // Planning phase
    while (true) {
      logger.info('\n📋 Phase 1: Creating implementation plan...\n')
      const planResult: CreatePlanOutput = yield* createPlan({
        tools,
        task,
        userFeedback,
        files,
      })

      if (planResult.reason) {
        logger.info('No plan generated. Reason:', planResult.reason)
        return
      }
      plan = planResult.plan || ''

      logger.info('\n📋 Generated Implementation Plan:\n')
      logger.info(plan)
      logger.info('Files:')
      for (const file of planResult.files || []) {
        logger.info(`- ${file.path}`)
      }
      logger.info('\n')

      const approved = yield* tools.confirm({
        message: 'Do you approve this plan and want to proceed with implementation?',
        default: false,
      })

      if (approved) {
        userFeedback = ''
        break
      } else {
        userFeedback = yield* tools.input({
          message: 'What changes would you like to make to the plan?',
        })
      }
    }

    // Implementation phase
    logger.info('\n⚙️  Phase 2: Implementing the plan...\n')

    const implementPrompt = getImplementPrompt(plan)

    const coderMessages: any[] = [{ type: 'user', content: implementPrompt }]
    if (files) {
      coderMessages[0].content = [
        implementPrompt,
        ...files.map((f) => ({
          ...f,
          image: f.type === 'image' ? Buffer.from(f.image, 'base64') : undefined,
          data: f.type === 'file' ? Buffer.from(f.data, 'base64') : undefined,
        })),
      ]
    }

    yield* tools.invokeAgent({
      agent: 'coder',
      messages: coderMessages,
      defaultContext: true,
    })

    logger.info('\n✅ Implementation complete!\n')

    // Fixing phase
    logger.info('\n🔧 Phase 3: Checking for errors...\n')
    yield* runSubWorkflow(tools, fixWorkflow, { interactive: false, task: input.task })
  },
}
