// generated by polka.codes

import type { WorkflowFnV2 } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'
import { fixWorkflow } from './fix.workflow'
import { getImplementPrompt } from './prompts'
import { type CreatePlanOutput, createPlan } from './utils/createPlan'

export type JsonImagePart = {
  type: 'image'
  mediaType: string
  image: string // base64 encoded
}

export type JsonFilePart = {
  type: 'file'
  mediaType: string
  filename: string
  data: string // base64 encoded
}

export type CodeWorkflowInput = {
  task: string
  files?: (JsonFilePart | JsonImagePart)[]
}

export const codeWorkflow: WorkflowFnV2<CodeWorkflowInput, void, CliToolRegistry> = async (input, context) => {
  const { toolHandler, logger } = context
  const { task, files } = input
  let plan = ''
  let userFeedback = ''

  // Planning phase
  while (true) {
    logger.info('\n📋 Phase 1: Creating implementation plan...\n')
    const planResult: CreatePlanOutput = await createPlan({
      toolHandler,
      task,
      userFeedback,
      files,
    })

    if (planResult.reason) {
      logger.info('No plan generated. Reason:', planResult.reason)
      return
    }
    plan = planResult.plan || ''

    logger.info('\n📋 Generated Implementation Plan:\n')
    logger.info(plan)
    logger.info('Files:')
    for (const file of planResult.files || []) {
      logger.info(`- ${file.path}`)
    }
    logger.info('\n')

    const approved = await toolHandler.confirm({
      message: 'Do you approve this plan and want to proceed with implementation?',
      default: false,
    })

    if (approved) {
      userFeedback = ''
      break
    } else {
      userFeedback = await toolHandler.input({
        message: 'What changes would you like to make to the plan?',
      })
    }
  }

  // Implementation phase
  logger.info('\n⚙️  Phase 2: Implementing the plan...\n')

  const implementPrompt = getImplementPrompt(plan)

  const coderMessages: any[] = [{ type: 'user', content: implementPrompt }]
  if (files) {
    coderMessages[0].content = [
      implementPrompt,
      ...files.map((f) => ({
        ...f,
        image: f.type === 'image' ? Buffer.from(f.image, 'base64') : undefined,
        data: f.type === 'file' ? Buffer.from(f.data, 'base64') : undefined,
      })),
    ]
  }

  await toolHandler.invokeAgent({
    agent: 'coder',
    messages: coderMessages,
    defaultContext: true,
  })

  logger.info('\n✅ Implementation complete!\n')

  // Fixing phase
  logger.info('\n🔧 Phase 3: Checking for errors...\n')
  await fixWorkflow({ interactive: false, task: input.task }, context)
}
