// generated by polka.codes

import { ToolResponseType } from '@polka-codes/core'
import { agentWorkflow, type WorkflowFn } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { GET_PR_DETAILS_PROMPT } from './prompts'
import { checkGhInstalled, getDefaultBranch } from './workflow.utils'

const prDetailsSchema = z.object({
  title: z.string(),
  description: z.string(),
})

export const prWorkflow: WorkflowFn<{ context?: string }, { title: string; description: string }, CliToolRegistry> = async (
  input,
  context,
) => {
  const { step, tools } = context
  const { diff, commits, branchName } = await step('get-git-info', async () => {
    await checkGhInstalled(tools.executeCommand)
    const branchResult = await tools.executeCommand({ command: 'git', args: ['rev-parse', '--abbrev-ref', 'HEAD'] })
    const branchName = branchResult.stdout.trim()
    const defaultBranch = await getDefaultBranch(tools.executeCommand)
    if (!defaultBranch) {
      throw new Error('Could not determine default branch name.')
    }
    const commitsResult = await tools.executeCommand({
      command: 'git',
      args: ['--no-pager', 'log', '--oneline', '--no-color', '--no-merges', '--no-decorate', `${defaultBranch}..HEAD`],
    })
    const commits = commitsResult.stdout
    const diffResult = await tools.executeCommand({
      command: 'git',
      args: ['--no-pager', 'diff', `${defaultBranch}..HEAD`],
    })
    const diff = diffResult.stdout
    return { diff, commits, branchName }
  })

  const messageParts = [`<branch_name>${branchName}</branch_name>`, `<commit_messages>${commits}</commit_messages>`, `<diff>${diff}</diff>`]
  if (input.context) {
    messageParts.push(`<user_context>${input.context}</user_context>`)
  }

  const agentResult = await agentWorkflow(
    {
      systemPrompt: GET_PR_DETAILS_PROMPT,
      userMessage: [
        {
          role: 'user',
          content: messageParts.join('\n'),
        },
      ],
      tools: [], // No tools are needed for this agent
      outputSchema: prDetailsSchema,
    },
    context,
  )

  if (agentResult.type !== ToolResponseType.Exit) {
    throw new Error(`Workflow exited unexpectedly with type: ${agentResult.type}`)
  }

  const prDetails = agentResult.object as z.infer<typeof prDetailsSchema>

  const result = await tools.createPullRequest(prDetails)

  return result
}
