// generated by polka.codes

import { execSync } from 'node:child_process'
import type { ToolSignature, Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { InvokeAgentTool } from '../workflow-tools'
import { checkGhInstalled, getDefaultBranch } from './workflow.utils'

const prDetailsSchema = z.object({
  title: z.string(),
  description: z.string(),
})

type PRWorkflowTools = {
  invokeAgent: InvokeAgentTool
  createPullRequest: ToolSignature<{ title: string; description: string }, { title: string; description: string }>
}

const GET_PR_DETAILS_PROMPT = `
You are an expert at creating pull requests.
Based on the provided branch name, commit messages, and diff, generate a title and description for the pull request.

Respond with a JSON object containing the title and description.
Example format:
\`\`\`json
{
  "title": "feat: add new feature",
  "description": "This pull request adds a new feature that does...\\n\\n### Changes\\n- ..."
}
\`\`\`
`

export const prWorkflow: Workflow<{ context?: string }, { title: string; description: string }, PRWorkflowTools> = {
  name: 'Create Pull Request',
  description: 'Generate a pull request title and description and create the pull request.',
  async *fn(input, step, tools) {
    const { diff, commits, branchName } = await step('get-git-info', async () => {
      checkGhInstalled()
      const branchName = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim()
      const defaultBranch = getDefaultBranch()
      if (!defaultBranch) {
        throw new Error('Could not determine default branch name.')
      }
      const commits = execSync(`git --no-pager log --oneline --no-color --no-merges --no-decorate ${defaultBranch}..HEAD`, {
        encoding: 'utf-8',
      })
      const diff = execSync(`git diff ${defaultBranch}..HEAD`, { encoding: 'utf-8' })
      return { diff, commits, branchName }
    })

    const messageParts = [
      `<branch_name>${branchName}</branch_name>`,
      `<commit_messages>${commits}</commit_messages>`,
      `<diff>${diff}</diff>`,
    ]
    if (input.context) {
      messageParts.push(`<user_context>${input.context}</user_context>`)
    }

    const { output: prDetails } = yield* tools.invokeAgent({
      agent: 'analyzer',
      messages: [
        GET_PR_DETAILS_PROMPT,
        {
          type: 'user',
          content: messageParts.join('\n'),
        },
      ],
      outputSchema: prDetailsSchema,
    })

    const result = yield* tools.createPullRequest(prDetails as { title: string; description: string })

    return result
  },
}
