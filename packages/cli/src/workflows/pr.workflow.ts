// generated by polka.codes

import { execSync, spawnSync } from 'node:child_process'
import { builder, type CustomStepSpec, parseJsonFromMarkdown, type WorkflowSpec } from '@polka-codes/core'
import { z } from 'zod'
import type { CommandWorkflowContext } from '../runWorkflow'
import { checkGhInstalled, getDefaultBranch } from './workflow.utils'

const prDetailsSchema = z.object({
  title: z.string(),
  description: z.string(),
})

const GET_PR_DETAILS_PROMPT = `
You are an expert at creating pull requests.
Based on the provided branch name, commit messages, and diff, generate a title and description for the pull request.

Respond with a JSON object containing the title and description.
Example format:
\`\`\`json
{
  "title": "feat: add new feature",
  "description": "This pull request adds a new feature that does...\n\n### Changes\n- ..."
}
\`\`\`
`

const getGitInfo: CustomStepSpec<{ context?: string }, { diff: string; commits: string; branchName: string; context?: string }> = {
  id: 'get-git-info',
  type: 'custom' as const,
  run: async (input) => {
    checkGhInstalled()

    const branchName = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim()
    const defaultBranch = getDefaultBranch()

    if (!defaultBranch) {
      throw new Error('Could not determine default branch name.')
    }

    const commits = execSync(`git --no-pager log --oneline --no-color --no-merges --no-decorate ${defaultBranch}..HEAD`, {
      encoding: 'utf-8',
    })

    const diff = execSync(`git diff ${defaultBranch}..HEAD`, { encoding: 'utf-8' })

    return { type: 'success', output: { diff, commits, branchName, context: input.context } }
  },
}

const createPullRequest: CustomStepSpec<{ title: string; description: string }, { title: string; description: string }> = {
  id: 'create-pull-request',
  type: 'custom' as const,
  run: async (input, context) => {
    const { title, description } = input
    const { ui } = context as CommandWorkflowContext
    if (ui.spinner.isSpinning) {
      ui.spinner.stop()
    }
    console.log('Title:', title)
    console.log(description)

    await new Promise((resolve) => setTimeout(resolve, 10))

    spawnSync('gh', ['pr', 'create', '--title', title, '--body', description], {
      stdio: 'inherit',
    })

    return { type: 'success', output: { title, description } }
  },
}

export const prWorkflow: WorkflowSpec<{ context?: string }, { title: string; description: string }> = {
  name: 'Create Pull Request',
  description: 'Generate a pull request title and description and create the pull request.',
  step: builder<{ context?: string }>()
    .custom(getGitInfo)
    .agent('generate-pr-details', {
      agent: 'analyzer',
      messages: [
        GET_PR_DETAILS_PROMPT,
        {
          type: 'function',
          fn: (input: { diff: string; commits: string; branchName: string; context?: string }) => {
            const parts = [
              `<branch_name>${input.branchName}</branch_name>`,
              `<commit_messages>${input.commits}</commit_messages>`,
              `<diff>${input.diff}</diff>`,
            ]
            if (input.context) {
              parts.push(`<user_context>${input.context}</user_context>`)
            }
            return parts.join('\n')
          },
        },
      ],
      outputSchema: prDetailsSchema,
      parseOutput: parseJsonFromMarkdown,
    })
    .custom(createPullRequest)
    .build(),
}
