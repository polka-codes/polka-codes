// generated by polka.codes

import { ToolResponseType } from '@polka-codes/core'
import { agentWorkflow, runSubWorkflow, type Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { GET_PR_DETAILS_PROMPT } from './prompts'
import { checkGhInstalled, getDefaultBranch } from './workflow.utils'

const prDetailsSchema = z.object({
  title: z.string(),
  description: z.string(),
})

export const prWorkflow: Workflow<{ context?: string }, { title: string; description: string }, CliToolRegistry> = {
  name: 'Create Pull Request',
  description: 'Generate a pull request title and description and create the pull request.',
  async *fn(input, step, tools) {
    const { diff, commits, branchName } = yield* step('get-git-info', async function* () {
      yield* checkGhInstalled(tools)
      const branchResult = yield* tools.executeCommand({ command: 'git', args: ['rev-parse', '--abbrev-ref', 'HEAD'] })
      const branchName = branchResult.stdout.trim()
      const defaultBranch = yield* getDefaultBranch(tools)
      if (!defaultBranch) {
        throw new Error('Could not determine default branch name.')
      }
      const commitsResult = yield* tools.executeCommand({
        command: 'git',
        args: ['--no-pager', 'log', '--oneline', '--no-color', '--no-merges', '--no-decorate', `${defaultBranch}..HEAD`],
      })
      const commits = commitsResult.stdout
      const diffResult = yield* tools.executeCommand({
        command: 'git',
        args: ['--no-pager', 'diff', `${defaultBranch}..HEAD`],
      })
      const diff = diffResult.stdout
      return { diff, commits, branchName }
    })

    const messageParts = [
      `<branch_name>${branchName}</branch_name>`,
      `<commit_messages>${commits}</commit_messages>`,
      `<diff>${diff}</diff>`,
    ]
    if (input.context) {
      messageParts.push(`<user_context>${input.context}</user_context>`)
    }

    const agentResult = yield* runSubWorkflow(tools, agentWorkflow, {
      systemPrompt: GET_PR_DETAILS_PROMPT,
      userMessage: [
        {
          role: 'user',
          content: messageParts.join('\n'),
        },
      ],
      tools: [], // No tools are needed for this agent
      outputSchema: prDetailsSchema,
    })

    if (agentResult?.status !== 'completed') {
      throw new Error('Workflow exited unexpectedly')
    }

    const { output } = agentResult
    if (output.type !== ToolResponseType.Exit) {
      throw new Error(`Expected PR details, but got ${output.type}`)
    }

    const prDetails = output.object as z.infer<typeof prDetailsSchema>

    const result = yield* tools.createPullRequest(prDetails)

    return result
  },
}
