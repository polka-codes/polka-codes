// generated by polka.codes

import type { Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { WorkflowTools } from '../workflow-tools'
import { checkGhInstalled, getDefaultBranch } from './workflow.utils'

const prDetailsSchema = z.object({
  title: z.string(),
  description: z.string(),
})

const GET_PR_DETAILS_PROMPT = `
You are an expert at creating pull requests.
Based on the provided branch name, commit messages, and diff, generate a title and description for the pull request.

Respond with a JSON object containing the title and description.
Example format:
\`\`\`json
{
  "title": "feat: add new feature",
  "description": "This pull request adds a new feature that does...\\n\\n### Changes\\n- ..."
}
\`\`\`
`

export const prWorkflow: Workflow<{ context?: string }, { title: string; description: string }, WorkflowTools> = {
  name: 'Create Pull Request',
  description: 'Generate a pull request title and description and create the pull request.',
  async *fn(input, step, tools) {
    const { diff, commits, branchName } = yield* step('get-git-info', async function* () {
      yield* checkGhInstalled(tools)
      const branchResult = yield* tools.executeCommand({ command: 'git', args: ['rev-parse', '--abbrev-ref', 'HEAD'] })
      const branchName = branchResult.stdout.trim()
      const defaultBranch = yield* getDefaultBranch(tools)
      if (!defaultBranch) {
        throw new Error('Could not determine default branch name.')
      }
      const commitsResult = yield* tools.executeCommand({
        command: 'git',
        args: ['--no-pager', 'log', '--oneline', '--no-color', '--no-merges', '--no-decorate', `${defaultBranch}..HEAD`],
      })
      const commits = commitsResult.stdout
      const diffResult = yield* tools.executeCommand({
        command: 'git',
        args: ['--no-pager', 'diff', `${defaultBranch}..HEAD`],
      })
      const diff = diffResult.stdout
      return { diff, commits, branchName }
    })

    const messageParts = [
      `<branch_name>${branchName}</branch_name>`,
      `<commit_messages>${commits}</commit_messages>`,
      `<diff>${diff}</diff>`,
    ]
    if (input.context) {
      messageParts.push(`<user_context>${input.context}</user_context>`)
    }

    const { output: prDetails } = yield* tools.invokeAgent({
      agent: 'analyzer',
      messages: [
        GET_PR_DETAILS_PROMPT,
        {
          type: 'user',
          content: messageParts.join('\n'),
        },
      ],
      outputSchema: prDetailsSchema,
      defaultContext: true,
    })

    const result = yield* tools.createPullRequest(prDetails as { title: string; description: string })

    return result
  },
}
