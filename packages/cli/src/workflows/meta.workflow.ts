// generated by polka.codes

import type { Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { agentWorkflow } from './agent.workflow'
import { codeWorkflow } from './code.workflow'
import { runSubWorkflow } from './runSubWorkflow'

export type MetaWorkflowInput = {
  task: string
}

const META_PROMPT = `
You are a meta-agent that decides which workflow to use for a given task.
Based on the user's task, decide whether to use the 'code' workflow or the 'agent' workflow.

- Use the 'code' workflow for tasks that involve writing or modifying code, creating pull requests, fixing errors, etc.
- Use the 'agent' workflow for tasks that can be handled by a specialized agent (e.g., 'architect', 'analyzer').

If you choose the 'agent' workflow, you must also specify which agent to use.
Available agents are: 'architect', 'analyzer', 'coder', 'code-fixer'.

The user's task is:
{task}

Respond with a JSON object in a markdown block with the following structure:
{
  "workflow": "<workflow_name>", // 'code' or 'agent'
  "agent": "<agent_name>" // required if workflow is 'agent'
}
`

const DecisionSchema = z.object({
  workflow: z.enum(['code', 'agent']),
  agent: z.string().optional(),
})

export const metaWorkflow: Workflow<MetaWorkflowInput, any, CliToolRegistry> = {
  name: 'Meta Workflow',
  description: "Dynamically chooses and runs a workflow based on the user's task.",
  async *fn(input, _step, tools) {
    const { task } = input

    console.log(`\nðŸ¤” Deciding which workflow to use for task: "${task}"...\n`)

    const { output: decision } = yield* tools.invokeAgent({
      agent: 'architect',
      messages: [META_PROMPT.replace('{task}', task)],
      outputSchema: DecisionSchema,
    })

    if (!decision || !decision.workflow) {
      throw new Error('Could not decide which workflow to run.')
    }

    console.log(`\nâœ… Decision: Using '${decision.workflow}' workflow.`)
    if (decision.agent) {
      console.log(`   Agent: ${decision.agent}`)
    }
    console.log('\n')

    if (decision.workflow === 'code') {
      return yield* runSubWorkflow(tools, codeWorkflow, { task })
    } else if (decision.workflow === 'agent' && decision.agent) {
      return yield* runSubWorkflow(tools, agentWorkflow, {
        task,
        agent: decision.agent,
      })
    } else {
      throw new Error(`Invalid workflow decision: ${JSON.stringify(decision, null, 2)}`)
    }
  },
}
