// generated by polka.codes

import { ToolResponseType } from '@polka-codes/core'
import { agentWorkflow, type WorkflowFn } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { codeWorkflow } from './code.workflow'
import { planWorkflow } from './plan.workflow'
import { META_PROMPT } from './prompts'
import { taskWorkflow } from './task.workflow'

export type MetaWorkflowInput = {
  task: string
}

const DecisionSchema = z.object({
  workflow: z.enum(['code', 'plan', 'task']),
})

export const metaWorkflow: WorkflowFn<MetaWorkflowInput, void, CliToolRegistry> = async (input, context) => {
  const { task } = input
  const { logger } = context

  logger.info(`\nðŸ¤” Deciding which workflow to use for task...\n`)

  const result = await agentWorkflow(
    {
      systemPrompt: META_PROMPT,
      userMessage: [
        {
          role: 'user',
          content: `<task>${task}</task>`,
        },
      ],
      tools: [],
      outputSchema: DecisionSchema,
    },
    context,
  )

  if (result.type !== ToolResponseType.Exit || !result.object) {
    throw new Error(`Could not decide which workflow to run. Agent exited with reason: ${result.type}`)
  }

  const decision = result.object as z.infer<typeof DecisionSchema>

  if (!decision.workflow) {
    throw new Error('Could not decide which workflow to run.')
  }

  logger.info(`\nâœ… Decision: Using '${decision.workflow}' workflow.`)

  if (decision.workflow === 'code') {
    await codeWorkflow({ task }, context)
  } else if (decision.workflow === 'plan') {
    await planWorkflow({ task }, context)
  } else if (decision.workflow === 'task') {
    await taskWorkflow(
      {
        task,
      },
      context,
    )
  } else {
    throw new Error(`Invalid workflow decision: ${JSON.stringify(decision, null, 2)}`)
  }
}
