// generated by polka.codes

import type { Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { codeWorkflow } from './code.workflow'
import { getMetaPrompt } from './prompts'
import { taskWorkflow } from './task.workflow'

export type MetaWorkflowInput = {
  task: string
}

const DecisionSchema = z.object({
  workflow: z.enum(['code', 'agent']),
  agent: z.string().optional(),
})

export const metaWorkflow: Workflow<MetaWorkflowInput, void, CliToolRegistry> = {
  name: 'Meta Workflow',
  description: "Dynamically chooses and runs a workflow based on the user's task.",
  async *fn(input, { tools, logger, runSubWorkflow }) {
    const { task } = input

    logger.info(`\nðŸ¤” Deciding which workflow to use for task...\n`)

    const { output: decision } = yield* tools.invokeAgent({
      agent: 'architect',
      messages: [getMetaPrompt(task)],
      outputSchema: DecisionSchema,
    })

    if (!decision || !decision.workflow) {
      throw new Error('Could not decide which workflow to run.')
    }

    logger.info(`\nâœ… Decision: Using '${decision.workflow}' workflow.`)
    if (decision.agent) {
      logger.info(`   Agent: ${decision.agent}`)
    }

    if (decision.workflow === 'code') {
      yield* runSubWorkflow(codeWorkflow, { task })
    } else if (decision.workflow === 'agent' && decision.agent) {
      yield* runSubWorkflow(taskWorkflow, {
        task,
        agent: decision.agent,
      })
    } else {
      throw new Error(`Invalid workflow decision: ${JSON.stringify(decision, null, 2)}`)
    }
  },
}
