// generated by polka.codes

import type { WorkflowFn } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { codeWorkflow } from './code.workflow'
import { getMetaPrompt } from './prompts'
import { taskWorkflow } from './task.workflow'

export type MetaWorkflowInput = {
  task: string
}

const DecisionSchema = z.object({
  workflow: z.enum(['code', 'agent']),
  agent: z.string().optional(),
})

export const metaWorkflow: WorkflowFn<MetaWorkflowInput, void, CliToolRegistry> = async (input, context) => {
  const { task } = input
  const { toolHandler, logger } = context

  logger.info(`\nðŸ¤” Deciding which workflow to use for task...\n`)

  const { output: decision } = await toolHandler.invokeAgent({
    agent: 'architect',
    messages: [getMetaPrompt(task)],
    outputSchema: DecisionSchema,
  })

  if (!decision || !decision.workflow) {
    throw new Error('Could not decide which workflow to run.')
  }

  logger.info(`\nâœ… Decision: Using '${decision.workflow}' workflow.`)
  if (decision.agent) {
    logger.info(`   Agent: ${decision.agent}`)
  }

  if (decision.workflow === 'code') {
    await codeWorkflow({ task }, context)
  } else if (decision.workflow === 'agent' && decision.agent) {
    await taskWorkflow(
      {
        task,
        agent: decision.agent,
      },
      context,
    )
  } else {
    throw new Error(`Invalid workflow decision: ${JSON.stringify(decision, null, 2)}`)
  }
}
