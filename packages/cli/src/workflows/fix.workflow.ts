// generated by polka.codes
import { loadConfig } from '@polka-codes/cli-shared'
import type { PlainJson, Workflow } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'

export type FixWorkflowInput = {
  command?: string
}

export const fixWorkflow: Workflow<FixWorkflowInput, PlainJson, CliToolRegistry> = {
  name: 'Fix',
  description: 'Fix an issue by running a command repeatedly.',
  async *fn(input, _step, tools) {
    let command = input.command

    if (!command) {
      const config = loadConfig()
      const check = config?.scripts?.check
      const test = config?.scripts?.test

      let checkCommand: string | undefined
      if (typeof check === 'string') {
        checkCommand = check
      } else if (check) {
        checkCommand = check.command
      }

      let testCommand: string | undefined
      if (typeof test === 'string') {
        testCommand = test
      } else if (test) {
        testCommand = test.command
      }

      let defaultCommand: string | undefined
      if (checkCommand && testCommand) {
        defaultCommand = `${checkCommand} && ${testCommand}`
      } else if (checkCommand) {
        defaultCommand = checkCommand
      } else if (testCommand) {
        defaultCommand = testCommand
      }

      command = yield* tools.input({
        message: 'Please enter the command to run to identify issues:',
        default: defaultCommand,
      })

      if (!command) {
        throw new Error('No command provided. Aborting.')
      }
    }

    for (let i = 0; i < 10; i++) {
      console.log(`Running command: ${command}`)
      const { exitCode, stdout, stderr } = yield* tools.executeCommand({ command, shell: true, pipe: true })

      if (exitCode === 0) {
        console.log('Command succeeded!')
        return { success: true }
      }

      console.log(`Command failed with exit code ${exitCode}. Asking agent to fix it...`)

      const prompt = `The command "${command}" failed with exit code ${exitCode}.
Please fix the code.

stdout:
${stdout}

stderr:
${stderr}
`

      yield* tools.invokeAgent({
        agent: 'coder',
        messages: [{ type: 'user', content: prompt }],
        defaultContext: true,
      })
    }

    throw new Error('Failed to fix the issue after 10 attempts.')
  },
}
