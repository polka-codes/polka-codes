// generated by polka.codes
import { loadConfig } from '@polka-codes/cli-shared'
import { executeCommand, listFiles, readFile, searchFiles, ToolResponseType, writeToFile } from '@polka-codes/core'
import { agentWorkflow, type Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import { FIX_SYSTEM_PROMPT, getFixUserPrompt } from './prompts'

export type FixWorkflowInput = {
  command?: string
  task?: string
  interactive?: boolean
}

const FixIterationSummarySchema = z.object({
  summary: z.string(),
})

export const fixWorkflow: Workflow<FixWorkflowInput, { summaries: string[] }, CliToolRegistry> = {
  name: 'Fix',
  description: 'Fix an issue by running a command repeatedly.',
  async *fn(input, { tools, logger, runSubWorkflow }) {
    const { command: inputCommand, task, interactive = true } = input
    let command = inputCommand
    const summaries: string[] = []

    if (!command) {
      const config = loadConfig()
      const check = config?.scripts?.check
      const test = config?.scripts?.test

      let checkCommand: string | undefined
      if (typeof check === 'string') {
        checkCommand = check
      } else if (check) {
        checkCommand = check.command
      }

      let testCommand: string | undefined
      if (typeof test === 'string') {
        testCommand = test
      } else if (test) {
        testCommand = test.command
      }

      let defaultCommand: string | undefined
      if (checkCommand && testCommand) {
        defaultCommand = `${checkCommand} && ${testCommand}`
      } else if (checkCommand) {
        defaultCommand = checkCommand
      } else if (testCommand) {
        defaultCommand = testCommand
      }

      if (interactive) {
        command = yield* tools.input({
          message: 'Please enter the command to run to identify issues:',
          default: defaultCommand,
        })

        if (!command) {
          throw new Error('No command provided. Aborting.')
        }
      } else {
        command = defaultCommand
      }

      if (!command) {
        // This can happen if interactive is false and no command is found
        logger.info('No command to run.')
        return { summaries: [] }
      }
    }

    for (let i = 0; i < 10; i++) {
      logger.info(`Running command (attempt ${i + 1}/10): ${command}`)
      const { exitCode, stdout, stderr } = yield* tools.executeCommand({
        command,
        shell: true,
        pipe: true,
      })

      if (exitCode === 0) {
        logger.info('Command succeeded!')
        return { summaries }
      }

      logger.info(`Command failed with exit code ${exitCode}. Asking agent to fix it...`)

      const result = yield* runSubWorkflow(agentWorkflow, {
        systemPrompt: FIX_SYSTEM_PROMPT,
        userMessage: [
          {
            role: 'user',
            content: getFixUserPrompt(command, exitCode, stdout, stderr, task),
          },
        ],
        tools: [readFile, writeToFile, searchFiles, listFiles, executeCommand],
        outputSchema: FixIterationSummarySchema,
      })

      if (result.status === 'completed' && result.output.type === ToolResponseType.Exit && result.output.object) {
        const summary = (result.output.object as { summary: string }).summary
        summaries.push(summary)
        logger.info(`Summary of changes: ${summary}`)
      }
    }

    throw new Error('Failed to fix the issue after 10 attempts.')
  },
}
