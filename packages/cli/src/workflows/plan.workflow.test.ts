// generated by polka.codes
import { expect, test } from 'bun:test'
import { run } from '@polka-codes/workflow'
import { planWorkflow } from './plan.workflow'

test('should generate new plan without questions and save with default path', async () => {
  const result1 = await run(planWorkflow, { task: 'Build a REST API' })
  expect(result1).toMatchSnapshot()
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# REST API Plan\n\n1. Setup Express server\n2. Define routes\n3. Add middleware' },
    messages: [],
  })
  expect(result2).toMatchSnapshot()
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  if (result3.status === 'pending') {
    if (result3.tool?.tool === 'input') {
      expect(result3.tool.input.message).toBe('Where do you want to save the plan?')
      expect(result3.tool.input.default).toMatch(/^\.plans\/plan-.*\.md$/)
    }
  }
  if (result3.status !== 'pending') return

  const result4 = await result3.next('.plans/plan-2025-10-08.md')
  expect(result4).toMatchSnapshot()
  if (result4.status !== 'pending') return

  const result5 = await result4.next({})
  expect(result5).toMatchSnapshot()
})

test('should generate plan with clarifying question', async () => {
  const result1 = await run(planWorkflow, { task: 'Create a web app' })
  expect(result1).toMatchSnapshot()
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { question: 'What framework do you want to use?' },
    messages: [],
  })
  expect(result2).toMatchSnapshot()
  if (result2.status !== 'pending') return

  const result3 = await result2.next('React with TypeScript')
  expect(result3).toMatchSnapshot()
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: { plan: '# Web App Plan\n\n1. Setup React + TypeScript\n2. Configure build tools\n3. Create components' },
    messages: [],
  })
  expect(result4).toMatchSnapshot()
  if (result4.status !== 'pending') return

  const result5 = await result4.next('save')
  if (result5.status !== 'pending') return

  const result6 = await result5.next('.plans/webapp-plan.md')
  if (result6.status !== 'pending') return

  const result7 = await result6.next({})
  expect(result7).toMatchSnapshot()
})

test('should update existing plan', async () => {
  const existingPlan = '# API Plan\n\n1. Setup server\n2. Add routes'
  const result1 = await run(planWorkflow, {
    task: 'Add authentication',
    fileContent: existingPlan,
    filePath: '.plans/api-plan.md',
  })
  expect(result1).toMatchSnapshot()
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: '# API Plan\n\n1. Setup server\n2. Add routes\n3. Implement authentication\n   - JWT tokens\n   - Login/logout endpoints',
    },
    messages: [],
  })
  expect(result2).toMatchSnapshot()
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  if (result3.status !== 'pending') return

  const result4 = await result3.next({})
  expect(result4).toMatchSnapshot()
})

test('should handle user feedback and regenerate', async () => {
  const result1 = await run(planWorkflow, { task: 'Build a mobile app' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# Mobile App Plan\n\n1. Choose native development\n2. Build iOS app\n3. Build Android app' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('feedback')
  expect(result3).toMatchSnapshot()
  if (result3.status !== 'pending') return

  const result4 = await result3.next('Use React Native instead of native development')
  expect(result4).toMatchSnapshot()
  if (result4.status !== 'pending') return

  const result5 = await result4.next({
    output: {
      plan: '# Mobile App Plan\n\n1. Setup React Native\n2. Configure for iOS and Android\n3. Build cross-platform app',
    },
    messages: [],
  })
  if (result5.status !== 'pending') return

  const result6 = await result5.next('save')
  if (result6.status !== 'pending') return

  const result7 = await result6.next('.plans/mobile-plan.md')
  if (result7.status !== 'pending') return

  const result8 = await result7.next({})
  expect(result8).toMatchSnapshot()
})

test('should regenerate plan from scratch', async () => {
  const result1 = await run(planWorkflow, { task: 'Create a CLI tool' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# CLI Tool Plan\n\n1. Use Python\n2. Add argparse' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('regenerate')
  expect(result3).toMatchSnapshot()
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: { plan: '# CLI Tool Plan\n\n1. Use Node.js with Commander\n2. Add TypeScript support' },
    messages: [],
  })
  if (result4.status !== 'pending') return

  const result5 = await result4.next('exit')
  expect(result5).toMatchSnapshot()
})

test('should execute plan', async () => {
  const result1 = await run(planWorkflow, { task: 'Fix bugs in authentication' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# Bug Fix Plan\n\n1. Review auth code\n2. Fix token validation\n3. Add tests' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('execute')
  expect(result3).toMatchSnapshot()
  if (result3.status !== 'pending') return

  const result4 = await result3.next({})
  expect(result4).toMatchSnapshot()
})

test('should exit without saving', async () => {
  const result1 = await run(planWorkflow, { task: 'Design database schema' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# Database Schema\n\n1. Users table\n2. Posts table\n3. Comments table' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('exit')
  expect(result3).toMatchSnapshot()
})

test('should handle multiple clarifying questions', async () => {
  const result1 = await run(planWorkflow, { task: 'Build a data processing pipeline' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { question: 'What is the data source?' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('PostgreSQL database')
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: { question: 'What is the target format?' },
    messages: [],
  })
  if (result4.status !== 'pending') return

  const result5 = await result4.next('JSON files')
  if (result5.status !== 'pending') return

  const result6 = await result5.next({
    output: {
      plan: '# Data Pipeline Plan\n\n1. Connect to PostgreSQL\n2. Extract data\n3. Transform to JSON\n4. Write to files',
    },
    messages: [],
  })
  if (result6.status !== 'pending') return

  const result7 = await result6.next('save')
  if (result7.status !== 'pending') return

  const result8 = await result7.next('.plans/pipeline-plan.md')
  if (result8.status !== 'pending') return

  const result9 = await result8.next({})
  expect(result9).toMatchSnapshot()
})

test('should handle multiple feedback iterations', async () => {
  const result1 = await run(planWorkflow, { task: 'Implement caching layer' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# Caching Plan\n\n1. Use in-memory cache' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('feedback')
  if (result3.status !== 'pending') return

  const result4 = await result3.next('Add Redis support')
  if (result4.status !== 'pending') return

  const result5 = await result4.next({
    output: { plan: '# Caching Plan\n\n1. Setup Redis\n2. Implement cache layer' },
    messages: [],
  })
  if (result5.status !== 'pending') return

  const result6 = await result5.next('feedback')
  if (result6.status !== 'pending') return

  const result7 = await result6.next('Add cache invalidation strategy')
  if (result7.status !== 'pending') return

  const result8 = await result7.next({
    output: { plan: '# Caching Plan\n\n1. Setup Redis\n2. Implement cache layer\n3. Add TTL-based invalidation' },
    messages: [],
  })
  if (result8.status !== 'pending') return

  const result9 = await result8.next('save')
  if (result9.status !== 'pending') return

  const result10 = await result9.next('.plans/cache-plan.md')
  if (result10.status !== 'pending') return

  const result11 = await result10.next({})
  expect(result11).toMatchSnapshot()
})

test('should save plan with custom path', async () => {
  const result1 = await run(planWorkflow, { task: 'Migrate to microservices' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: '# Microservices Migration\n\n1. Identify service boundaries\n2. Extract services\n3. Setup API gateway',
    },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  if (result3.status !== 'pending') return

  const result4 = await result3.next('docs/architecture/microservices-plan.md')
  expect(result4).toMatchSnapshot()
  if (result4.status !== 'pending') return

  const result5 = await result4.next({})
  expect(result5).toMatchSnapshot()
})

test('should handle plan with both plan and question returned', async () => {
  const result1 = await run(planWorkflow, { task: 'Setup CI/CD pipeline' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: '# CI/CD Pipeline\n\n1. Choose CI platform',
      question: 'Which CI platform do you prefer: GitHub Actions, GitLab CI, or Jenkins?',
    },
    messages: [],
  })
  expect(result2).toMatchSnapshot()
  if (result2.status !== 'pending') return

  const result3 = await result2.next('GitHub Actions')
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: {
      plan: '# CI/CD Pipeline\n\n1. Setup GitHub Actions\n2. Configure workflows\n3. Add deployment steps',
    },
    messages: [],
  })
  if (result4.status !== 'pending') return

  const result5 = await result4.next('execute')
  if (result5.status !== 'pending') return

  const result6 = await result5.next({})
  expect(result6).toMatchSnapshot()
})

test('should handle empty task input', async () => {
  const result1 = await run(planWorkflow, { task: '' })
  expect(result1).toMatchSnapshot()
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { question: 'What would you like to plan?' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('Create a landing page')
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: { plan: '# Landing Page\n\n1. Design layout\n2. Implement HTML/CSS\n3. Add interactivity' },
    messages: [],
  })
  if (result4.status !== 'pending') return

  const result5 = await result4.next('exit')
  expect(result5).toMatchSnapshot()
})

test('should handle plan with checklist format', async () => {
  const result1 = await run(planWorkflow, { task: 'Onboard new team member' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: '# Onboarding Plan\n\n- [ ] Setup dev environment\n- [ ] Grant access to repositories\n- [ ] Review codebase\n- [ ] Assign first task',
    },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  if (result3.status !== 'pending') return

  const result4 = await result3.next('.plans/onboarding.md')
  if (result4.status !== 'pending') return

  const result5 = await result4.next({})
  expect(result5).toMatchSnapshot()
})

test('should handle complex plan with mixed formats', async () => {
  const result1 = await run(planWorkflow, { task: 'Launch new feature' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: `# Feature Launch Plan

1. Development Phase
   - [ ] Implement core functionality
   - [ ] Write unit tests
   - [ ] Code review

2. Testing Phase
   a. QA testing
   b. User acceptance testing
   c. Performance testing

3. Deployment
   1. Deploy to staging
   2. Run smoke tests
   3. Deploy to production
   4. Monitor metrics`,
    },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  if (result3.status !== 'pending') return

  const result4 = await result3.next('.plans/feature-launch.md')
  if (result4.status !== 'pending') return

  const result5 = await result4.next({})
  expect(result5).toMatchSnapshot()
})

test('should handle workflow with question, feedback, and save cycle', async () => {
  const result1 = await run(planWorkflow, { task: 'Optimize application performance' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { question: 'What are the main performance bottlenecks?' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('Slow database queries and large bundle size')
  if (result3.status !== 'pending') return

  const result4 = await result3.next({
    output: {
      plan: '# Performance Optimization\n\n1. Optimize database queries\n2. Reduce bundle size',
    },
    messages: [],
  })
  if (result4.status !== 'pending') return

  const result5 = await result4.next('feedback')
  if (result5.status !== 'pending') return

  const result6 = await result5.next('Add caching strategy')
  if (result6.status !== 'pending') return

  const result7 = await result6.next({
    output: {
      plan: '# Performance Optimization\n\n1. Optimize database queries\n2. Reduce bundle size\n3. Implement Redis caching',
    },
    messages: [],
  })
  if (result7.status !== 'pending') return

  const result8 = await result7.next('save')
  if (result8.status !== 'pending') return

  const result9 = await result8.next('.plans/performance-optimization.md')
  if (result9.status !== 'pending') return

  const result10 = await result9.next({})
  expect(result10).toMatchSnapshot()
})

test('should update existing plan with filePath provided', async () => {
  const existingPlan = '# Security Audit\n\n1. Review authentication'
  const result1 = await run(planWorkflow, {
    task: 'Add more security checks',
    fileContent: existingPlan,
    filePath: 'docs/security-audit.md',
  })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: {
      plan: '# Security Audit\n\n1. Review authentication\n2. Check authorization\n3. Audit data encryption\n4. Review API security',
    },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('save')
  expect(result3).toMatchSnapshot()
  if (result3.status !== 'pending') return

  const result4 = await result3.next({})
  expect(result4).toMatchSnapshot()
})

test('should handle regenerate after feedback', async () => {
  const result1 = await run(planWorkflow, { task: 'Implement search feature' })
  if (result1.status !== 'pending') return

  const result2 = await result1.next({
    output: { plan: '# Search Feature\n\n1. Basic keyword search' },
    messages: [],
  })
  if (result2.status !== 'pending') return

  const result3 = await result2.next('feedback')
  if (result3.status !== 'pending') return

  const result4 = await result3.next('Add full-text search with Elasticsearch')
  if (result4.status !== 'pending') return

  const result5 = await result4.next({
    output: { plan: '# Search Feature\n\n1. Setup Elasticsearch\n2. Implement full-text search' },
    messages: [],
  })
  if (result5.status !== 'pending') return

  const result6 = await result5.next('regenerate')
  if (result6.status !== 'pending') return

  const result7 = await result6.next({
    output: { plan: '# Search Feature\n\n1. Evaluate search solutions\n2. Implement chosen solution\n3. Add filters' },
    messages: [],
  })
  if (result7.status !== 'pending') return

  const result8 = await result7.next('save')
  if (result8.status !== 'pending') return

  const result9 = await result8.next('.plans/search.md')
  if (result9.status !== 'pending') return

  const result10 = await result9.next({})
  expect(result10).toMatchSnapshot()
})
