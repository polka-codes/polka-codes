// generated by polka.codes
import type { ToolHandler, WorkflowFn } from '@polka-codes/workflow'
import { z } from 'zod'
import type { CliToolRegistry } from '../workflow-tools'
import type { JsonFilePart, JsonImagePart } from './code.workflow'
import { getImplementPrompt, PLAN_PROMPT } from './prompts'

const PlanSchema = z.object({
  plan: z.string().nullish(),
  question: z.string().nullish(),
  reason: z.string().nullish(),
  files: z.array(z.string()).nullish(),
})

export type CreatePlanOutput = {
  plan?: string
  reason?: string
  files?: { path: string; content: string }[]
}

export type CreatePlanInput = {
  toolHandler: ToolHandler<CliToolRegistry>
  task: string
  plan?: string
  userFeedback?: string
  files?: (JsonFilePart | JsonImagePart)[]
}

async function createPlan(input: CreatePlanInput): Promise<CreatePlanOutput> {
  const { toolHandler, task, files } = input
  let plan = input.plan || ''
  let userFeedback = input.userFeedback || ''

  while (true) {
    const currentTask = userFeedback ? `${task}\n\nUser feedback: ${userFeedback}` : task
    const planContent = plan ? `The content of an existing plan file:\n<plan_file>\n${plan}\n</plan_file>` : ''
    const prompt = PLAN_PROMPT.replace('{task}', currentTask).replace('{planContent}', planContent)

    const messages: any[] = [{ type: 'user', content: prompt }]
    if (files) {
      messages[0].content = [
        prompt,
        ...files.map((f) => ({
          ...f,
          image: f.type === 'image' ? Buffer.from(f.image, 'base64') : undefined,
          data: f.type === 'file' ? Buffer.from(f.data, 'base64') : undefined,
        })),
      ]
    }

    const { output } = await toolHandler.invokeAgent({
      agent: 'architect',
      messages,
      outputSchema: PlanSchema,
      defaultContext: true,
    })

    const parsedOutput = PlanSchema.parse(output)
    const { plan: newPlan, question, reason, files: filePaths } = parsedOutput

    if (reason) {
      return { reason }
    }

    if (newPlan !== undefined) {
      plan = newPlan || ''
    }

    if (question) {
      const answer = await toolHandler.input({ message: question })
      userFeedback = `Question: ${question}\nAnswer: ${answer}`
    } else {
      const files: { path: string; content: string }[] = []
      if (filePaths) {
        for (const path of filePaths) {
          const content = await toolHandler.readFile({ path })
          if (content) {
            files.push({ path, content })
          }
        }
      }
      return { plan, files }
    }
  }
}

export type PlanWorkflowInput = {
  task?: string
  fileContent?: string
  filePath?: string
  files?: (JsonFilePart | JsonImagePart)[]
  mode?: 'interactive' | 'confirm'
}

export type PlanWorkflowOutput = {
  plan: string
  files: CreatePlanOutput['files']
}

type State = 'Generating' | 'Reviewing' | 'Done'

export const planWorkflow: WorkflowFn<PlanWorkflowInput, PlanWorkflowOutput, CliToolRegistry> = async (input, { toolHandler, logger }) => {
  const { fileContent, filePath, mode = 'interactive' } = input
  let currentTask = input.task
  let plan = fileContent || ''
  let files: CreatePlanOutput['files'] = []
  let userFeedback = ''
  let state: State = 'Generating'

  while (state !== 'Done') {
    switch (state) {
      case 'Generating': {
        if (!currentTask) {
          const message = plan ? 'How would you like to improve the plan?' : 'What is the task you want to plan?'
          const defaultTask = plan ? 'Review and improve the plan' : undefined
          try {
            currentTask = await toolHandler.input({
              message,
              default: defaultTask,
            })
          } catch (_error) {
            state = 'Done'
            break
          }
        }

        const planResult = await createPlan({
          toolHandler,
          task: currentTask,
          plan,
          userFeedback,
          files: input.files,
        })

        if (planResult.reason) {
          logger.info(planResult.reason)
          state = 'Done'
          break
        }

        plan = planResult.plan || ''
        files = planResult.files || []
        userFeedback = ''
        state = 'Reviewing'
        break
      }
      case 'Reviewing': {
        logger.info('\nGenerated Plan:\n')
        logger.info(plan)
        if (files.length > 0) {
          logger.info('\nFiles:')
          for (const file of files) {
            logger.info(`- ${file.path}`)
          }
        }

        if (mode === 'confirm') {
          const approved = await toolHandler.confirm({
            message: 'Do you approve this plan and want to proceed with implementation?',
            default: false,
          })

          if (approved) {
            return { plan, files }
          }

          try {
            userFeedback = await toolHandler.input({
              message: 'What changes would you like to make to the plan?',
            })
            state = 'Generating'
          } catch (_error) {
            userFeedback = ''
            state = 'Reviewing'
          }
          break
        }

        const choices = [
          { name: 'Save Plan', value: 'save' },
          { name: 'Execute Plan', value: 'execute' },
          { name: 'Provide Feedback', value: 'feedback' },
          { name: 'Regenerate Plan', value: 'regenerate' },
          { name: 'Exit', value: 'exit' },
        ]

        const choice = await toolHandler.select({
          message: 'What do you want to do?',
          choices,
        })

        switch (choice) {
          case 'save': {
            // Save Plan
            const defaultPath = `.plans/plan-${new Date().toISOString().replace(/:/g, '-')}.md`
            const savePath =
              filePath ||
              (await toolHandler.input({
                message: 'Where do you want to save the plan?',
                default: defaultPath,
              }))
            await toolHandler.writeToFile({ path: savePath, content: plan })
            logger.info(`Plan saved to ${savePath}`)
            state = 'Done'
            break
          }
          case 'execute': {
            // Execute Plan
            await toolHandler.invokeAgent({
              agent: 'coder',
              messages: [getImplementPrompt(plan), ...(files?.map((f) => `<file path="${f.path}">${f.content}</file>`) || [])],
              defaultContext: true,
            })
            state = 'Done'
            break
          }
          case 'feedback': {
            // Provide Feedback
            try {
              userFeedback = await toolHandler.input({
                message: 'What changes do you want to make?',
              })
              state = 'Generating'
            } catch (_error) {
              userFeedback = ''
              state = 'Reviewing'
            }
            break
          }
          case 'regenerate': {
            // Regenerate Plan
            plan = ''
            userFeedback = ''
            state = 'Generating'
            break
          }
          case 'exit': {
            // Exit
            state = 'Done'
            break
          }
        }
        break
      }
    }
  }

  return { plan, files }
}
