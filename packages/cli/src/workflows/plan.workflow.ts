// generated by polka.codes
import type { WorkflowFnV2 } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'
import { getImplementPrompt } from './prompts'
import { type CreatePlanOutput, createPlan } from './utils/createPlan'

export type PlanWorkflowInput = {
  task?: string
  fileContent?: string
  filePath?: string
}

type State = 'Generating' | 'Reviewing' | 'Done'

export const planWorkflow: WorkflowFnV2<PlanWorkflowInput, any, CliToolRegistry> = async (input, { toolHandler, logger }) => {
  const { fileContent, filePath } = input
  let currentTask = input.task
  let plan = fileContent || ''
  let files: CreatePlanOutput['files'] = []
  let userFeedback = ''
  let state: State = 'Generating'

  while (state !== 'Done') {
    switch (state) {
      case 'Generating': {
        if (!currentTask) {
          const message = plan ? 'How would you like to improve the plan?' : 'What is the task you want to plan?'
          const defaultTask = plan ? 'Review and improve the plan' : undefined
          try {
            currentTask = await toolHandler.input({
              message,
              default: defaultTask,
            })
          } catch (_error) {
            state = 'Done'
            break
          }
        }

        const planResult = await createPlan({
          toolHandler,
          task: currentTask,
          plan,
          userFeedback,
        })

        if (planResult.reason) {
          logger.info(planResult.reason)
          state = 'Done'
          break
        }

        plan = planResult.plan || ''
        files = planResult.files || []
        userFeedback = ''
        state = 'Reviewing'
        break
      }
      case 'Reviewing': {
        logger.info('\nGenerated Plan:\n')
        logger.info(plan)
        if (files.length > 0) {
          logger.info('\nFiles:')
          for (const file of files) {
            logger.info(`- ${file.path}`)
          }
        }

        const choices = [
          { name: 'Save Plan', value: 'save' },
          { name: 'Execute Plan', value: 'execute' },
          { name: 'Provide Feedback', value: 'feedback' },
          { name: 'Regenerate Plan', value: 'regenerate' },
          { name: 'Exit', value: 'exit' },
        ]

        const choice = await toolHandler.select({
          message: 'What do you want to do?',
          choices,
        })

        switch (choice) {
          case 'save': {
            // Save Plan
            const defaultPath = `.plans/plan-${new Date().toISOString().replace(/:/g, '-')}.md`
            const savePath =
              filePath ||
              (await toolHandler.input({
                message: 'Where do you want to save the plan?',
                default: defaultPath,
              }))
            await toolHandler.writeToFile({ path: savePath, content: plan })
            logger.info(`Plan saved to ${savePath}`)
            state = 'Done'
            break
          }
          case 'execute': {
            // Execute Plan
            await toolHandler.invokeAgent({
              agent: 'coder',
              messages: [getImplementPrompt(plan), ...(files?.map((f) => `<file path="${f.path}">${f.content}</file>`) || [])],
              defaultContext: true,
            })
            state = 'Done'
            break
          }
          case 'feedback': {
            // Provide Feedback
            try {
              userFeedback = await toolHandler.input({
                message: 'What changes do you want to make?',
              })
              state = 'Generating'
            } catch (_error) {
              userFeedback = ''
              state = 'Reviewing'
            }
            break
          }
          case 'regenerate': {
            // Regenerate Plan
            plan = ''
            userFeedback = ''
            state = 'Generating'
            break
          }
          case 'exit': {
            // Exit
            state = 'Done'
            break
          }
        }
        break
      }
    }
  }

  return {}
}
