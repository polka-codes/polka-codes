// generated by polka.codes
import type { PlainJson, Workflow } from '@polka-codes/workflow'
import { z } from 'zod'
import type { WorkflowTools } from '../workflow-tools'
import { PLAN_PROMPT } from './plan.prompt'

export type PlanWorkflowInput = {
  task: string
  fileContent?: string
  filePath?: string
}

const PlanSchema = z.object({
  plan: z.string().optional(),
  ready: z.boolean(),
  question: z.string().optional(),
})

type State = 'Generating' | 'Reviewing' | 'Done'

export const planWorkflow: Workflow<PlanWorkflowInput, PlainJson, WorkflowTools> = {
  name: 'Plan Task',
  description: 'Create or update a plan for a given task.',
  async *fn(input, _step, tools) {
    const { task, fileContent, filePath } = input
    let plan = fileContent || ''
    let userFeedback = ''
    let state: State = 'Generating'

    while (state !== 'Done') {
      switch (state) {
        case 'Generating': {
          const currentTask = userFeedback ? `${task}\n\nUser feedback: ${userFeedback}` : task
          const prompt = PLAN_PROMPT.replace('{task}', currentTask).replace('{fileContent}', plan)
          const { output } = yield* tools.invokeAgent({
            agent: 'architect',
            messages: [{ type: 'user', content: prompt }],
            outputSchema: PlanSchema,
          })

          const { plan: newPlan, ready, question } = output as z.infer<typeof PlanSchema>

          if (newPlan !== undefined) {
            plan = newPlan
          }

          if (!ready && question) {
            const answer = yield* tools.input({ message: question })
            userFeedback = `Question: ${question}\nAnswer: ${answer}`
            state = 'Generating'
          } else {
            userFeedback = ''
            state = 'Reviewing'
          }
          break
        }
        case 'Reviewing': {
          console.log('\nGenerated Plan:\n')
          console.log(plan)

          const choice = yield* tools.select({
            message: 'What do you want to do?',
            choices: [
              { name: 'Accept and Save', value: '1' },
              { name: 'Provide Feedback', value: '2' },
              { name: 'Regenerate Plan', value: '3' },
              { name: 'Exit', value: '4' },
            ],
          })

          switch (choice) {
            case '1': {
              // Accept and Save
              const defaultPath = `.plans/plan-${new Date().toISOString().replace(/:/g, '-')}.md`
              const savePath = filePath || (yield* tools.input({ message: 'Where do you want to save the plan?', default: defaultPath }))
              yield* tools.writeToFile({ path: savePath, content: plan })
              console.log(`Plan saved to ${savePath}`)
              state = 'Done'
              break
            }
            case '2': {
              // Provide Feedback
              try {
                userFeedback = yield* tools.input({
                  message: 'What changes do you want to make?',
                })
                state = 'Generating'
              } catch (_error) {
                userFeedback = ''
                state = 'Reviewing'
              }
              break
            }
            case '3': {
              // Regenerate Plan
              plan = ''
              userFeedback = ''
              state = 'Generating'
              break
            }
            case '4': {
              // Exit
              state = 'Done'
              break
            }
          }
          break
        }
      }
    }

    return {}
  },
}
