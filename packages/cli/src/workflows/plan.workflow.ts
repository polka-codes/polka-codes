// generated by polka.codes
import type { PlainJson, Workflow } from '@polka-codes/workflow'
import type { CliToolRegistry } from '../workflow-tools'
import { getImplementPrompt } from './prompts'
import { type CreatePlanOutput, createPlan } from './utils/createPlan'

export type PlanWorkflowInput = {
  task?: string
  fileContent?: string
  filePath?: string
}

type State = 'Generating' | 'Reviewing' | 'Done'

export const planWorkflow: Workflow<PlanWorkflowInput, PlainJson, CliToolRegistry> = {
  name: 'Plan Task',
  description: 'Create or update a plan for a given task.',
  async *fn(input, _step, tools) {
    const { fileContent, filePath } = input
    let currentTask = input.task
    let plan = fileContent || ''
    let files: CreatePlanOutput['files'] = []
    let userFeedback = ''
    let state: State = 'Generating'

    while (state !== 'Done') {
      switch (state) {
        case 'Generating': {
          if (!currentTask) {
            const message = plan ? 'How would you like to improve the plan?' : 'What is the task you want to plan?'
            const defaultTask = plan ? 'Review and improve the plan' : undefined
            try {
              currentTask = yield* tools.input({
                message,
                default: defaultTask,
              })
            } catch (_error) {
              state = 'Done'
              break
            }
          }

          const planResult: CreatePlanOutput = yield* createPlan({
            tools,
            task: currentTask,
            plan,
            userFeedback,
          })

          if (planResult.reason) {
            console.log(planResult.reason)
            state = 'Done'
            break
          }

          plan = planResult.plan || ''
          files = planResult.files || []
          userFeedback = ''
          state = 'Reviewing'
          break
        }
        case 'Reviewing': {
          console.log('\nGenerated Plan:\n')
          console.log(plan)

          const choices = [
            { name: 'Save Plan', value: 'save' },
            { name: 'Execute Plan', value: 'execute' },
            { name: 'Provide Feedback', value: 'feedback' },
            { name: 'Regenerate Plan', value: 'regenerate' },
            { name: 'Exit', value: 'exit' },
          ]

          const choice = yield* tools.select({
            message: 'What do you want to do?',
            choices,
          })

          switch (choice) {
            case 'save': {
              // Save Plan
              const defaultPath = `.plans/plan-${new Date().toISOString().replace(/:/g, '-')}.md`
              const savePath =
                filePath ||
                (yield* tools.input({
                  message: 'Where do you want to save the plan?',
                  default: defaultPath,
                }))
              yield* tools.writeToFile({ path: savePath, content: plan })
              console.log(`Plan saved to ${savePath}`)
              state = 'Done'
              break
            }
            case 'execute': {
              // Execute Plan
              yield* tools.invokeAgent({
                agent: 'coder',
                messages: [
                  {
                    type: 'user',
                    content: [getImplementPrompt(plan), ...(files?.map((f) => `<file path="${f.path}">${f.content}</file>`) || [])].join(
                      '\n',
                    ),
                  },
                ],
                defaultContext: true,
              })
              state = 'Done'
              break
            }
            case 'feedback': {
              // Provide Feedback
              try {
                userFeedback = yield* tools.input({
                  message: 'What changes do you want to make?',
                })
                state = 'Generating'
              } catch (_error) {
                userFeedback = ''
                state = 'Reviewing'
              }
              break
            }
            case 'regenerate': {
              // Regenerate Plan
              plan = ''
              userFeedback = ''
              state = 'Generating'
              break
            }
            case 'exit': {
              // Exit
              state = 'Done'
              break
            }
          }
          break
        }
      }
    }

    return {}
  },
}
