// generated by polka.codes
// Utility functions for parsing and annotating unified diff format with line numbers

export interface DiffHunk {
  oldStart: number
  oldCount: number
  newStart: number
  newCount: number
  header: string
}

/**
 * Parse a unified diff hunk header
 * Format: @@ -oldStart,oldCount +newStart,newCount @@ optional context
 */
export function parseHunkHeader(header: string): DiffHunk | null {
  const match = header.match(/^@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/)
  if (!match) return null

  return {
    oldStart: parseInt(match[1], 10),
    oldCount: match[2] ? parseInt(match[2], 10) : 1,
    newStart: parseInt(match[3], 10),
    newCount: match[4] ? parseInt(match[4], 10) : 1,
    header,
  }
}

/**
 * Annotate a diff with line numbers for additions and deletions
 * Adds [Line N] for additions and [Line N removed] for deletions
 */
export function annotateDiffWithLineNumbers(diff: string): string {
  const lines = diff.split('\n')
  const annotatedLines: string[] = []
  let currentNewLine = 0
  let currentOldLine = 0
  let inHunk = false

  for (const line of lines) {
    // Check if this is a hunk header
    if (line.startsWith('@@')) {
      const hunk = parseHunkHeader(line)
      if (hunk) {
        currentOldLine = hunk.oldStart
        currentNewLine = hunk.newStart
        inHunk = true
      }
      annotatedLines.push(line)
      continue
    }

    // Skip file headers and other metadata
    if (line.startsWith('diff --git') || line.startsWith('index ') || line.startsWith('---') || line.startsWith('+++')) {
      annotatedLines.push(line)
      inHunk = false
      continue
    }

    // Only annotate lines within hunks
    if (!inHunk) {
      annotatedLines.push(line)
      continue
    }

    // Handle diff lines
    if (line.startsWith('+') && !line.startsWith('+++')) {
      // Addition - annotate with new file line number
      annotatedLines.push(`${line} [Line ${currentNewLine}]`)
      currentNewLine++
    } else if (line.startsWith('-') && !line.startsWith('---')) {
      // Deletion - annotate with old file line number
      annotatedLines.push(`${line} [Line ${currentOldLine} removed]`)
      currentOldLine++
    } else if (line.startsWith(' ')) {
      // Context line - both line numbers advance
      annotatedLines.push(line)
      currentOldLine++
      currentNewLine++
    } else {
      // Other lines (shouldn't happen in a proper diff, but handle gracefully)
      annotatedLines.push(line)
    }
  }

  return annotatedLines.join('\n')
}

/**
 * Extract line ranges from a diff for a specific file
 * Returns an array of line ranges that were modified
 */
export function extractModifiedLineRanges(
  diff: string,
  filePath?: string,
): Array<{ start: number; end: number; type: 'added' | 'removed' | 'modified' }> {
  const lines = diff.split('\n')
  const ranges: Array<{ start: number; end: number; type: 'added' | 'removed' | 'modified' }> = []
  let currentFile = ''
  let currentNewLine = 0
  let currentOldLine = 0
  let inHunk = false
  let addedLines: number[] = []
  let removedLines: number[] = []

  for (const line of lines) {
    // Track current file
    if (line.startsWith('diff --git')) {
      // Extract filename from diff header
      const match = line.match(/diff --git a\/(.*?) b\//)
      if (match) {
        currentFile = match[1]
      }
      // Reset for new file
      addedLines = []
      removedLines = []
      continue
    }

    // Skip if we're looking for a specific file and this isn't it
    if (filePath && currentFile !== filePath) {
      continue
    }

    // Check if this is a hunk header
    if (line.startsWith('@@')) {
      // Process any accumulated changes from previous hunk
      if (addedLines.length > 0 || removedLines.length > 0) {
        processAccumulatedChanges(addedLines, removedLines, ranges)
        addedLines = []
        removedLines = []
      }

      const hunk = parseHunkHeader(line)
      if (hunk) {
        currentOldLine = hunk.oldStart
        currentNewLine = hunk.newStart
        inHunk = true
      }
      continue
    }

    if (!inHunk) continue

    // Track modifications
    if (line.startsWith('+') && !line.startsWith('+++')) {
      addedLines.push(currentNewLine)
      currentNewLine++
    } else if (line.startsWith('-') && !line.startsWith('---')) {
      removedLines.push(currentOldLine)
      currentOldLine++
    } else if (line.startsWith(' ')) {
      // Context line - process any accumulated changes
      if (addedLines.length > 0 || removedLines.length > 0) {
        processAccumulatedChanges(addedLines, removedLines, ranges)
        addedLines = []
        removedLines = []
      }
      currentOldLine++
      currentNewLine++
    }
  }

  // Process any remaining accumulated changes
  if (addedLines.length > 0 || removedLines.length > 0) {
    processAccumulatedChanges(addedLines, removedLines, ranges)
  }

  return ranges
}

function processAccumulatedChanges(
  addedLines: number[],
  removedLines: number[],
  ranges: Array<{ start: number; end: number; type: 'added' | 'removed' | 'modified' }>,
) {
  if (addedLines.length > 0 && removedLines.length > 0) {
    // Modified lines
    if (addedLines.length > 0) {
      ranges.push({
        start: Math.min(...addedLines),
        end: Math.max(...addedLines),
        type: 'modified',
      })
    }
  } else if (addedLines.length > 0) {
    // Only additions
    ranges.push({
      start: Math.min(...addedLines),
      end: Math.max(...addedLines),
      type: 'added',
    })
  } else if (removedLines.length > 0) {
    // Only removals
    ranges.push({
      start: Math.min(...removedLines),
      end: Math.max(...removedLines),
      type: 'removed',
    })
  }
}
