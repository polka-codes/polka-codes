// Generated by polka.codes

import { describe, expect, test } from 'bun:test'
import { AiServiceProvider } from '@polka-codes/core'
import { ApiProviderConfig } from './ApiProviderConfig'
import type { Config } from './config'

describe('ApiProviderConfig', () => {
  // Define test configurations
  const basicConfig: Config = {
    defaultProvider: AiServiceProvider.Anthropic,
    defaultModel: 'claude-3-opus',
    defaultParameters: {
      temperature: 0.7,
      top_p: 0.9,
    },
    providers: {
      anthropic: {
        apiKey: 'test-api-key',
        defaultModel: 'claude-3-haiku',
        defaultParameters: {
          temperature: 0.5,
          max_tokens: 2000,
        },
      },
      openai: {
        apiKey: 'test-openai-key',
        defaultParameters: {
          temperature: 0.8,
          presence_penalty: 0.2,
        },
      },
    },
  }

  test('constructor initializes providers and parameters', () => {
    const apiConfig = new ApiProviderConfig(basicConfig)

    expect(apiConfig.defaultProvider).toBe(AiServiceProvider.Anthropic)
    expect(apiConfig.providers.anthropic?.apiKey).toBe('test-api-key')
    expect(apiConfig.providers.anthropic?.defaultModel).toBe('claude-3-haiku')
    expect(apiConfig.providers.anthropic?.defaultParameters).toEqual({
      temperature: 0.5,
      max_tokens: 2000,
    })
  })

  test('getConfigForCommand resolves parameters correctly', () => {
    const configWithCommands: Config = {
      ...basicConfig,
      commands: {
        default: {
          provider: AiServiceProvider.Anthropic,
          model: 'claude-3-opus',
          parameters: {
            temperature: 0.6,
            max_tokens: 3000,
          },
        },
        task: {
          model: 'claude-3-sonnet',
          parameters: {
            temperature: 0.8,
          },
        },
      },
    }

    const apiConfig = new ApiProviderConfig(configWithCommands)

    // Test default command config
    const defaultConfig = apiConfig.getConfigForCommand('default')
    expect(defaultConfig).toMatchSnapshot()

    // Test specific command that inherits from default provider parameters
    const taskConfig = apiConfig.getConfigForCommand('task')
    expect(taskConfig).toMatchSnapshot()

    // Test command not defined (should use default)
    const undefinedCommandConfig = apiConfig.getConfigForCommand('undefined-command')
    expect(undefinedCommandConfig).toMatchSnapshot()
  })

  test('getConfigForAgent resolves parameters correctly', () => {
    const configWithAgents: Config = {
      ...basicConfig,
      agents: {
        default: {
          provider: AiServiceProvider.Anthropic,
          model: 'claude-3-opus',
          parameters: {
            temperature: 0.6,
            max_tokens: 3000,
          },
        },
        coder: {
          model: 'claude-3-sonnet',
          parameters: {
            temperature: 0.8,
          },
        },
        analyzer: {
          provider: AiServiceProvider.OpenRouter,
          parameters: {
            frequency_penalty: 0.3,
          },
        },
      },
    }

    const apiConfig = new ApiProviderConfig(configWithAgents)

    // Test default agent config
    const defaultConfig = apiConfig.getConfigForAgent('default')
    expect(defaultConfig).toMatchSnapshot()

    // Test specific agent that inherits provider
    const coderConfig = apiConfig.getConfigForAgent('coder')
    expect(coderConfig).toMatchSnapshot()

    // Test agent with different provider
    const analyzerConfig = apiConfig.getConfigForAgent('analyzer')
    expect(analyzerConfig).toMatchSnapshot()

    // Test agent not defined (should use default)
    const undefinedAgentConfig = apiConfig.getConfigForAgent('undefined-agent')
    expect(undefinedAgentConfig).toMatchSnapshot()
  })

  test('parameters inherit correctly from different levels', () => {
    const complexConfig: Config = {
      defaultProvider: AiServiceProvider.Anthropic,
      defaultModel: 'claude-3-opus',
      defaultParameters: {
        temperature: 0.7,
        top_p: 0.9,
        max_tokens: 4000,
      },
      providers: {
        anthropic: {
          apiKey: 'test-api-key',
          defaultParameters: {
            temperature: 0.5,
            presence_penalty: 0.1,
          },
        },
      },
      agents: {
        default: {
          parameters: {
            temperature: 0.6,
          },
        },
        coder: {
          model: 'claude-3-sonnet',
        },
      },
      commands: {
        default: {
          parameters: {
            top_p: 0.8,
          },
        },
        task: {},
      },
    }

    const apiConfig = new ApiProviderConfig(complexConfig)

    // Test inheritance for agent
    const coderConfig = apiConfig.getConfigForAgent('coder')
    expect(coderConfig?.parameters).toMatchSnapshot()

    // Test inheritance for command
    const taskConfig = apiConfig.getConfigForCommand('task')
    expect(taskConfig?.parameters).toMatchSnapshot()
  })

  test('handles missing providers gracefully', () => {
    const minimalConfig: Config = {
      defaultProvider: AiServiceProvider.Anthropic,
    }

    const apiConfig = new ApiProviderConfig(minimalConfig)

    const agentConfig = apiConfig.getConfigForAgent('coder')
    expect(agentConfig?.parameters).toEqual({})

    const commandConfig = apiConfig.getConfigForCommand('task')
    expect(commandConfig?.parameters).toEqual({})
  })

  test('returns undefined when no provider is configured', () => {
    const emptyConfig: Config = {}

    const apiConfig = new ApiProviderConfig(emptyConfig)

    expect(apiConfig.getConfigForAgent('coder')).toBeUndefined()
    expect(apiConfig.getConfigForCommand('task')).toBeUndefined()
  })
})
