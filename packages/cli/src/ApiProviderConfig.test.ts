// Generated by polka.codes

import { describe, expect, test } from 'bun:test'
import type { Config } from '@polka-codes/cli-shared'
import { ApiProviderConfig } from './ApiProviderConfig'
import { AiProvider } from './getModel'

describe('ApiProviderConfig', () => {
  // Define test configurations
  const basicConfig: Config = {
    defaultProvider: 'anthropic',
    defaultModel: 'claude-3-opus',
    defaultParameters: {
      temperature: 0.7,
      top_p: 0.9,
    },
    providers: {
      anthropic: {
        apiKey: 'test-api-key',
        defaultModel: 'claude-3-haiku',
        defaultParameters: {
          temperature: 0.5,
          max_tokens: 2000,
        },
      },
      openai: {
        apiKey: 'test-openai-key',
        defaultParameters: {
          temperature: 0.8,
          presence_penalty: 0.2,
        },
      },
    },
  }

  test('constructor initializes providers and parameters', () => {
    const apiConfig = new ApiProviderConfig(basicConfig)
    expect(apiConfig).toMatchSnapshot()
  })

  test('getConfigForCommand resolves parameters correctly', () => {
    const configWithCommands: Config = {
      ...basicConfig,
      commands: {
        default: {
          provider: AiProvider.Anthropic,
          model: 'claude-3-opus',
          parameters: {
            temperature: 0.6,
            max_tokens: 3000,
          },
        },
        task: {
          model: 'claude-3-sonnet',
          parameters: {
            temperature: 0.8,
          },
        },
      },
    }

    const apiConfig = new ApiProviderConfig(configWithCommands)

    // Test default command config
    const defaultConfig = apiConfig.getConfigForCommand('default')
    expect(defaultConfig).toMatchSnapshot()

    // Test specific command that inherits from default provider parameters
    const taskConfig = apiConfig.getConfigForCommand('task')
    expect(taskConfig).toMatchSnapshot()

    // Test command not defined (should use default)
    const undefinedCommandConfig = apiConfig.getConfigForCommand('undefined-command')
    expect(undefinedCommandConfig).toMatchSnapshot()
  })

  test('parameters inherit correctly from different levels', () => {
    const complexConfig: Config = {
      defaultProvider: AiProvider.Anthropic,
      defaultModel: 'claude-3-opus',
      defaultParameters: {
        temperature: 0.7,
        top_p: 0.9,
        max_tokens: 4000,
      },
      providers: {
        anthropic: {
          apiKey: 'test-api-key',
          defaultParameters: {
            temperature: 0.5,
            presence_penalty: 0.1,
          },
        },
      },
      commands: {
        default: {
          parameters: {
            top_p: 0.8,
          },
        },
        task: {},
      },
    }

    const apiConfig = new ApiProviderConfig(complexConfig)

    // Test inheritance for command
    const taskConfig = apiConfig.getConfigForCommand('task')
    expect(taskConfig?.parameters).toMatchSnapshot()
  })

  test('handles missing providers gracefully', () => {
    const minimalConfig: Config = {
      defaultProvider: AiProvider.Anthropic,
    }

    const apiConfig = new ApiProviderConfig(minimalConfig)

    const commandConfig = apiConfig.getConfigForCommand('task')
    expect(commandConfig).toMatchSnapshot()
  })

  test('returns undefined when no provider is configured', () => {
    const emptyConfig: Config = {}

    const apiConfig = new ApiProviderConfig(emptyConfig)

    expect(apiConfig.getConfigForCommand('task')).toMatchSnapshot()
  })

  test('handles global default parameters correctly', () => {
    const configWithGlobalDefaults: Config = {
      defaultProvider: AiProvider.OpenRouter,
      defaultModel: 'gpt-4', // Assuming OpenRouter can use gpt-4
      defaultParameters: {
        temperature: 0.2,
        top_p: 0.2,
        frequency_penalty: 0.2,
      },
      providers: {
        openrouter: {
          // Changed from openai to openrouter
          apiKey: 'test-openrouter-key',
          // No defaultParameters here to test global override
        },
        anthropic: {
          apiKey: 'test-anthropic-key',
          defaultModel: 'claude-3-sonnet',
          defaultParameters: {
            temperature: 0.5, // This should override global temperature for Anthropic
            max_tokens: 1000, // This is specific to Anthropic
          },
        },
      },
      commands: {
        default: {
          // Uses OpenRouter by default, should inherit global params
        },
        task: {
          provider: AiProvider.Anthropic,
          parameters: {
            temperature: 0.6, // This should override global and Anthropic's temperature
            max_tokens: 1500, // This should override Anthropic's max_tokens
          },
        },
      },
    }

    const apiConfig = new ApiProviderConfig(configWithGlobalDefaults)

    // Command: default (OpenRouter with global defaults)
    const defaultCommandConfig = apiConfig.getConfigForCommand('default')
    expect(defaultCommandConfig?.parameters).toMatchSnapshot('command default - global params')

    // Command: task (Anthropic, with command-specific overrides)
    const taskCommandConfig = apiConfig.getConfigForCommand('task')
    expect(taskCommandConfig?.parameters).toMatchSnapshot('command task - command params override anthropic and global')

    // Test with only global defaults and no provider specific params
    const configOnlyGlobal: Config = {
      defaultProvider: AiProvider.OpenRouter, // Changed from OpenAI
      defaultModel: 'gpt-3.5-turbo', // Assuming OpenRouter can use this
      defaultParameters: {
        temperature: 0.1,
        max_tokens: 500,
      },
      providers: {
        openrouter: {
          // Changed from openai to openrouter
          apiKey: 'another-openrouter-key',
          // No defaultParameters
        },
      },
    }
    const apiConfigOnlyGlobal = new ApiProviderConfig(configOnlyGlobal)
    const commandOnlyGlobalConfig = apiConfigOnlyGlobal.getConfigForCommand('default')
    expect(commandOnlyGlobalConfig?.parameters).toMatchSnapshot('command default - only global params')
  })

  test('resolves toolFormat correctly for commands', () => {
    const config: Config = {
      defaultProvider: AiProvider.Anthropic,
      providers: {
        anthropic: {
          apiKey: 'anthropic-key',
          defaultModel: 'claude-sonnet-4-20250514',
        },
        openrouter: {
          apiKey: 'openrouter-key',
          defaultModel: 'anthropic/claude-sonnet-4',
        },
      },
      commands: {
        // Sonnet model should default to native
        default: {
          provider: AiProvider.Anthropic,
        },
        // Sonnet model on OpenRouter should default to native
        task: {
          provider: AiProvider.OpenRouter,
        },
        // Explicitly set to polka-codes
        commit: {
          provider: AiProvider.Anthropic,
        },
        // Non-sonnet model should default to polka-codes
        pr: {
          provider: AiProvider.OpenRouter,
          model: 'google/gemini-flash-1.5',
        },
      },
    }

    const apiConfig = new ApiProviderConfig(config)

    // Command tests
    expect(apiConfig.getConfigForCommand('default')).toMatchSnapshot()
    expect(apiConfig.getConfigForCommand('task')).toMatchSnapshot()
    expect(apiConfig.getConfigForCommand('commit')).toMatchSnapshot()
    expect(apiConfig.getConfigForCommand('pr')).toMatchSnapshot()
  })

  test('should correctly read Google Vertex provider config', () => {
    const vertexConfig: Config = {
      defaultProvider: 'google-vertex',
      providers: {
        'google-vertex': {
          apiKey: 'test-vertex-key',
          location: 'us-central1',
          project: 'my-gcp-project',
          keyFile: '/path/to/keyfile.json',
        },
      },
      commands: {
        default: {
          model: 'gemini-1.5-flash',
        },
      },
    }

    const apiConfig = new ApiProviderConfig(vertexConfig)

    const commandConfig = apiConfig.getConfigForCommand('default')
    expect(commandConfig).toMatchSnapshot()
  })
})
