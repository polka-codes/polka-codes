// generated by polka.codes
import { parseJsonFromMarkdown } from '@polka-codes/core'
import { generateText, type LanguageModel } from 'ai'
import { z } from 'zod'

const prompt = `
You are a command output summarizer. Analyze the provided command output, which is prefixed with line numbers and the stream name (stdout/stderr). Your task is to identify the most important lines, such as errors, failures, or key results.

The input is structured as follows:
[line_number]: [stream]: [content]

Your output must be a JSON object containing the line number ranges of the most important lines for each stream. The JSON object should be enclosed in a markdown code block.

The JSON schema is as follows:
{
  "stdout": [[start_line, end_line], ...],
  "stderr": [[start_line, end_line], ...]
}

- Only include lines that are important for understanding the outcome of the command.
- Group consecutive lines into a single range.

Example Output:
\`\`\`json
{
  "stdout": [[1, 3], [5, 7], [9, 11]],
  "stderr": [[1, 2], [4, 5]]
}
`

const schema = z.object({
  stdout: z.array(z.array(z.number()).length(2)).default([]),
  stderr: z.array(z.array(z.number()).length(2)).default([]),
})

export const summarizeOutput = async (model: LanguageModel, stdout: string, stderr: string): Promise<string> => {
  const lines: string[] = []
  let input = ''
  let lineNumber = 1

  for (const line of stdout.split('\n')) {
    lines.push(line)
    input += `[${lineNumber}]: stdout: ${line}\n`
    lineNumber++
  }

  for (const line of stderr.split('\n')) {
    lines.push(line)
    input += `[${lineNumber}]: stderr: ${line}\n`
    lineNumber++
  }

  let lastError: Error | undefined
  let respText = ''
  let currentPrompt = input

  for (let i = 0; i < 3; i++) {
    const resp = await generateText({
      model,
      system: prompt,
      prompt: currentPrompt,
    })
    respText = resp.text

    try {
      const parsed = parseJsonFromMarkdown(respText)
      const { stdout: stdoutRanges, stderr: stderrRanges } = schema.parse(parsed || {})

      let summarizedStdout = ''
      for (const range of stdoutRanges) {
        const [start, end] = range
        for (let i = start; i <= end; i++) {
          summarizedStdout += `${lines[i - 1]}\n`
        }
      }

      let summarizedStderr = ''
      for (const range of stderrRanges) {
        const [start, end] = range
        for (let i = start; i <= end; i++) {
          summarizedStderr += `${lines[i - 1]}\n`
        }
      }

      if (!summarizedStdout && !summarizedStderr) {
        throw new Error('You must output at least one line of stdout or stderr')
      }

      let result = ''
      if (summarizedStdout) {
        result += `STDOUT:\n${summarizedStdout}`
      }
      if (summarizedStderr) {
        if (result) {
          result += '\n\n'
        }
        result += `STDERR:\n${summarizedStderr}`
      }

      return result
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error))
      currentPrompt = `${input}\n\nYour previous output was invalid: ${lastError.message}. You MUST output a valid JSON object inside a markdown code block. Please correct it.`
    }
  }

  throw new Error('Unable to summarize output')
}
