// Generated by polka.codes

import os from 'node:os'
import { AiServiceProvider } from '@polka-codes/core'
import type { Command } from 'commander'
import { set } from 'lodash'

import { ApiProviderConfig } from './ApiProviderConfig'
import { loadConfig } from './config'
import { type Env, getEnv } from './env'

export interface CliOptions {
  config?: string | string[]
  apiProvider?: string
  model?: string
  apiKey?: string
  maxMessageCount?: number
  budget?: number
  verbose?: number
  baseDir?: string
  agent?: string
}

export function addSharedOptions(command: Command) {
  return command
    .option('-c --config <paths>', 'Path to config file(s)', (value: string, prev: string[]) => prev.concat(value), [])
    .option('--api-provider <provider>', 'API provider')
    .option('--model <model>', 'Model ID')
    .option('--api-key <key>', 'API key')
    .option('--max-messages <iterations>', 'Maximum number of messages to send. Default to 50', Number.parseInt, 50)
    .option('--budget <budget>', 'Budget for the AI service. Default to $10', Number.parseFloat)
    .option('-v --verbose', 'Enable verbose output. Use -v for level 1, -vv for level 2', (value, prev) => prev + 1, 0)
    .option('-d --base-dir <path>', 'Base directory to run commands in')
    .option('--agent <agent>', 'Initial agent to use (default: architect)')
}

export function parseOptions(options: CliOptions, cwdArg?: string, home: string = os.homedir(), env: Partial<Env> = getEnv()) {
  let cwd = cwdArg
  if (options.baseDir) {
    process.chdir(options.baseDir)
    cwd = options.baseDir
    console.log('Changed working directory to', cwd)
  } else {
    cwd = process.cwd()
  }

  const config = loadConfig(options.config, cwd, home) ?? {}

  const defaultProvider = (options.apiProvider || env.POLKA_API_PROVIDER || config.defaultProvider) as AiServiceProvider | undefined
  const defaultModel = options.model || env.POLKA_MODEL || config.defaultModel

  if (defaultProvider && defaultModel) {
    set(config, ['providers', defaultProvider, 'defaultModel'], defaultModel)
  }

  const apiKey = options.apiKey || env.POLKA_API_KEY

  if (apiKey) {
    if (!defaultProvider) {
      throw new Error('Must specify a provider if providing an API key')
    }
    set(config, ['providers', defaultProvider, 'apiKey'], apiKey)
  }

  // Set provider-specific API keys
  if (env.ANTHROPIC_API_KEY) {
    set(config, ['providers', AiServiceProvider.Anthropic, 'apiKey'], env.ANTHROPIC_API_KEY)
  }
  if (env.DEEPSEEK_API_KEY) {
    set(config, ['providers', AiServiceProvider.DeepSeek, 'apiKey'], env.DEEPSEEK_API_KEY)
  }
  if (env.OPENROUTER_API_KEY) {
    set(config, ['providers', AiServiceProvider.OpenRouter, 'apiKey'], env.OPENROUTER_API_KEY)
  }

  const providerConfig = new ApiProviderConfig({
    defaultProvider,
    ...config,
  })

  return {
    maxMessageCount: options.maxMessageCount ?? config.maxMessageCount ?? 100,
    budget: options.budget ?? (env.POLKA_BUDGET ? Number.parseFloat(env.POLKA_BUDGET) : undefined) ?? config.budget ?? 10,
    verbose: options.verbose ?? 0,
    config,
    providerConfig,
    agent: options.agent ?? config.agent ?? 'architect',
  }
}
