import os from 'node:os'
// Generated by polka.codes
import { AiServiceProvider } from '@polka-codes/core'
import type { Command } from 'commander'
import { set } from 'lodash'

import { type Config, loadConfig } from './config'

export interface CliOptions {
  config?: string
  c?: string
  apiProvider?: string
  model?: string
  apiKey?: string
  maxIterations?: number
  verbose?: boolean
}

export function addSharedOptions(command: Command) {
  return command
    .option('-c --config <path>', 'Path to config file')
    .option('--api-provider <provider>', 'API provider')
    .option('--model <model>', 'Model ID')
    .option('--api-key <key>', 'API key')
    .option('--max-iterations <iterations>', 'Maximum number of iterations to run. Default to 30', Number.parseInt)
    .option('-v --verbose', 'Enable verbose output')
}

export class ApiProviderConfig {
  readonly defaultProvider?: AiServiceProvider
  readonly providers: Readonly<Partial<Record<AiServiceProvider, { apiKey: string; defaultModel?: string }>>>
  readonly commands?: Partial<Record<string, { provider?: AiServiceProvider; model?: string }>>
  readonly agents?: Partial<Record<string, { provider?: AiServiceProvider; model?: string }>>

  constructor(config: Config) {
    this.defaultProvider = config.defaultProvider as AiServiceProvider | undefined
    this.providers = config.providers ?? {}
    this.commands = config.commands as Partial<Record<string, { provider?: AiServiceProvider; model?: string }>>
    this.agents = config.agents as Partial<Record<string, { provider?: AiServiceProvider; model?: string }>>
  }

  getConfigForCommand(command: string) {
    // TODO: strong type command
    const { provider, model } = this.commands?.[command] ?? this.commands?.default ?? {}
    const finalProvider = provider ?? this.defaultProvider
    if (!finalProvider) {
      return undefined
    }
    const finalModel = model ?? this.providers[finalProvider]?.defaultModel
    const apiKey = this.providers[finalProvider]?.apiKey
    return {
      provider: finalProvider,
      model: finalModel,
      apiKey,
    }
  }

  getConfigForAgent(agent: string) {
    // TODO: strong type agent
    const { provider, model } = this.agents?.[agent] ?? this.agents?.default ?? {}
    const finalProvider = provider ?? this.defaultProvider
    if (!finalProvider) {
      return undefined
    }
    const finalModel = model ?? this.providers[finalProvider]?.defaultModel
    const apiKey = this.providers[finalProvider]?.apiKey
    return {
      provider: finalProvider,
      model: finalModel,
      apiKey,
    }
  }
}

export function parseOptions(options: CliOptions, cwd: string = process.cwd(), home: string = os.homedir()) {
  const config = loadConfig(options.config ?? options.c, cwd, home) ?? {}

  const defaultProvider = (options.apiProvider || process.env.POLKA_API_PROVIDER || config.defaultProvider) as AiServiceProvider | undefined
  const defaultModel = options.model || process.env.POLKA_MODEL || config.defaultModel

  if (defaultProvider && defaultModel) {
    set(config, ['providers', defaultProvider, 'defaultModel'], defaultModel)
  }

  const apiKey = options.apiKey || process.env.POLKA_API_KEY

  if (apiKey) {
    if (!defaultProvider) {
      throw new Error('Must specify a provider if providing an API key')
    }
    set(config, ['providers', defaultProvider, 'apiKey'], apiKey)
  }

  for (const provider of Object.values(AiServiceProvider)) {
    const providerApiKey = process.env[`${provider.toUpperCase()}_API_KEY`]
    if (providerApiKey) {
      set(config, ['providers', provider, 'apiKey'], providerApiKey)
    }
  }

  const providerConfig = new ApiProviderConfig({
    defaultProvider,
    ...config,
  })

  return {
    maxIterations: options.maxIterations ?? 30,
    verbose: options.verbose ?? false,
    config,
    providerConfig,
  }
}
