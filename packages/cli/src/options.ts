// Generated by polka.codes

import os from 'node:os'
import { loadConfig } from '@polka-codes/cli-shared'
import type { Config } from '@polka-codes/core'
import type { Command } from 'commander'
import { set } from 'lodash-es'
import { ApiProviderConfig } from './ApiProviderConfig'
import { type Env, getEnv } from './env'
import { AiProvider } from './getModel'

export interface CliOptions {
  config?: string | string[]
  apiProvider?: string
  model?: string
  apiKey?: string
  maxMessageCount?: number
  budget?: number
  verbose?: number
  baseDir?: string
  agent?: string
  silent?: boolean
  file?: string[]
  json?: boolean
}

export function addSharedOptions(command: Command) {
  return command
    .option('-c --config <paths>', 'Path to config file(s)', (value: string, prev: string[]) => prev.concat(value), [])
    .option('--api-provider <provider>', 'API provider')
    .option('--model <model>', 'Model ID')
    .option('--api-key <key>', 'API key')
    .option('--max-messages <iterations>', 'Maximum number of messages to send.', Number.parseInt)
    .option('--budget <budget>', 'Budget for the AI service.', Number.parseFloat)
    .option(
      '-v --verbose',
      'Enable verbose output. Use -v for level 1, -vv for level 2',
      (_value, prev: number | undefined) => (prev ?? 0) + 1,
    )
    .option('-d --base-dir <path>', 'Base directory to run commands in')
    .option('--agent <agent>', 'Initial agent to use (default: architect)')
    .option('--file <path...>', 'File to include in the task')
    .option('--json', 'Output workflow events as JSON')
    .option('--silent', 'Enable silent mode')
}

export function parseOptions(
  options: CliOptions,
  { commandName, cwdArg }: { commandName?: string; cwdArg?: string } = {},
  home: string = os.homedir(),
  env: Partial<Env> = getEnv(),
): {
  maxMessageCount: number
  budget: number
  verbose: number
  config: Config
  providerConfig: ApiProviderConfig
  agent: string
  silent: boolean
  file: string[] | undefined
} {
  let cwd = cwdArg
  if (options.baseDir) {
    process.chdir(options.baseDir)
    cwd = options.baseDir
    console.log('Changed working directory to', cwd)
  }

  const config = loadConfig(options.config, cwd, home) ?? {}

  const defaultProvider = (options.apiProvider || env.POLKA_API_PROVIDER || config.defaultProvider) as AiProvider | undefined
  const defaultModel = options.model || env.POLKA_MODEL || config.defaultModel

  if (defaultProvider && defaultModel) {
    set(config, ['providers', defaultProvider, 'defaultModel'], defaultModel)
  }

  const apiKey = options.apiKey || env.POLKA_API_KEY

  if (apiKey) {
    if (!defaultProvider) {
      throw new Error('Must specify a provider if providing an API key')
    }
    set(config, ['providers', defaultProvider, 'apiKey'], apiKey)
  }

  // Set provider-specific API keys
  if (env.ANTHROPIC_API_KEY) {
    set(config, ['providers', AiProvider.Anthropic, 'apiKey'], env.ANTHROPIC_API_KEY)
  }
  if (env.DEEPSEEK_API_KEY) {
    set(config, ['providers', AiProvider.DeepSeek, 'apiKey'], env.DEEPSEEK_API_KEY)
  }
  if (env.OPENROUTER_API_KEY) {
    set(config, ['providers', AiProvider.OpenRouter, 'apiKey'], env.OPENROUTER_API_KEY)
  }
  if (env.OPENAI_API_KEY) {
    set(config, ['providers', AiProvider.OpenAI, 'apiKey'], env.OPENAI_API_KEY)
  }

  const providerConfig = new ApiProviderConfig({
    defaultProvider,
    ...config,
  })

  const defaultVerbose = commandName === 'meta' || commandName === 'code' ? 0 : -1
  const verbose = options.verbose ?? defaultVerbose

  return {
    maxMessageCount: options.maxMessageCount ?? config.maxMessageCount ?? 100,
    budget: options.budget ?? (env.POLKA_BUDGET ? Number.parseFloat(env.POLKA_BUDGET) : undefined) ?? config.budget ?? 10,
    verbose,
    config,
    providerConfig,
    agent: options.agent ?? config.agent ?? 'architect',
    silent: options.silent ?? false,
    file: options.file,
  }
}
