// generated by polka.codes

import { AiProvider } from './getModel'
import models from './prices'

/**
 * Generates provider-specific options for enabling thinking capabilities.
 *
 * @param provider The provider name.
 * @param modelId The model ID.
 * @param thinkingBudgetTokens The number of tokens to budget for thinking.
 * @param supportThinking A boolean to force thinking support. If not provided, it will check the model provider.
 * @returns A provider options object for the `streamText` call.
 */
export function getProviderOptions(
  provider: AiProvider,
  modelId: string,
  thinkingBudgetTokens: number,
  supportThinking?: boolean,
): Record<string, any> {
  if (thinkingBudgetTokens <= 0 || !provider || !modelId) {
    return {}
  }

  const modelInfo = (models[provider as keyof typeof models] as Record<string, any>)?.[modelId]
  const providerSupportsThinking = provider === AiProvider.OpenRouter || !!modelInfo?.supportsThinking
  const shouldSupportThinking = supportThinking ?? providerSupportsThinking

  if (!shouldSupportThinking) {
    return {}
  }

  const providerOptions: any = {}

  switch (provider) {
    case AiProvider.Anthropic:
      providerOptions.anthropic = {
        thinking: { type: 'enabled', budgetTokens: thinkingBudgetTokens },
      }
      break
    case AiProvider.OpenRouter:
      if (modelId.startsWith('anthropic/')) {
        // TODO: support thinking for anthropic models
        // openrouter ai sdk doesn't appear to expose reasining details
        // so we can't construct multi step messages correctly when thinking is enabled
        break
      }
      providerOptions.openrouter = {
        reasoning: {
          max_tokens: thinkingBudgetTokens,
        },
      }
      break
    case AiProvider.GoogleVertex:
      providerOptions.google = {
        thinkingConfig: {
          includeThoughts: true,
          thinkingBudget: thinkingBudgetTokens,
        },
      }
      break
    case AiProvider.Ollama:
      break
    case AiProvider.DeepSeek:
      break
    case AiProvider.OpenAI:
      break
  }

  return providerOptions
}
