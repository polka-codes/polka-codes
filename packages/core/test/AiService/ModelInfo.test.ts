/**
 * Tests for ModelInfo utility functions
 * Generated by polka.codes
 */

import { describe, expect, it } from 'bun:test'
import { type ModelInfo, type ModelPricingConfig, applyCustomPricing } from '../../src/AiService/ModelInfo'

describe('applyCustomPricing', () => {
  it('should return original model info if no pricing config is provided', () => {
    const modelInfo: ModelInfo = {
      inputPrice: 1.0,
      outputPrice: 2.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 4.0,
    }

    const result = applyCustomPricing(modelInfo, 'test-model', undefined)
    expect(result).toEqual(modelInfo)
  })

  it('should return original model info if model is not in pricing config', () => {
    const modelInfo: ModelInfo = {
      inputPrice: 1.0,
      outputPrice: 2.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 4.0,
    }

    const pricingConfig: ModelPricingConfig = {
      'other-model': {
        inputPrice: 5.0,
        outputPrice: 6.0,
      },
    }

    const result = applyCustomPricing(modelInfo, 'test-model', pricingConfig)
    expect(result).toEqual(modelInfo)
  })

  it('should apply custom pricing when available', () => {
    const modelInfo: ModelInfo = {
      inputPrice: 1.0,
      outputPrice: 2.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 4.0,
    }

    const pricingConfig: ModelPricingConfig = {
      'test-model': {
        inputPrice: 5.0,
        outputPrice: 6.0,
      },
    }

    const result = applyCustomPricing(modelInfo, 'test-model', pricingConfig)
    expect(result).toEqual({
      inputPrice: 5.0,
      outputPrice: 6.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 4.0,
    })
  })

  it('should only override specified pricing fields', () => {
    const modelInfo: ModelInfo = {
      inputPrice: 1.0,
      outputPrice: 2.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 4.0,
      maxTokens: 1000,
      contextWindow: 2000,
      supportsImages: true,
    }

    const pricingConfig: ModelPricingConfig = {
      'test-model': {
        outputPrice: 6.0,
        cacheReadsPrice: 8.0,
      },
    }

    const result = applyCustomPricing(modelInfo, 'test-model', pricingConfig)
    expect(result).toEqual({
      inputPrice: 1.0,
      outputPrice: 6.0,
      cacheWritesPrice: 3.0,
      cacheReadsPrice: 8.0,
      maxTokens: 1000,
      contextWindow: 2000,
      supportsImages: true,
    })
  })
})
