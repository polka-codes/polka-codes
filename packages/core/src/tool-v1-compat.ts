// generated by polka.codes
import { z } from 'zod'
import type { FullToolInfo, FullToolInfoV2, ToolParameter } from './tool'

function zodSchemaToParameters(schema: z.ZodObject<any>): ToolParameter[] {
  const parameters: ToolParameter[] = []
  const { shape } = schema

  for (const name in shape) {
    const def: z.ZodTypeAny = shape[name]
    const isOptional = def.safeParse(undefined).success

    const description = def.description || ''

    const param: ToolParameter = {
      name,
      description,
      required: !isOptional,
    }

    const usageValue = def.meta()?.usageValue as string | undefined
    if (usageValue) {
      param.usageValue = usageValue
    }

    if (def instanceof z.ZodObject) {
      param.children = zodSchemaToParameters(def)
    } else if (def instanceof z.ZodArray) {
      param.allowMultiple = true
      const element = def.element
      if (element instanceof z.ZodObject) {
        param.children = zodSchemaToParameters(element)
      }
    }

    parameters.push(param)
  }

  return parameters
}

export function toToolInfoV1(tool: FullToolInfoV2): FullToolInfo {
  const { parameters: zodSchema, ...rest } = tool

  const v1Parameters = zodSchemaToParameters(zodSchema)

  return {
    ...rest,
    parameters: v1Parameters,
  }
}
