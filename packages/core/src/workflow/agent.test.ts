// generated by polka.codes
import { describe, expect, spyOn, test } from 'bun:test'
import type { LanguageModelV2 } from '@ai-sdk/provider'

import { AgentBase } from '../Agent'
import { UsageMeter } from '../UsageMeter'
import { type AgentStepSpec, makeAgentStepSpecHandler } from './agent'
import type { WorkflowContext } from './types'

const mockModel = {
  provider: 'test-provider',
  modelId: 'test-model',
  defaultObjectGenerationMode: undefined,
  async doGenerate() {
    throw new Error('not implemented')
  },
  async doStream() {
    throw new Error('not implemented')
  },
} as unknown as LanguageModelV2

describe('workflow agent', () => {
  test('retains usage totals across pause and resume', async () => {
    const handler = makeAgentStepSpecHandler(async () => mockModel)

    const step: AgentStepSpec = {
      id: 'agent-step',
      type: 'agent',
      messages: ['hello world'],
      systemPrompt: 'You are a helpful test agent.',
    }

    const stepRunner = handler.handler(step as AgentStepSpec, (() => step) as any)

    const pauseUsageMeter = new UsageMeter()
    const expectedUsage = {
      input: 123,
      output: 456,
      cachedRead: 7,
      cost: 8.9,
      messageCount: 10,
    }
    pauseUsageMeter.setUsage(expectedUsage)

    const startSpy = spyOn(AgentBase.prototype, 'start').mockImplementation(async () => ({ type: 'Pause', responses: [] }))

    const pauseContext: WorkflowContext = {
      provider: {} as any,
      parameters: { usageMeter: pauseUsageMeter },
    }

    try {
      const pauseResult = await stepRunner.run({}, pauseContext, undefined)

      expect(pauseResult.type).toBe('paused')
      expect(pauseResult.state.usage).toEqual(expectedUsage)

      const resumeUsageMeter = new UsageMeter()
      const setUsageSpy = spyOn(resumeUsageMeter, 'setUsage')

      const resumeContext: WorkflowContext = {
        provider: {} as any,
        parameters: { usageMeter: resumeUsageMeter },
      }

      const resumeResult = await stepRunner.run({}, resumeContext, pauseResult.state)

      expect(resumeResult.type).toBe('paused')
      expect(setUsageSpy).toHaveBeenCalledWith(expectedUsage)
      expect(resumeUsageMeter.usage).toEqual(expectedUsage)
    } finally {
      startSpy.mockRestore()
    }
  })
})
