// generated by polka.codes

import { runStep } from './runStep'
import type { Json, StepSpecHandlerFn, WorkflowContext, WorkflowRunResult, WorkflowSpec } from './types'

export const run = async <TInput extends Record<string, Json>, TOutput extends Record<string, Json>>(
  workflow: WorkflowSpec<TInput, TOutput>,
  context: WorkflowContext,
  handler: StepSpecHandlerFn<any, any>,
  input: TInput,
): Promise<WorkflowRunResult<TOutput>> => {
  const rootStep = handler(workflow.step, handler)
  const result = await runStep(rootStep, input, context, undefined, {})
  switch (result.type) {
    case 'paused':
      return {
        type: 'paused',
        state: result.state,
      }
    case 'error':
      return {
        type: 'error',
        error: result.error,
      }
    case 'success':
      return {
        type: 'success',
        output: result.output as TOutput,
      }
  }
}

export const resume = async <TInput extends Record<string, Json>, TOutput extends Record<string, Json>>(
  workflow: WorkflowSpec<TInput, TOutput>,
  context: WorkflowContext,
  handler: StepSpecHandlerFn<any, any>,
  state: any,
  input: TInput, // This is the new input for the resumed workflow
): Promise<WorkflowRunResult<TOutput>> => {
  const rootStep = handler(workflow.step, handler)
  const result = await runStep(rootStep, input, context, state, {})
  switch (result.type) {
    case 'paused':
      return {
        type: 'paused',
        state: result.state,
      }
    case 'error':
      return {
        type: 'error',
        error: result.error,
      }
    case 'success':
      return {
        type: 'success',
        output: result.output as TOutput,
      }
  }
}
