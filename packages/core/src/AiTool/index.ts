/**
 * Core AI tool execution and creation utilities
 * Generated by polka.codes
 */

import type { MultiAgent } from '../Agent/MultiAgent'
import type { AiServiceBase, ApiUsage } from '../AiService'
import generateGitCommitMessageDef from './generateGitCommitMessage'
import generateGithubPullRequestDetailsDef from './generateGithubPullRequestDetails'
import generateProjectConfigDef from './generateProjectConfig'
import type { AiToolDefinition, GetInput, GetOutput } from './types'

export const executeTool = async <T extends AiToolDefinition<any, any>>(
  definition: T,
  ai: AiServiceBase,
  params: GetInput<T>,
): Promise<{ response: GetOutput<T>; usage: ApiUsage }> => {
  const { response, usage } = await ai.request(definition.prompt, [{ role: 'user', content: definition.formatInput(params) }])
  return {
    response: definition.parseOutput(response),
    usage,
  }
}

export const executeAgentTool = async <T extends AiToolDefinition<any, any>>(
  definition: T,
  agent: MultiAgent,
  params: GetInput<T>,
): Promise<{ response: GetOutput<T>; usage: ApiUsage }> => {
  if (!definition.agent) {
    throw new Error(`Tool ${definition.name} does not specify an agent`)
  }

  const [exitReason, taskInfo] = await agent.startTask({
    agentName: definition.agent,
    task: definition.formatInput(params),
    maxIterations: 10,
  })

  if (typeof exitReason === 'string' || exitReason.type !== 'Exit') {
    throw new Error(`Tool execution failed: ${JSON.stringify(exitReason)}`)
  }

  return {
    response: definition.parseOutput(exitReason.message),
    usage: taskInfo,
  }
}

export const makeTool = <T extends AiToolDefinition<any, any>>(definition: T) => {
  return async (ai: AiServiceBase, params: GetInput<T>): Promise<{ response: GetOutput<T>; usage: ApiUsage }> => {
    return executeTool(definition, ai, params)
  }
}

export const makeAgentTool = <T extends AiToolDefinition<any, any>>(definition: T) => {
  return async (agent: MultiAgent, params: GetInput<T>): Promise<{ response: GetOutput<T>; usage: ApiUsage }> => {
    return executeAgentTool(definition, agent, params)
  }
}

export const generateGitCommitMessage = makeTool(generateGitCommitMessageDef)
export const generateGithubPullRequestDetails = makeTool(generateGithubPullRequestDetailsDef)
export const generateProjectConfig = makeAgentTool({
  ...generateProjectConfigDef,
  agent: 'Analyzer',
})

export type { AiToolDefinition, GetInput, GetOutput }
