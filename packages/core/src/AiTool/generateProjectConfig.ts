/**
 * AI tool for analyzing project files and generating polkacodes config sections.
 * Generated by polka.codes
 */

import type { AiToolDefinition } from './types'

const prompt = `Analyze the provided project files and generate a polkacodes configuration that captures:

1. Build tools and package manager (e.g., bun, npm)
2. Testing framework and patterns
3. Code style tools and rules
4. Project structure and conventions
5. Common development workflows

Generate a YAML configuration with:
1. scripts section based on package.json scripts and CI workflows
2. rules section based on project conventions, tools, and patterns

The configuration should be enclosed in <tool_output> tags and follow this format:

\`\`\`yaml
scripts:
  test:
    command: "bun test"
    description: "Run tests with bun:test"
  lint:
    command: "biome check ."
    description: "Check code style with Biome"

rules:
  - "Use \`bun\` as package manager"
  - "Write tests using bun:test with snapshots"
  - "Follow Biome code style"
\`\`\`

Focus on accurately reflecting:
- Package manager and dependency management
- Testing frameworks and patterns
- Code style and linting rules
- File organization and naming conventions
- Build and development workflows
`

export default {
  name: 'generateProjectConfig',
  description: 'Analyzes project files to generate polkacodes config sections',
  prompt,
  formatInput: (params: { files: Record<string, string> }) => {
    const fileContent = Object.entries(params.files)
      .map(([path, content]) => `=== ${path} ===\n${content}`)
      .join('\n\n')
    return `Here are the project files to analyze:\n\n${fileContent}`
  },
  parseOutput: (output: string) => {
    const regex = /<tool_output>([\s\S]*)<\/tool_output>/gm
    const match = regex.exec(output)
    if (!match) {
      throw new Error(`Could not parse output:\n${output}`)
    }
    return match[1].trim()
  },
} as const satisfies AiToolDefinition<{ files: Record<string, string> }>
