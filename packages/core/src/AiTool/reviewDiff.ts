// generated by polka.codes
import { AnalyzerAgent } from '../Agent'
import gitDiff from './tools/gitDiff'
import type { AiToolDefinitionWithAgent } from './types'

const prompt = `
# Code Review Prompt

You are a senior software engineer reviewing code changes.

## Critical Instructions
**ONLY review the actual changes shown in the diff.** Do not comment on existing code that wasn't modified.

## Viewing Changes
- **Use git_diff** to inspect the actual code changes for each relevant file.
  - **Pull request**: use the provided commit range for the git_diff tool with contextLines: 5 and includeLineNumbers: true
  - **Local changes**: diff staged or unstaged files using the git_diff tool with contextLines: 5 and includeLineNumbers: true
- The diff will include line number annotations: [Line N] for additions and [Line N removed] for deletions
- If a pull request is present you may receive:
  - <pr_title>
  - <pr_description>
  - <commit_messages>
- A <review_instructions> tag tells you the focus of the review.
- File status information is provided in <file_status> - use this to understand which files were modified, added, deleted, or renamed.

## Line Number Reporting
- **IMPORTANT**: Use the line numbers from the annotations in the diff output
- For additions: Look for [Line N] annotations after the + lines
- For deletions: Look for [Line N removed] annotations after the - lines
- For modifications: Report the line number of the new/current code (from [Line N] annotations)
- Report single lines as "N" and ranges as "N-M"

## Review Guidelines
Focus exclusively on the changed lines (+ additions, - deletions, modified lines):
- **Specific issues**: Point to exact problems in the changed code with accurate line references from the annotations
- **Actionable fixes**: Provide concrete solutions, not vague suggestions
- **Clear reasoning**: Explain why each issue matters and how to fix it
- **Avoid generic advice**: No generic suggestions like "add more tests", "improve documentation", or "follow best practices" unless directly related to a specific problem in the diff

## What NOT to review
- Existing unchanged code
- Overall project structure or architecture (unless directly impacted by changes)
- Generic best practices unrelated to the specific changes
- Missing features or functionality not part of this diff

## Output Format
Do **not** include praise or positive feedback. Ignore generated files such as lock files.
Only include reviews for actual issues found in the changed code.

Return your review as a JSON object inside a \`\`\`json block, wrapped like:
<tool_attempt_completion>
<tool_parameter_result>
\`\`\`json
{
  "overview": "Summary of specific issues found in the diff changes, or 'No issues found' if the changes look good.",
  "specificReviews": [
    {
      "file": "path/filename.ext",
      "lines": "N or N-M",
      "review": "Specific issue with the changed code and exact actionable fix."
    }
  ]
}
\`\`\`
</tool_parameter_result>
</tool_attempt_completion>
`

type Input = {
  pullRequestTitle?: string
  pullRequestDescription?: string
  commitMessages?: string
  commitRange?: string
  staged?: boolean
  changedFiles?: Array<{
    path: string
    status: string
  }>
}

type SpecificReview = {
  file: string
  lines: string
  review: string
}

type Output = {
  overview: string
  specificReviews: SpecificReview[]
}

export default {
  name: 'reviewDiff',
  description: 'Reviews a git diff',
  prompt,
  formatInput: (params: Input) => {
    const parts = []
    if (params.pullRequestTitle) {
      parts.push(`<pr_title>\n${params.pullRequestTitle}\n</pr_title>`)
    }
    if (params.pullRequestDescription) {
      parts.push(`<pr_description>\n${params.pullRequestDescription}\n</pr_description>`)
    }
    if (params.commitMessages) {
      parts.push(`<commit_messages>\n${params.commitMessages}\n</commit_messages>`)
    }

    if (params.changedFiles && params.changedFiles.length > 0) {
      const fileList = params.changedFiles.map((file) => `${file.status}: ${file.path}`).join('\n')
      parts.push(`<file_status>\n${fileList}\n</file_status>`)
    }

    let instructions = ''
    if (params.commitRange) {
      instructions = `Review the pull request. Use the git_diff tool with commit range '${params.commitRange}', contextLines: 5, and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.`
    } else if (params.staged) {
      instructions =
        'Review the staged changes. Use the git_diff tool with staged: true, contextLines: 5, and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.'
    } else {
      instructions =
        'Review the unstaged changes. Use the git_diff tool with contextLines: 5 and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.'
    }
    parts.push(`<review_instructions>\n${instructions}\n</review_instructions>`)

    return parts.join('\n')
  },
  parseOutput: (output: string): Output => {
    const jsonBlockRegex = /```json\n([\s\S]*?)\n```/
    const match = output.match(jsonBlockRegex)
    const content = match ? match[1] : output

    try {
      return JSON.parse(content)
    } catch (error) {
      console.error('Error parsing JSON output:', error)
      return {
        overview: `Could not parse review output. Raw output:\n${output}`,
        specificReviews: [],
      }
    }
  },
  agent: (options) => {
    return new AnalyzerAgent({
      ...options,
      additionalTools: [gitDiff],
    })
  },
} as const satisfies AiToolDefinitionWithAgent<Input, Output>
