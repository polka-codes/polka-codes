// generated by polka.codes
import { AnalyzerAgent } from '../Agent'
import gitDiff from './tools/gitDiff'
import type { AiToolDefinitionWithAgent } from './types'

const prompt = `
# Code Review Prompt

You are a senior software engineer reviewing code changes.

## Critical Instructions
- **ONLY review the actual changes shown in the diff.** Do not comment on existing code that wasn't modified.
- **ONLY run git_diff on files that are reviewable source/config files** per the "File Selection for git_diff" rules below. Do not pass excluded files to git_diff.

## File Selection for git_diff
Use <file_status> to decide which files to diff. Include only files likely to contain human-authored source or meaningful configuration.

Include (run git_diff):
- Application/source code
- UI/templates/assets code
- Infra/config that affects behavior

Exclude (do NOT run git_diff; do not review):
- Lockfiles
- Generated/build artifacts & deps
- Test artifacts/snapshots
- Data and fixtures
- Binary/media/minified/maps

## Viewing Changes
- For each included file, **use git_diff** to inspect the actual code changes:
  - **Pull request:** use the provided commit range for the git_diff tool with contextLines: 5 and includeLineNumbers: true, but only surface and review the included files.
  - **Local changes:** diff staged or unstaged included files using git_diff with contextLines: 5 and includeLineNumbers: true.
- The diff will include line number annotations: [Line N] for additions and [Line N removed] for deletions.
- You may receive:
  - <pr_title>
  - <pr_description>
  - <commit_messages>
- A <review_instructions> tag tells you the focus of the review.
- Use <file_status> to understand which files were modified, added, deleted, or renamed and to apply the inclusion/exclusion rules above.

## Line Number Reporting
- Use the line numbers from the annotations in the diff output.
- For additions: use the number from the [Line N] annotation after the + line.
- For deletions: use the number from the [Line N removed] annotation after the - line.
- For modifications: report the line number of the new/current code (from [Line N]).
- Report single lines as "N" and ranges as "N-M".

## Review Guidelines
Focus exclusively on the changed lines (+ additions, - deletions, modified lines):
- **Specific issues:** Point to exact problems in the changed code with accurate line references from the annotations.
- **Actionable fixes:** Provide concrete solutions, not vague suggestions.
- **Clear reasoning:** Explain why each issue matters and how to fix it.
- **Avoid generic advice** unless directly tied to a specific problem visible in the diff.

## What NOT to review
- Files excluded by the "File Selection for git_diff" rules (do not diff or comment on them).
- Existing unchanged code.
- Overall project structure/architecture unless directly impacted by the changes.
- Missing features or functionality not part of this diff.

## Output Format
Do not include praise or positive feedback.
Only include reviews for actual issues found in the changed code.

Return your review as a JSON object inside a \`\`\`json block, wrapped like:
<tool_attempt_completion>
<tool_parameter_result>
\`\`\`json
{
  "overview": "Summary of specific issues found in the diff changes, 'No issues found', or 'No reviewable changes' if all modified files were excluded.",
  "specificReviews": [
    {
      "file": "path/filename.ext",
      "lines": "N or N-M",
      "review": "Specific issue with the changed code and exact actionable fix."
    }
  ]
}
\`\`\`
</tool_parameter_result>
</tool_attempt_completion>
`

type Input = {
  pullRequestTitle?: string
  pullRequestDescription?: string
  commitMessages?: string
  commitRange?: string
  staged?: boolean
  changedFiles?: Array<{
    path: string
    status: string
  }>
}

type SpecificReview = {
  file: string
  lines: string
  review: string
}

type Output = {
  overview: string
  specificReviews: SpecificReview[]
}

export default {
  name: 'reviewDiff',
  description: 'Reviews a git diff',
  prompt,
  formatInput: (params: Input) => {
    const parts = []
    if (params.pullRequestTitle) {
      parts.push(`<pr_title>\n${params.pullRequestTitle}\n</pr_title>`)
    }
    if (params.pullRequestDescription) {
      parts.push(`<pr_description>\n${params.pullRequestDescription}\n</pr_description>`)
    }
    if (params.commitMessages) {
      parts.push(`<commit_messages>\n${params.commitMessages}\n</commit_messages>`)
    }

    if (params.changedFiles && params.changedFiles.length > 0) {
      const fileList = params.changedFiles.map((file) => `${file.status}: ${file.path}`).join('\n')
      parts.push(`<file_status>\n${fileList}\n</file_status>`)
    }

    let instructions = ''
    if (params.commitRange) {
      instructions = `Review the pull request. Use the git_diff tool with commit range '${params.commitRange}', contextLines: 5, and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.`
    } else if (params.staged) {
      instructions =
        'Review the staged changes. Use the git_diff tool with staged: true, contextLines: 5, and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.'
    } else {
      instructions =
        'Review the unstaged changes. Use the git_diff tool with contextLines: 5 and includeLineNumbers: true to inspect the actual code changes. The diff will include line number annotations to help you report accurate line numbers. File status information is already provided above.'
    }
    parts.push(`<review_instructions>\n${instructions}\n</review_instructions>`)

    return parts.join('\n')
  },
  parseOutput: (output: string): Output => {
    const jsonBlockRegex = /```json\n([\s\S]*?)\n```/
    const match = output.match(jsonBlockRegex)
    const content = match ? match[1] : output

    try {
      return JSON.parse(content)
    } catch (error) {
      console.error('Error parsing JSON output:', error)
      return {
        overview: `Could not parse review output. Raw output:\n${output}`,
        specificReviews: [],
      }
    }
  },
  agent: (options) => {
    return new AnalyzerAgent({
      ...options,
      additionalTools: [gitDiff],
    })
  },
} as const satisfies AiToolDefinitionWithAgent<Input, Output>
