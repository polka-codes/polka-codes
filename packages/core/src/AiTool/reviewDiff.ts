// generated by polka.codes
import { AnalyzerAgent } from '../Agent'
import gitDiff from './tools/gitDiff'
import type { AiToolDefinitionWithAgent } from './types'

const prompt = `
# Review Code Changes

You are a senior software engineer responsible for reviewing code changes.

To see the changes, you must use the git_diff tool.
- For pull request reviews, a commit range is provided. Use it with git_diff.
- For local changes, you can view staged or unstaged changes with git_diff.

If pull request information is available, it will be provided in the following tags:
- <pr_title>: The title of the pull request.
- <pr_description>: The description of the pull request.
- <commit_messages>: A list of commit messages associated with the pull request.

A <review_instructions> tag will tell you what to review.

Your task is to provide a constructive code review of all changed files. Do not review lock files or other generated files. The review should be in Markdown format.

Focus on:
- **Code Quality**: Readability, maintainability, and best practices.
- **Bugs**: Potential bugs or edge cases that might have been missed.
- **Performance**: Any performance implications of the changes.
- **Clarity**: Whether the code is clear and easy to understand.
- **Suggestions**: Offer specific suggestions for improvement.

Structure your review with the following sections:

---
**Overall Impression**:
- A brief summary of your thoughts on the pull request.

**Suggestions for Improvement**:
- A bulleted list of specific suggestions. For each suggestion, include a brief explanation of why you are suggesting the change.

**Bugs or Potential Issues**:
- A bulleted list of any bugs or potential issues you have identified.

**Praise**:
- A bulleted list of things you liked about the pull request.

---

Output your review in a <review> tag.
`

type Input = {
  pullRequestTitle?: string
  pullRequestDescription?: string
  commitMessages?: string
  commitRange?: string
  staged?: boolean
}

type Output = {
  review: string
}

export default {
  name: 'reviewDiff',
  description: 'Reviews a git diff',
  prompt,
  formatInput: (params: Input) => {
    const parts = []
    if (params.pullRequestTitle) {
      parts.push(`<pr_title>\n${params.pullRequestTitle}\n</pr_title>`)
    }
    if (params.pullRequestDescription) {
      parts.push(`<pr_description>\n${params.pullRequestDescription}\n</pr_description>`)
    }
    if (params.commitMessages) {
      parts.push(`<commit_messages>\n${params.commitMessages}\n</commit_messages>`)
    }

    let instructions = ''
    if (params.commitRange) {
      instructions = `Review the pull request. Get the diff using the git_diff tool with the commit range '${params.commitRange}'.`
    } else if (params.staged) {
      instructions = 'Review the staged changes. Get the diff using the git_diff tool with staged: true.'
    } else {
      instructions = 'Review the unstaged changes. Get the diff using the git_diff tool.'
    }
    parts.push(`<review_instructions>\n${instructions}\n</review_instructions>`)

    return parts.join('\n')
  },
  parseOutput: (output: string): Output => {
    const regex = /<review>([\s\S]*)<\/review>/gm
    const match = regex.exec(output)
    if (match) {
      return {
        review: match[1].trim(),
      }
    }

    return {
      review: output.trim(),
    }
  },
  agent: (options) => {
    return new AnalyzerAgent({
      ...options,
      additionalTools: [gitDiff],
    })
  },
} as const satisfies AiToolDefinitionWithAgent<Input, Output>
