// generated by polka.codes
import { AnalyzerAgent } from '../Agent'
import gitDiff from './tools/gitDiff'
import type { AiToolDefinitionWithAgent } from './types'

const prompt = `
# Code Review Prompt

You are a senior software engineer reviewing code changes.

## Viewing Changes
- Use **git_diff** to inspect code.
  - **Pull request**: use the provided commit range.
  - **Local changes**: diff staged or unstaged files.
- If a pull request is present you may receive:
  - <pr_title>
  - <pr_description>
  - <commit_messages>
- A <review_instructions> tag tells you the focus of the review.

## Focus Areas
- Readability and maintainability
- Correctness, edge cases, potential bugs
- Performance implications
- Clarity of intent
- Best-practice adherence

## Output Format
Do **not** include praise or positive feedback. Ignore generated files such as lock files.

Return your review as a JSON object inside a \`\`\`json block, wrapped like:
<tool_attempt_completion>
<tool_parameter_result>
\`\`\`json
{
  "overview": "Summary of overall concerns.",
  "specificReviews": [
    {
      "file": "path/filename.ext",
      "lines": "N or N-M",
      "review": "Describe the issue and actionable fix or improvement."
    }
  ]
}
\`\`\`
</tool_parameter_result>
</tool_attempt_completion>
`

type Input = {
  pullRequestTitle?: string
  pullRequestDescription?: string
  commitMessages?: string
  commitRange?: string
  staged?: boolean
}

type SpecificReview = {
  file: string
  lines: string
  review: string
}

type Output = {
  overview: string
  specificReviews: SpecificReview[]
}

export default {
  name: 'reviewDiff',
  description: 'Reviews a git diff',
  prompt,
  formatInput: (params: Input) => {
    const parts = []
    if (params.pullRequestTitle) {
      parts.push(`<pr_title>\n${params.pullRequestTitle}\n</pr_title>`)
    }
    if (params.pullRequestDescription) {
      parts.push(`<pr_description>\n${params.pullRequestDescription}\n</pr_description>`)
    }
    if (params.commitMessages) {
      parts.push(`<commit_messages>\n${params.commitMessages}\n</commit_messages>`)
    }

    let instructions = ''
    if (params.commitRange) {
      instructions = `Review the pull request. Get the diff using the git_diff tool with the commit range '${params.commitRange}'.`
    } else if (params.staged) {
      instructions = 'Review the staged changes. Get the diff using the git_diff tool with staged: true.'
    } else {
      instructions = 'Review the unstaged changes. Get the diff using the git_diff tool.'
    }
    parts.push(`<review_instructions>\n${instructions}\n</review_instructions>`)

    return parts.join('\n')
  },
  parseOutput: (output: string): Output => {
    const jsonBlockRegex = /```json\n([\s\S]*?)\n```/
    const match = output.match(jsonBlockRegex)
    const content = match ? match[1] : output

    try {
      return JSON.parse(content)
    } catch (error) {
      console.error('Error parsing JSON output:', error)
      return {
        overview: `Could not parse review output. Raw output:\n${output}`,
        specificReviews: [],
      }
    }
  },
  agent: (options) => {
    return new AnalyzerAgent({
      ...options,
      additionalTools: [gitDiff],
    })
  },
} as const satisfies AiToolDefinitionWithAgent<Input, Output>
