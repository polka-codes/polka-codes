// generated by polka.codes
import { describe, expect, it } from 'bun:test'
import reviewDiff from './reviewDiff'

describe('reviewDiff', () => {
  it('should format input correctly for pull request review', () => {
    const input = {
      pullRequestTitle: 'Fix bug in authentication',
      pullRequestDescription: 'This PR fixes a critical bug',
      commitMessages: 'Fix auth bug\n---\nAdd tests',
      commitRange: 'main...feature-branch',
      changedFiles: [
        { path: 'src/auth.ts', status: 'Modified' },
        { path: 'src/auth.test.ts', status: 'Added' },
      ],
    }

    const formatted = reviewDiff.formatInput(input)

    expect(formatted).toContain('<pr_title>\nFix bug in authentication\n</pr_title>')
    expect(formatted).toContain('<pr_description>\nThis PR fixes a critical bug\n</pr_description>')
    expect(formatted).toContain('<commit_messages>\nFix auth bug\n---\nAdd tests\n</commit_messages>')
    expect(formatted).toContain('Modified: src/auth.ts')
    expect(formatted).toContain('Added: src/auth.test.ts')
    expect(formatted).toContain("commit range 'main...feature-branch', contextLines: 5, and includeLineNumbers: true")
  })

  it('should format input correctly for staged changes review', () => {
    const input = {
      staged: true,
      changedFiles: [{ path: 'src/index.ts', status: 'Modified (staged)' }],
    }

    const formatted = reviewDiff.formatInput(input)

    expect(formatted).toContain('Modified (staged): src/index.ts')
    expect(formatted).toContain('staged: true, contextLines: 5, and includeLineNumbers: true')
  })

  it('should format input correctly for unstaged changes review', () => {
    const input = {
      staged: false,
      changedFiles: [{ path: 'src/utils.ts', status: 'Modified (unstaged)' }],
    }

    const formatted = reviewDiff.formatInput(input)

    expect(formatted).toContain('Modified (unstaged): src/utils.ts')
    expect(formatted).toContain('contextLines: 5 and includeLineNumbers: true')
    expect(formatted).not.toContain('staged:')
  })

  it('should parse valid JSON output correctly', () => {
    const output = `<tool_attempt_completion>
<tool_parameter_result>
\`\`\`json
{
  "overview": "Found potential security issue",
  "specificReviews": [
    {
      "file": "src/auth.ts",
      "lines": "42-45",
      "review": "Password is stored in plain text"
    }
  ]
}
\`\`\`
</tool_parameter_result>
</tool_attempt_completion>`

    const parsed = reviewDiff.parseOutput(output)

    expect(parsed).toEqual({
      overview: 'Found potential security issue',
      specificReviews: [
        {
          file: 'src/auth.ts',
          lines: '42-45',
          review: 'Password is stored in plain text',
        },
      ],
    })
  })

  it('should handle invalid JSON output gracefully', () => {
    const output = 'This is not valid JSON'

    const parsed = reviewDiff.parseOutput(output)

    expect(parsed.overview).toContain('Could not parse review output')
    expect(parsed.specificReviews).toEqual([])
  })

  it('should extract JSON from mixed content', () => {
    const output = `Some text before
\`\`\`json
{
  "overview": "No issues found",
  "specificReviews": []
}
\`\`\`
Some text after`

    const parsed = reviewDiff.parseOutput(output)

    expect(parsed).toEqual({
      overview: 'No issues found',
      specificReviews: [],
    })
  })
})
