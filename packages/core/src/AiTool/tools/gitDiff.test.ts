// generated by polka.codes
import { describe, expect, it, spyOn } from 'bun:test'
import type { CommandProvider } from '../../tools'
import gitDiff from './gitDiff'

describe('gitDiff', () => {
  const mockProvider: CommandProvider = {
    executeCommand: async (command: string) => {
      if (command.includes('-U5')) {
        return {
          exitCode: 0,
          stdout: `@@ -10,3 +10,3 @@
 context line
-old line
+new line`,
          stderr: '',
        }
      }
      if (command.includes('-U5')) {
        return {
          exitCode: 0,
          stdout: `@@ -10,50 +10,50 @@
 many context lines here
-old line
+new line
 many more context lines`,
          stderr: '',
        }
      }
      return { exitCode: 0, stdout: 'default diff output', stderr: '' }
    },
  }

  it('should use default context lines of 5', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, {})

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U5', false)
  })

  it('should use custom context lines when specified', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, { contextLines: '5' })

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U5', false)
  })

  it('should include line numbers when requested', async () => {
    const result = await gitDiff.handler(mockProvider, {
      contextLines: '5',
      includeLineNumbers: 'true',
    })

    expect(result).toMatchSnapshot()
  })

  it('should not include line numbers by default', async () => {
    const result = await gitDiff.handler(mockProvider, { contextLines: '5' })

    expect(result).toMatchSnapshot()
  })

  it('should handle staged changes', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, { staged: 'true' })

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U5 --staged', false)
  })

  it('should handle commit ranges', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, { commitRange: 'main...HEAD' })

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U5 main...HEAD', false)
  })

  it('should handle specific files', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, { file: 'src/test.ts' })

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U5 -- src/test.ts', false)
  })

  it('should combine all options correctly', async () => {
    const spy = spyOn(mockProvider, 'executeCommand')
    await gitDiff.handler(mockProvider, {
      staged: 'true',
      file: 'src/test.ts',
      contextLines: '10',
      includeLineNumbers: 'true',
    })

    expect(spy).toHaveBeenCalledWith('git diff --no-color -U10 --staged -- src/test.ts', false)
  })

  it('should handle no diff found', async () => {
    const emptyProvider: CommandProvider = {
      executeCommand: async () => ({ exitCode: 0, stdout: '', stderr: '' }),
    }

    const result = await gitDiff.handler(emptyProvider, {})
    expect(result).toMatchSnapshot()
  })

  it('should handle command errors', async () => {
    const errorProvider: CommandProvider = {
      executeCommand: async () => ({ exitCode: 1, stdout: '', stderr: 'error message' }),
    }

    const result = await gitDiff.handler(errorProvider, {})
    expect(result).toMatchSnapshot()
  })

  it('should handle missing executeCommand', async () => {
    const result = await gitDiff.handler({} as CommandProvider, {})
    expect(result).toMatchSnapshot()
  })
})
