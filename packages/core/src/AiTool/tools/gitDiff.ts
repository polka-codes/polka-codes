// generated by polka.codes
import { z } from 'zod'
import { type FullToolInfoV2, PermissionLevel, type ToolHandler, type ToolInfoV2, ToolResponseType } from '../../tool'
import type { CommandProvider } from '../../tools'
import { annotateDiffWithLineNumbers } from './utils/diffLineNumbers'

export const toolInfo = {
  name: 'git_diff',
  description:
    'Get the git diff for the current repository. Can be used to get staged changes, unstaged changes, or changes between commits. By default, it returns unstaged changes.',
  parameters: z.object({
    staged: z
      .preprocess((val) => {
        if (typeof val === 'string') {
          const lower = val.toLowerCase()
          if (lower === 'false') return false
          if (lower === 'true') return true
        }
        return val
      }, z.boolean().optional().default(false))
      .describe('Get staged changes instead of unstaged changes.'),
    commitRange: z.string().optional().describe('The commit range to get the diff for (e.g., "main...HEAD").'),
    file: z.string().optional().describe('Get the diff for a specific file.'),
    contextLines: z.coerce.number().optional().default(5).describe('Number of context lines to include around changes.'),
    includeLineNumbers: z
      .preprocess((val) => {
        if (typeof val === 'string') {
          const lower = val.toLowerCase()
          if (lower === 'false') return false
          if (lower === 'true') return true
        }
        return val
      }, z.boolean().optional().default(false))
      .describe('Annotate the diff with line numbers for additions and deletions.'),
  }),
  permissionLevel: PermissionLevel.Read,
} as const satisfies ToolInfoV2

export const handler: ToolHandler<typeof toolInfo, CommandProvider> = async (provider, args) => {
  if (!provider.executeCommand) {
    return {
      type: ToolResponseType.Error,
      message: {
        type: 'error-text',
        value: 'Not possible to execute command. Abort.',
      },
    }
  }

  const { staged, file, commitRange, contextLines, includeLineNumbers } = toolInfo.parameters.parse(args)

  const commandParts = ['git', 'diff', '--no-color', `-U${contextLines}`]
  if (staged) {
    commandParts.push('--staged')
  }
  if (commitRange) {
    commandParts.push(commitRange)
  }
  if (file) {
    commandParts.push('--', `'${file}'`)
  }

  const command = commandParts.join(' ')
  try {
    const result = await provider.executeCommand(command, false)
    if (result.exitCode === 0) {
      if (!result.stdout.trim()) {
        return {
          type: ToolResponseType.Reply,
          message: {
            type: 'text',
            value: 'No diff found.',
          },
        }
      }

      let diffOutput = result.stdout
      if (includeLineNumbers) {
        diffOutput = annotateDiffWithLineNumbers(diffOutput)
      }

      return {
        type: ToolResponseType.Reply,
        message: {
          type: 'text',
          value: `<diff file="${file ?? 'all'}">\n${diffOutput}\n</diff>`,
        },
      }
    }
    return {
      type: ToolResponseType.Error,
      message: {
        type: 'error-text',
        value: `\`${command}\` exited with code ${result.exitCode}:\n${result.stderr}`,
      },
    }
  } catch (error) {
    return {
      type: ToolResponseType.Error,
      message: {
        type: 'error-text',
        value: error instanceof Error ? error.message : String(error),
      },
    }
  }
}

export const isAvailable = (provider: CommandProvider): boolean => {
  return !!provider.executeCommand
}

export default {
  ...toolInfo,
  handler,
  isAvailable,
} satisfies FullToolInfoV2
