// generated by polka.codes
import { describe, expect, it } from 'bun:test'
import { annotateDiffWithLineNumbers, extractModifiedLineRanges, parseHunkHeader } from './diffLineNumbers'

describe('diffLineNumbers', () => {
  describe('parseHunkHeader', () => {
    it('should parse standard hunk header', () => {
      const header = '@@ -10,5 +12,7 @@ function example() {'
      const result = parseHunkHeader(header)
      expect(result).toEqual({
        oldStart: 10,
        oldCount: 5,
        newStart: 12,
        newCount: 7,
        header,
      })
    })

    it('should parse hunk header without counts', () => {
      const header = '@@ -1 +1 @@'
      const result = parseHunkHeader(header)
      expect(result).toEqual({
        oldStart: 1,
        oldCount: 1,
        newStart: 1,
        newCount: 1,
        header,
      })
    })

    it('should return null for invalid header', () => {
      const result = parseHunkHeader('not a hunk header')
      expect(result).toBeNull()
    })
  })

  describe('annotateDiffWithLineNumbers', () => {
    it('should annotate additions and deletions with line numbers', () => {
      const diff = `diff --git a/test.js b/test.js
index abc123..def456 100644
--- a/test.js
+++ b/test.js
@@ -10,5 +10,6 @@ function example() {
   console.log('context line 1');
-  console.log('removed line');
+  console.log('added line 1');
+  console.log('added line 2');
   console.log('context line 2');`

      const annotated = annotateDiffWithLineNumbers(diff)
      expect(annotated).toContain('[Line 11 removed]')
      expect(annotated).toContain('[Line 11]')
      expect(annotated).toContain('[Line 12]')
    })

    it('should handle multiple hunks', () => {
      const diff = `@@ -1,3 +1,3 @@
 context
-old
+new
@@ -10,2 +10,3 @@
 more context
+addition`

      const annotated = annotateDiffWithLineNumbers(diff)
      expect(annotated).toMatchSnapshot()
    })
  })

  describe('extractModifiedLineRanges', () => {
    it('should extract line ranges for additions', () => {
      const diff = `@@ -10,3 +10,5 @@
 context
+added line 1
+added line 2
 more context`

      const ranges = extractModifiedLineRanges(diff)
      expect(ranges).toEqual([
        {
          start: 11,
          end: 12,
          type: 'added',
        },
      ])
    })

    it('should extract line ranges for deletions', () => {
      const diff = `@@ -10,5 +10,3 @@
 context
-removed line 1
-removed line 2
 more context`

      const ranges = extractModifiedLineRanges(diff)
      expect(ranges).toEqual([
        {
          start: 11,
          end: 12,
          type: 'removed',
        },
      ])
    })

    it('should extract line ranges for modifications', () => {
      const diff = `@@ -10,3 +10,3 @@
 context
-old line
+new line
 more context`

      const ranges = extractModifiedLineRanges(diff)
      expect(ranges).toEqual([
        {
          start: 11,
          end: 11,
          type: 'modified',
        },
      ])
    })

    it('should handle multiple changes in one hunk', () => {
      const diff = `@@ -10,7 +10,8 @@
 context
+addition 1
 unchanged
-deletion
+replacement
 unchanged
+addition 2`

      const ranges = extractModifiedLineRanges(diff)
      expect(ranges).toMatchSnapshot()
    })
  })
})
