/**
 * Tool for temporarily delegating a task to another agent.
 * Generated by polka.codes
 */

import { type FullToolInfo, PermissionLevel, type ToolHandler, type ToolInfo, ToolResponseType } from '../tool'
import { getString, getStringArray } from './utils'

export const toolInfo = {
  name: 'delegate',
  description: 'Temporarily delegate a task to another agent and receive the result back',
  parameters: [
    {
      name: 'agent_name',
      description: 'The name of the agent to delegate the task to',
      required: true,
      usageValue: 'Name of the target agent',
    },
    {
      name: 'task',
      description: 'The task to be completed by the target agent',
      required: true,
      usageValue: 'Task description',
    },
    {
      name: 'context',
      description: 'The context information for the task',
      required: true,
      usageValue: 'Context information',
    },
    {
      name: 'files',
      description: 'The files relevant to the task. Comma separated paths',
      required: false,
      usageValue: 'Relevant files',
    },
  ],
  examples: [
    {
      description: 'Delegate a code analysis task to the analyzer agent',
      parameters: [
        {
          name: 'agent_name',
          value: 'analyzer',
        },
        {
          name: 'task',
          value: 'Analyze the authentication implementation',
        },
        {
          name: 'context',
          value: 'Need to understand the security implications of the current auth system',
        },
        {
          name: 'files',
          value: 'src/auth/login.ts,src/auth/types.ts',
        },
      ],
    },
  ],
  permissionLevel: PermissionLevel.None,
} as const satisfies ToolInfo

export const handler: ToolHandler<typeof toolInfo, any> = async (_provider, args) => {
  const agentName = getString(args, 'agent_name')
  const task = getString(args, 'task')
  const context = getString(args, 'context', undefined)
  const files = getStringArray(args, 'files', [])

  return {
    type: ToolResponseType.Delegate,
    agentName,
    task,
    context,
    files,
  }
}

export const isAvailable = (_provider: any): boolean => {
  return true
}

export default {
  ...toolInfo,
  handler,
  isAvailable,
} satisfies FullToolInfo
