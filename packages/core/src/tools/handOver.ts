/**
 * Tool for handing over a task to another agent.
 * Generated by polka.codes
 */

import { z } from 'zod'
import { type FullToolInfoV2, PermissionLevel, type ToolHandler, type ToolInfoV2, ToolResponseType } from '../tool'

export const toolInfo = {
  name: 'hand_over',
  description: 'Hand over the current task to another agent to complete. This tool MUST NOT to be used with any other tool.',
  parameters: z
    .object({
      agentName: z.string().describe('The name of the agent to hand over the task to').meta({ usageValue: 'Name of the target agent' }),
      task: z.string().describe('The task to be completed by the target agent').meta({ usageValue: 'Task description' }),
      context: z.string().describe('The context information for the task').meta({ usageValue: 'Context information' }),
      files: z
        .preprocess((val) => {
          if (!val) return []
          const values = Array.isArray(val) ? val : [val]
          return values.flatMap((i) => (typeof i === 'string' ? i.split(',') : [])).filter((s) => s.length > 0)
        }, z.array(z.string()))
        .optional()
        .describe('The files relevant to the task. Comma separated paths')
        .meta({ usageValue: 'Relevant files' }),
    })
    .meta({
      examples: [
        {
          description: 'Hand over a coding task to the coder agent',
          parameters: [
            {
              name: 'agentName',
              value: 'coder',
            },
            {
              name: 'task',
              value: 'Implement the login feature',
            },
            {
              name: 'context',
              value: 'We need a secure login system with email and password',
            },
            {
              name: 'files',
              value: 'src/auth/login.ts,src/auth/types.ts',
            },
          ],
        },
      ],
    }),
  permissionLevel: PermissionLevel.None,
} as const satisfies ToolInfoV2

export const handler: ToolHandler<typeof toolInfo, any> = async (_provider, args) => {
  const parsed = toolInfo.parameters.safeParse(args)
  if (!parsed.success) {
    return {
      type: ToolResponseType.Invalid,
      message: `Invalid arguments for hand_over: ${parsed.error.message}`,
    }
  }
  const { agentName, task, context, files } = parsed.data

  return {
    type: ToolResponseType.HandOver,
    agentName,
    task,
    context,
    files: files ?? [],
  }
}

export const isAvailable = (_provider: any): boolean => {
  return true
}

export default {
  ...toolInfo,
  handler,
  isAvailable,
} satisfies FullToolInfoV2
