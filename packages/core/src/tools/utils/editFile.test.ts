// Tests for editFile utility function
// generated by polka.codes

import { describe, expect, it } from 'bun:test'

import { END_OF_FILE, type EditOperation, START_OF_FILE, editFile } from './editFile'

describe('editFile', () => {
  const sampleContent = `line1
line2
line3
line4
line5`

  describe('basic operations', () => {
    it('should replace text with new content', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line2',
          replace: 'replaced line2',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should replace multiline text', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line2\nline3',
          replace: 'replaced lines 2 and 3',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle multiple operations in sequence', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line1',
          replace: 'first line',
        },
        {
          search: 'line5',
          replace: 'last line',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should replace only first occurrence', async () => {
      const contentWithDuplicates = 'test test test'
      const operations: EditOperation[] = [
        {
          search: 'test',
          replace: 'replaced',
        },
      ]

      const result = await editFile(contentWithDuplicates, operations)
      expect(result).toBe('replaced test test')
    })
  })

  describe('special markers', () => {
    it('should insert at start of file with START_OF_FILE', async () => {
      const operations: EditOperation[] = [
        {
          search: START_OF_FILE,
          replace: 'new start\n',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should insert at end of file with END_OF_FILE', async () => {
      const operations: EditOperation[] = [
        {
          search: END_OF_FILE,
          replace: '\nnew end',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle empty file with START_OF_FILE', async () => {
      const operations: EditOperation[] = [
        {
          search: START_OF_FILE,
          replace: 'new content',
        },
      ]

      const result = await editFile('', operations)
      expect(result).toBe('new content')
    })

    it('should handle empty file with END_OF_FILE', async () => {
      const operations: EditOperation[] = [
        {
          search: END_OF_FILE,
          replace: 'new content',
        },
      ]

      const result = await editFile('', operations)
      expect(result).toBe('new content')
    })
  })

  describe('edge cases', () => {
    it('should handle empty file', async () => {
      const operations: EditOperation[] = [
        {
          search: START_OF_FILE,
          replace: 'new content',
        },
      ]

      const result = await editFile('', operations)
      expect(result).toBe('new content')
    })

    it('should handle empty replace text', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line2',
          replace: '',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle whitespace in search text', async () => {
      const contentWithSpaces = `  line1
    line2
  line3`

      const operations: EditOperation[] = [
        {
          search: '    line2',
          replace: '    replaced line2',
        },
      ]

      const result = await editFile(contentWithSpaces, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle newlines in search text', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line2\nline3',
          replace: 'replaced multiline',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle single line file', async () => {
      const operations: EditOperation[] = [
        {
          search: 'single',
          replace: 'modified',
        },
      ]

      const result = await editFile('single line', operations)
      expect(result).toBe('modified line')
    })
  })

  describe('error cases', () => {
    it('should throw error when no operations provided', async () => {
      expect(editFile(sampleContent, [])).rejects.toThrow('At least one edit operation is required')
    })

    it('should throw error when operations is null', async () => {
      expect(editFile(sampleContent, null as any)).rejects.toThrow('At least one edit operation is required')
    })

    it('should throw error when search text not found', async () => {
      const operations: EditOperation[] = [
        {
          search: 'nonexistent',
          replace: 'new text',
        },
      ]

      expect(editFile(sampleContent, operations)).rejects.toThrow('Could not find text: nonexistent')
    })

    it('should throw error for invalid special marker combinations', async () => {
      const operations: EditOperation[] = [
        {
          search: START_OF_FILE,
          replace: END_OF_FILE,
        },
      ]

      expect(editFile(sampleContent, operations)).rejects.toThrow('Cannot search for START_OF_FILE and replace with END_OF_FILE')
    })

    it('should throw error for reverse invalid special marker combinations', async () => {
      const operations: EditOperation[] = [
        {
          search: END_OF_FILE,
          replace: START_OF_FILE,
        },
      ]

      expect(editFile(sampleContent, operations)).rejects.toThrow('Cannot search for END_OF_FILE and replace with START_OF_FILE')
    })
  })

  describe('complex scenarios', () => {
    it('should handle multiple operations with different content', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line1',
          replace: 'first line',
        },
        {
          search: 'line3',
          replace: 'middle line',
        },
        {
          search: 'line5',
          replace: 'last line',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle operations that create new searchable text', async () => {
      const operations: EditOperation[] = [
        {
          search: 'line2',
          replace: 'line2\nnew marker',
        },
        {
          search: 'new marker',
          replace: 'modified marker',
        },
      ]

      const result = await editFile(sampleContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle code-like content with indentation', async () => {
      const codeContent = `function test() {
  const x = 1;
  const y = 2;
  return x + y;
}`

      const operations: EditOperation[] = [
        {
          search: '  const y = 2;',
          replace: '  const z = 3;\n  const y = 2;',
        },
      ]

      const result = await editFile(codeContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle JSON-like content', async () => {
      const jsonContent = `{
  "name": "test",
  "version": "1.0.0",
  "dependencies": {}
}`

      const operations: EditOperation[] = [
        {
          search: '  "dependencies": {}',
          replace: '  "scripts": {\n    "test": "bun test"\n  },\n  "dependencies": {}',
        },
      ]

      const result = await editFile(jsonContent, operations)
      expect(result).toMatchSnapshot()
    })

    it('should handle exact string matching', async () => {
      const content = 'function test() { return "test"; }'
      const operations: EditOperation[] = [
        {
          search: 'function test() { return "test"; }',
          replace: 'function test() { return "modified"; }',
        },
      ]

      const result = await editFile(content, operations)
      expect(result).toBe('function test() { return "modified"; }')
    })
  })
})
