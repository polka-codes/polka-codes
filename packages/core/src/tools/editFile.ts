// Tool for flexible file editing with before/after text anchors
// generated by polka.codes

import { type FullToolInfo, PermissionLevel, type ToolHandler, type ToolInfo, ToolResponseType } from '../tool'
import type { FilesystemProvider } from './provider'
import { getArray, getString } from './utils'
import { END_OF_FILE, type EditOperation, START_OF_FILE, editFile } from './utils/editFile'

export const toolInfo = {
  name: 'edit_file',
  description:
    'Request to edit file contents using before/after text anchors with flexible operations. Supports multiple edit operations in a single call.',
  parameters: [
    {
      name: 'path',
      description: 'The path of the file to edit',
      required: true,
      usageValue: 'File path here',
    },
    {
      name: 'operations',
      description: 'Edit operation with beforeText, afterText, newText, and optional line range hints',
      required: true,
      allowMultiple: true,
      children: [
        {
          name: 'beforeText',
          description: `Text to find as the start anchor (use ${START_OF_FILE} for file start)`,
          required: false,
          usageValue: 'Text before the edit location',
        },
        {
          name: 'afterText',
          description: `Text to find as the end anchor (use ${END_OF_FILE} for file end)`,
          required: false,
          usageValue: 'Text after the edit location',
        },
        {
          name: 'newText',
          description: 'Text to replace the content between beforeText and afterText',
          required: true,
          usageValue: 'New text content',
        },
        {
          name: 'beforeTextLineStart',
          description: 'Optional line number hint for beforeText location (1-based)',
          required: false,
          usageValue: '10',
        },
        {
          name: 'afterTextLineStart',
          description: 'Optional line number hint for afterText location (1-based)',
          required: false,
          usageValue: '20',
        },
      ],
      usageValue: 'operations here',
    },
  ],
  examples: [
    {
      description: 'Replace content between two text anchors',
      parameters: [
        {
          name: 'path',
          value: 'src/main.ts',
        },
        {
          name: 'operations',
          value: {
            beforeText: 'function oldFunction() {',
            afterText: '}',
            newText: '\n  return "new implementation";\n',
          },
        },
      ],
    },
    {
      description: 'Insert at start of file',
      parameters: [
        {
          name: 'path',
          value: 'src/header.ts',
        },
        {
          name: 'operations',
          value: {
            beforeText: START_OF_FILE,
            afterText: 'export',
            newText: '// File header comment\n',
          },
        },
      ],
    },
    {
      description: 'Multiple operations in one call',
      parameters: [
        {
          name: 'path',
          value: 'src/utils.ts',
        },
        {
          name: 'operations',
          value: [
            {
              beforeText: 'import React',
              afterText: 'from "react"',
              newText: ', { useState }',
            },
            {
              beforeText: 'function Component() {',
              afterText: 'return (',
              newText: '\n  const [state, setState] = useState(false);\n  ',
            },
          ],
        },
      ],
    },
  ],
  permissionLevel: PermissionLevel.Write,
} as const satisfies ToolInfo

export const handler: ToolHandler<typeof toolInfo, FilesystemProvider> = async (provider, args) => {
  if (!provider.readFile || !provider.writeFile) {
    return {
      type: ToolResponseType.Error,
      message: 'Not possible to edit file. Abort.',
    }
  }

  const path = getString(args, 'path')
  const operations = getArray(args, 'operations') as unknown as EditOperation[]

  if (!operations || operations.length === 0) {
    return {
      type: ToolResponseType.Error,
      message: `<error><edit_file_path>${path}</edit_file_path><error_message>At least one edit operation is required</error_message></error>`,
    }
  }

  const fileContent = await provider.readFile(path)

  if (fileContent == null) {
    return {
      type: ToolResponseType.Error,
      message: `<error><edit_file_path>${path}</edit_file_path><error_message>File not found</error_message></error>`,
    }
  }

  try {
    const result = await editFile(fileContent, operations)
    await provider.writeFile(path, result)

    return {
      type: ToolResponseType.Reply,
      message: `<edit_file_path>${path}</edit_file_path>`,
    }
  } catch (error) {
    return {
      type: ToolResponseType.Error,
      message: `<error><edit_file_path>${path}</edit_file_path><error_message>${error instanceof Error ? error.message : String(error)}</error_message></error>`,
    }
  }
}

export const isAvailable = (provider: FilesystemProvider): boolean => {
  return !!provider.readFile && !!provider.writeFile
}

export default {
  ...toolInfo,
  handler,
  isAvailable,
} satisfies FullToolInfo
