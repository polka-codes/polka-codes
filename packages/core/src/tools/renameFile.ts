// Generated by polka.codes
// Tool for renaming files in the filesystem

import { z } from 'zod'
import { type FullToolInfo, type ToolHandler, type ToolInfo, ToolResponseType } from '../tool'
import type { FilesystemProvider } from './provider'

export const toolInfo = {
  name: 'renameFile',
  description: 'Request to rename a file from source path to target path.',
  parameters: z
    .object({
      source_path: z.string().describe('The current path of the file').meta({ usageValue: 'Source file path here' }),
      target_path: z.string().describe('The new path for the file').meta({ usageValue: 'Target file path here' }),
    })
    .meta({
      examples: [
        {
          description: 'Request to rename a file',
          input: {
            source_path: 'src/old-name.js',
            target_path: 'src/new-name.js',
          },
        },
      ],
    }),
} as const satisfies ToolInfo

export const handler: ToolHandler<typeof toolInfo, FilesystemProvider> = async (provider, args) => {
  if (!provider.renameFile) {
    return {
      type: ToolResponseType.Error,
      message: {
        type: 'error-text',
        value: 'Not possible to rename file.',
      },
    }
  }

  const { source_path, target_path } = toolInfo.parameters.parse(args)
  await provider.renameFile(source_path, target_path)

  return {
    type: ToolResponseType.Reply,
    message: {
      type: 'text',
      value: `<rename_file_path>${target_path}</rename_file_path><status>Success</status>`,
    },
  }
}

export const isAvailable = (provider: FilesystemProvider): boolean => {
  return !!provider.renameFile
}

export default {
  ...toolInfo,
  handler,
  isAvailable,
} satisfies FullToolInfo
