// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`editFile tool toolInfo should have correct tool definition 1`] = `
{
  "description": "Request to edit file contents using before/after text anchors with flexible operations. Supports multiple edit operations in a single call.",
  "examples": [
    {
      "description": "Replace content between two text anchors",
      "parameters": [
        {
          "name": "path",
          "value": "src/main.ts",
        },
        {
          "name": "operations",
          "value": {
            "end_anchor": "}",
            "new_text": 
"
  return "new implementation";
"
,
            "start_anchor": "function oldFunction() {",
          },
        },
      ],
    },
    {
      "description": "Insert at start of file",
      "parameters": [
        {
          "name": "path",
          "value": "src/header.ts",
        },
        {
          "name": "operations",
          "value": {
            "end_anchor": "export",
            "new_text": 
"// File header comment
"
,
            "start_anchor": "<<<START_OF_FILE>>>",
          },
        },
      ],
    },
    {
      "description": "Multiple operations in one call",
      "parameters": [
        {
          "name": "path",
          "value": "src/utils.ts",
        },
        {
          "name": "operations",
          "value": [
            {
              "end_anchor": "from "react"",
              "new_text": ", { useState }",
              "start_anchor": "import React",
            },
            {
              "end_anchor": "return (",
              "new_text": 
"
  const [state, setState] = useState(false);
  "
,
              "start_anchor": "function Component() {",
            },
          ],
        },
      ],
    },
  ],
  "name": "edit_file",
  "parameters": [
    {
      "description": "The path of the file to edit",
      "name": "path",
      "required": true,
      "usageValue": "File path here",
    },
    {
      "allowMultiple": true,
      "children": [
        {
          "description": "Text to find as the start anchor (use <<<START_OF_FILE>>> for file start)",
          "name": "start_anchor",
          "required": false,
          "usageValue": "Text before the edit location",
        },
        {
          "description": "Text to find as the end anchor (use <<<END_OF_FILE>>> for file end)",
          "name": "end_anchor",
          "required": false,
          "usageValue": "Text after the edit location",
        },
        {
          "description": "Text to replace the content between start_anchor and end_anchor",
          "name": "new_text",
          "required": true,
          "usageValue": "New text content",
        },
        {
          "description": "Optional line number hint for start_anchor location (1-based)",
          "name": "start_anchor_line_start",
          "required": false,
          "usageValue": "10",
        },
        {
          "description": "Optional line number hint for end_anchor location (1-based)",
          "name": "end_anchor_line_start",
          "required": false,
          "usageValue": "20",
        },
      ],
      "description": "Edit operation with start_anchor, end_anchor, new_text, and optional line range hints",
      "name": "operations",
      "required": true,
      "usageValue": "operations here",
    },
  ],
  "permissionLevel": 2,
}
`;

exports[`editFile tool handler should return error when provider lacks capabilities 1`] = `
{
  "message": "Not possible to edit file. Abort.",
  "type": "Error",
}
`;

exports[`editFile tool handler should return error when file not found 1`] = `
{
  "message": "<error><edit_file_path>missing.txt</edit_file_path><error_message>Either start_anchor or end_anchor must be specified</error_message></error>",
  "type": "Error",
}
`;

exports[`editFile tool handler should return error when no operations provided 1`] = `
{
  "message": "<error><edit_file_path>test.txt</edit_file_path><error_message>At least one edit operation is required</error_message></error>",
  "type": "Error",
}
`;

exports[`editFile tool handler should handle single operation successfully 1`] = `
{
  "message": "<edit_file_path>test.txt</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should handle multiple operations successfully 1`] = `
{
  "message": "<edit_file_path>test.ts</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should handle start of file marker 1`] = `
{
  "message": "<edit_file_path>test.ts</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should handle end of file marker 1`] = `
{
  "message": "<edit_file_path>test.ts</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should handle entire file replacement 1`] = `
{
  "message": "<edit_file_path>test.txt</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should return error when text not found 1`] = `
{
  "message": "<error><edit_file_path>test.txt</edit_file_path><error_message>Could not find text: missing</error_message></error>",
  "type": "Error",
}
`;

exports[`editFile tool handler should handle insert after start_anchor only 1`] = `
{
  "message": "<edit_file_path>test.txt</edit_file_path>",
  "type": "Reply",
}
`;

exports[`editFile tool handler should handle insert before end_anchor only 1`] = `
{
  "message": "<edit_file_path>test.txt</edit_file_path>",
  "type": "Reply",
}
`;
