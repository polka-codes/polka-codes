// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`askFollowupQuestion should return the correct response 1`] = `
{
  "message": 
"<ask_followup_question_answer question="Test question">
Test response
</ask_followup_question_answer>"
,
  "type": "Reply",
}
`;

exports[`askFollowupQuestion should handle errors 1`] = `[Error: Test error]`;

exports[`askFollowupQuestion should handle multiple questions 1`] = `
{
  "message": 
"<ask_followup_question_answer question="First question?">
Answer1|Answer2
</ask_followup_question_answer>
<ask_followup_question_answer question="Second question?">
Answer1|Answer2
</ask_followup_question_answer>"
,
  "type": "Reply",
}
`;

exports[`askFollowupQuestion should handle questions without options 1`] = `
{
  "message": 
"<ask_followup_question_answer question="Open-ended question">
Free text answer
</ask_followup_question_answer>"
,
  "type": "Reply",
}
`;

exports[`askFollowupQuestion should handle empty options array 1`] = `
{
  "message": 
"<ask_followup_question_answer question="Question with empty options">
Fallback answer
</ask_followup_question_answer>"
,
  "type": "Reply",
}
`;

exports[`askFollowupQuestion should validate required parameters 1`] = `[Definition: [
  {
    "expected": "array",
    "code": "invalid_type",
    "path": [
      "questions"
    ],
    "message": "Invalid input: expected array, received undefined"
  }
]]`;

exports[`askFollowupQuestion should validate required parameters 2`] = `[Definition: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "questions",
      0,
      "prompt"
    ],
    "message": "Invalid input: expected string, received undefined"
  }
]]`;
