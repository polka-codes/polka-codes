// generated by polka.codes
import type { ParseOutputResult } from '../workflow/types'

export const parseJsonFromMarkdown = (markdown: string): ParseOutputResult<any> => {
  const jsonRegex = /```(?:json)?\n([\s\S]*?)\n```/
  const match = markdown.match(jsonRegex)

  const tryParse = (str: string) => {
    try {
      let parsed = JSON.parse(str)
      // The model sometimes returns a stringified JSON object within the JSON.
      if (typeof parsed === 'string') {
        try {
          parsed = JSON.parse(parsed)
        } catch {
          // ignore if the inner string is not a valid JSON
        }
      }
      return { success: true, data: parsed } as const
    } catch (e) {
      const error = e instanceof Error ? e.message : String(e)
      return { success: false, error: `Failed to parse JSON: ${error}` } as const
    }
  }

  if (match?.[1]) {
    const content = match[1].trim()
    return tryParse(content)
  }

  // Fallback for cases where the output is just the JSON string without markdown fences
  const parseResult = tryParse(markdown)
  if (parseResult.success) {
    return parseResult
  }

  return { success: false, error: 'No JSON object found in the string.' } as const
}
