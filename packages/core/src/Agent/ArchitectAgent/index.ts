/**
 * ArchitectAgent for creating and refining implementation plans.
 * Generated by polka.codes
 */

import type { AiServiceBase } from '../../AiService'
import { type FullToolInfo, getAvailableTools } from '../../tool'
import {
  type ToolProvider,
  askFollowupQuestion,
  attemptCompletion,
  executeCommand,
  handOver,
  listCodeDefinitionNames,
  listFiles,
  readFile,
  searchFiles,
} from '../../tools'
import { AgentBase, type AgentInfo } from '../AgentBase'
import { getSystemPrompt } from './prompts'

export type ArchitectAgentOptions = {
  ai: AiServiceBase
  os: string
  provider: ToolProvider
  interactive: boolean
  additionalTools?: FullToolInfo[]
  customInstructions?: string[]
  agents?: AgentInfo[]
}

export class ArchitectAgent extends AgentBase {
  constructor(options: ArchitectAgentOptions) {
    const agentTools = [
      ...(options.additionalTools ?? []),
      askFollowupQuestion,
      attemptCompletion,
      handOver,
      executeCommand,
      listCodeDefinitionNames,
      listFiles,
      readFile,
      searchFiles,
    ] // no replace and no write as we don't want architect agent to do the actual coding
    const tools = getAvailableTools(options.provider, agentTools)
    const toolNamePrefix = 'tool_'
    const systemPrompt = getSystemPrompt()

    super(architectAgentInfo.name, options.ai, {
      systemPrompt,
      tools,
      toolNamePrefix,
      provider: options.provider,
      interactive: options.interactive,
      agents: options.agents,
    })
  }
}

export const architectAgentInfo = {
  name: 'Architect',
  responsibilities: [
    'Analyzing the userâ€™s overall task and requirements.',
    'Creating plans and making higher-level decisions about system structure and design.',
    'Reviewing and analyzing existing code or components for maintainability and scalability.',
    'Laying out the roadmap for implementation.',
  ],
}
