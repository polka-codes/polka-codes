/**
 * ArchitectAgent for creating and refining implementation plans.
 * Generated by polka.codes
 */

import type { AiServiceBase } from '../../AiService'
import { type FullToolInfo, getAvailableTools } from '../../tool'
import { type ToolProvider, allTools } from '../../tools'
import { AgentBase } from '../AgentBase'
import { getSystemPrompt } from './prompts'

export type ArchitectAgentOptions = {
  ai: AiServiceBase
  os: string
  provider: ToolProvider
  interactive: boolean
  additionalTools?: FullToolInfo[]
  customInstructions?: string[]
}

export class ArchitectAgent extends AgentBase {
  constructor(options: ArchitectAgentOptions) {
    const combinedTools = [...(options.additionalTools ?? []), ...Object.values(allTools)]
    const tools = getAvailableTools(options.provider, combinedTools)
    const toolNamePrefix = 'tool_'
    const systemPrompt = getSystemPrompt()

    super(options.ai, {
      systemPrompt,
      tools,
      toolNamePrefix,
      provider: options.provider,
      interactive: options.interactive,
    })
  }
}
