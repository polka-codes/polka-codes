// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`KnowledgeManagementPolicy with readFile tool updateResponse adds readFile for knowledge files when readFile tool is used 1`] = `
[
  {
    "name": "read_file",
    "params": {
      "path": "src/foo/bar.ts",
    },
    "type": "tool_use",
  },
  {
    "name": "read_file",
    "params": {
      "path": "src/foo/knowledge.ai.yml,src/knowledge.ai.yml",
    },
    "type": "tool_use",
  },
]
`;

exports[`KnowledgeManagementPolicy with readFile tool updateResponse adds readFile for knowledge files when listFiles tool is used 1`] = `
[
  {
    "name": "list_files",
    "params": {
      "path": "src/foo",
    },
    "type": "tool_use",
  },
  {
    "name": "read_file",
    "params": {
      "path": "src/knowledge.ai.yml",
    },
    "type": "tool_use",
  },
]
`;

exports[`KnowledgeManagementPolicy with readFile tool updateResponse does not add readFile for other tool uses 1`] = `
[
  {
    "name": "write_to_file",
    "params": {
      "content": "test",
      "path": "src/foo/bar.ts",
    },
    "type": "tool_use",
  },
]
`;

exports[`KnowledgeManagementPolicy with readFile tool updateResponse combines paths from multiple tool uses 1`] = `
[
  {
    "name": "read_file",
    "params": {
      "path": "src/foo/bar.ts",
    },
    "type": "tool_use",
  },
  {
    "name": "list_files",
    "params": {
      "path": "src/baz",
    },
    "type": "tool_use",
  },
  {
    "name": "read_file",
    "params": {
      "path": "src/foo/knowledge.ai.yml,src/knowledge.ai.yml",
    },
    "type": "tool_use",
  },
]
`;

exports[`KnowledgeManagementPolicy with readFile tool includes prompt when writeToFile tool is available 1`] = `
"
====

# Knowledge Extraction & Maintenance

You are equipped with **Knowledge Management** capabilities:

1. **What to capture**
   • Public API of each file (public classes, functions, methods, parameters, return types).
   • High‑level description of each file’s purpose.
   • Invariants and assumptions that must always hold.
   • Project‑ or directory‑specific coding patterns, styles, and architectural conventions.
   • Rules (commenting, testing, documentation, security, etc.).
   • Any other insight that a future contributor would find crucial.

2. **Where to store it**
   • Save knowledge in a YAML file named \`knowledge.ai.yml\`.
   • **Create the file in the repository root if it does not yet exist.**
   • One file per directory.
     – The repository root file records knowledge that applies project‑wide (e.g., service responsibilities, global patterns).
     – Each sub‑directory keeps only the knowledge relevant to that directory or package.
   • Use clear keys such as \`description\`, \`files\`, \`rules\`.

3. **When to update**
   • **Default behaviour:** only create / update knowledge for the files you actively read, create, or modify during the current task.
     – Operate on other files **only if the user explicitly requests it**.
   • **While working**: after reading, analysing, creating, or modifying code, immediately record any new or changed knowledge.
   • **On refactor / deletion**: locate and delete or amend obsolete entries so that knowledge never drifts from the codebase.
   • **Granularity**: update only the affected directory’s \`knowledge.ai.yml\`, except when the change has global impact.

4. **How to format (illustrative)**
\`\`\`yaml
description: "description of the directory"
files:
  - path: "src/utils/math.ts"
    description: "Numeric helpers for currency calculations"
    api:
      functions:
        - name: "add"
          params: [{ name: "a", type: "number" }, { name: "b", type: "number" }]
          returns: "number"
rules:
  - "rules that applies to all files in this directory"
\`\`\`

5. **Source of truth**
   • **Never invent knowledge.** Everything you record must be *directly derived* from existing code, comments, commit messages, or explicit user instructions.
   • If a section has no confirmed content, omit it rather than guessing.

6. **Automatic context**
   When you are asked to read or modify a file, the orchestration layer will supply any existing knowledge for that path automatically. Use it, refine it, and keep it accurate.

Your workflow **must**:
   1. Detect knowledge deltas.
   2. Create \`knowledge.ai.yml\` if missing and write edits to the correct file.
   3. Remove stale facts.
   4. Use provided tools to update the knowledge files.
   5. Record only evidence‑based information; do not hallucinate.

Adhere to these rules rigorously to ensure the codebase and its living documentation stay in sync.
"
`;
