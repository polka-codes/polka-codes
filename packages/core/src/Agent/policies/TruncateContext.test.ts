// TruncateContext policy tests - generated by polka.codes

import { expect, spyOn, test } from 'bun:test'
import type { MessageParam } from '../../AiService'
import { TruncateContextPolicy } from './TruncateContext'

test('TruncateContextPolicy should truncate messages when over threshold', async () => {
  // Create mock agent
  const mockAgent = {
    messages: [
      { role: 'user', content: 'User message 1'.repeat(500) },
      { role: 'assistant', content: 'Assistant message 1'.repeat(500) },
      { role: 'user', content: 'User message 2' },
      { role: 'assistant', content: 'Assistant message 2' },
      { role: 'user', content: 'User message 3' },
      { role: 'assistant', content: 'Assistant message 3' },
    ] as MessageParam[],
    setMessages: (messages: MessageParam[]) => {
      mockAgent.messages = messages
    },
  }

  const policy = TruncateContextPolicy({})
  await policy.onBeforeRequest(mockAgent as any)

  expect(mockAgent.messages).toMatchSnapshot()
})

test('TruncateContextPolicy should not truncate small message lists', async () => {
  const mockAgent = {
    messages: [
      { role: 'user', content: 'Short user message' },
      { role: 'assistant', content: 'Short assistant message' },
    ] as MessageParam[],
    setMessages: (messages: MessageParam[]) => {
      mockAgent.messages = messages
    },
  }

  const setMessagesSpy = spyOn(mockAgent, 'setMessages')
  const policy = TruncateContextPolicy({})
  await policy.onBeforeRequest(mockAgent as any)

  expect(setMessagesSpy).not.toHaveBeenCalled()
  expect(mockAgent.messages.length).toBe(2)
})

test('TruncateContextPolicy should preserve recent exchanges', async () => {
  const mockAgent = {
    messages: [
      { role: 'user', content: 'Old user message 1'.repeat(300) },
      { role: 'assistant', content: 'Old assistant message 1'.repeat(300) },
      { role: 'user', content: 'Old user message 2'.repeat(300) },
      { role: 'assistant', content: 'Old assistant message 2'.repeat(300) },
      { role: 'user', content: 'Recent user message 1' },
      { role: 'assistant', content: 'Recent assistant message 1' },
      { role: 'user', content: 'Recent user message 2' },
      { role: 'assistant', content: 'Recent assistant message 2' },
      { role: 'user', content: 'Most recent user message' },
      { role: 'assistant', content: 'Most recent assistant message' },
    ] as MessageParam[],
    setMessages: (messages: MessageParam[]) => {
      mockAgent.messages = messages
    },
  }

  const policy = TruncateContextPolicy({})
  await policy.onBeforeRequest(mockAgent as any)

  expect(mockAgent.messages).toMatchSnapshot()
})
