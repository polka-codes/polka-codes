import type { MessageParam } from '../../AiService'
import type { FullToolInfo } from '../../tool'
// TruncateContext.ts - generated by polka.codes
import type { AgentBase, AgentPolicy, AgentPolicyInstance } from '../AgentBase'

/**
 * Default token limit for context window
 * This is a conservative estimate that should work for most models
 */
const DEFAULT_TOKEN_LIMIT = 4000

/**
 * Approximate token count per character
 * This is a rough estimate - most models use ~4 characters per token
 */
const CHARS_PER_TOKEN = 4

/**
 * Number of messages to preserve at the end when truncating
 */
const PRESERVE_RECENT_MESSAGES = 4

/**
 * Message to insert when truncation occurs
 */
const TRUNCATION_MESSAGE: MessageParam = {
  role: 'system',
  content: 'Some earlier messages have been removed to stay within the context window limits.',
}

/**
 * Policy to truncate messages when the context window is too large
 */
export const TruncateContextPolicy: AgentPolicy = (tools: Record<string, FullToolInfo>): AgentPolicyInstance | undefined => {
  return {
    name: 'TruncateContext',
    onBeforeRequest: async (agent: AgentBase, messages: MessageParam[]): Promise<MessageParam[]> => {
      // If we have few messages, no need to truncate
      if (messages.length <= PRESERVE_RECENT_MESSAGES) {
        return messages
      }

      // Estimate token count based on character count
      const estimateTokens = (text: string): number => {
        return Math.ceil(text.length / CHARS_PER_TOKEN)
      }

      // Calculate total tokens in all messages
      let totalTokens = 0
      for (const message of messages) {
        totalTokens += estimateTokens(typeof message.content === 'string' ? message.content : JSON.stringify(message.content))
      }

      // Get token limit from config or use default
      const tokenLimit = DEFAULT_TOKEN_LIMIT

      // If we're under the limit, return all messages
      if (totalTokens <= tokenLimit) {
        return messages
      }

      // We need to truncate messages
      // Keep the most recent messages and add a system message explaining the truncation
      const preservedMessages = messages.slice(-PRESERVE_RECENT_MESSAGES)

      // Insert the truncation message before the preserved messages
      return [TRUNCATION_MESSAGE, ...preservedMessages]
    },
  }
}
