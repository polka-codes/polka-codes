// TruncateContext policy - generated by polka.codes
// Truncates conversation messages when context size becomes too large to prevent token limit overflows

import type { MessageParam } from '../../AiService'
import { Policies } from '../../config'
import type { AgentBase, AgentPolicy } from '../AgentBase'

// Default max token threshold
const DEFAULT_MAX_TOKENS_ESTIMATE = 4000

// Simple token estimation (1 token â‰ˆ 4 characters)
function estimateTokens(text: string): number {
  return Math.ceil(text.length / 4)
}

export const TruncateContextPolicy = (tools: Parameters<AgentPolicy>[0]) => {
  return {
    name: Policies.TruncateContext,
    async onBeforeRequest(agent: AgentBase): Promise<void> {
      const messages = agent.messages

      // Skip if there aren't enough messages to truncate
      if (messages.length < 3) {
        return
      }

      // Calculate total token estimate
      let totalTokens = 0
      for (const msg of messages) {
        if (typeof msg.content === 'string') {
          totalTokens += estimateTokens(msg.content)
        } else if (Array.isArray(msg.content)) {
          // Handle content blocks
          for (const block of msg.content) {
            if (typeof block === 'object' && 'text' in block && typeof block.text === 'string') {
              totalTokens += estimateTokens(block.text)
            }
          }
        }
      }

      // If under threshold, no truncation needed
      if (totalTokens <= DEFAULT_MAX_TOKENS_ESTIMATE) {
        return
      }

      // Truncation strategy: preserve recent messages
      // Keep the most recent messages (last 6 messages = 3 exchanges)
      const keepLastN = 6
      const recentMessages = messages.slice(-keepLastN)

      // Count how many messages were truncated
      const truncatedCount = messages.length - recentMessages.length

      // Rebuild the truncated message list
      const truncatedMessages: MessageParam[] = [
        // Add a message explaining truncation if any messages were removed
        ...(truncatedCount > 0
          ? [
              {
                role: 'user' as const,
                content: `Note: ${truncatedCount} earlier messages were truncated to prevent context overflow.`,
              },
            ]
          : []),
        ...recentMessages,
      ]

      // Update the agent's messages
      agent.setMessages(truncatedMessages)
    },
  }
}
