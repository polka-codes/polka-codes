// generated by polka.codes
import { describe, expect, it } from 'bun:test'
import { parseJsonFromMarkdown } from './parseJsonFromMarkdown'

describe('parseJsonFromMarkdown', () => {
  it('should parse JSON from a markdown code block', () => {
    const markdown = 'Here is the JSON:\n\n```json\n{"key":"value"}\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: { key: 'value' },
    })
  })

  it('should return an error if no JSON object is found', () => {
    const markdown = 'This is just a string.'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: false,
      error: 'No JSON object found in the string.',
    })
  })

  it('should handle JSON without markdown fences', () => {
    const json = '{"key":"value"}'
    expect(parseJsonFromMarkdown(json)).toEqual({
      success: true,
      data: { key: 'value' },
    })
  })

  it('should return an error for malformed JSON in a code block', () => {
    const markdown = '```json\n{"key":"value",,}\n```'
    const result = parseJsonFromMarkdown(markdown)
    expect(result.success).toBe(false)
    if (!result.success) {
      expect(result.error).toMatch(/Failed to parse JSON/)
    }
  })

  it('should parse JSON from a markdown code block without the json identifier', () => {
    const markdown = 'Here is the JSON:\n\n```\n{"key":"value"}\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: { key: 'value' },
    })
  })

  it('should parse an escaped JSON string from a markdown code block', () => {
    const markdown = '```json\n"{\\"key\\":\\"value\\"}"\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: { key: 'value' },
    })
  })

  it('should parse an escaped JSON string from a markdown code block without the json identifier', () => {
    const markdown = '```\n"{\\"key\\":\\"value\\"}"\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: { key: 'value' },
    })
  })

  it('should parse a JSON array from a markdown code block', () => {
    const markdown = '```json\n[{"key":"value"}]\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: [{ key: 'value' }],
    })
  })

  it('should parse a JSON array from a markdown code block without the json identifier', () => {
    const markdown = '```\n[{"key":"value"}]\n```'
    expect(parseJsonFromMarkdown(markdown)).toEqual({
      success: true,
      data: [{ key: 'value' }],
    })
  })
})
