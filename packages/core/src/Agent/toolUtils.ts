// generated by polka.codes
import type { Anthropic } from '@anthropic-ai/sdk'
import type { UserContent } from '../AiService'
import type { FullToolInfo, ToolParameter } from '../tool'

function paramToJsonSchema(param: ToolParameter): any {
  let schema: any

  if (param.children?.length) {
    const properties = param.children.reduce(
      (acc, child) => {
        acc[child.name] = paramToJsonSchema(child)
        return acc
      },
      {} as Record<string, any>,
    )

    const required = param.children.filter((p) => p.required).map((p) => p.name)

    schema = {
      type: 'object',
      properties,
    }
    if (required.length > 0) {
      schema.required = required
    }
  } else {
    schema = {
      type: 'string', // Assuming string for primitive types
      description: param.description,
    }
  }

  if (param.allowMultiple) {
    return {
      type: 'array',
      items: schema,
      description: param.description,
    }
  }

  schema.description = param.description
  return schema
}

export function toolToAnthropicTool(tool: FullToolInfo): Anthropic.Tool {
  const properties = tool.parameters.reduce(
    (acc, p) => {
      acc[p.name] = paramToJsonSchema(p)
      return acc
    },
    {} as Record<string, any>,
  )

  const required = tool.parameters.filter((p) => p.required).map((p) => p.name)

  return {
    name: tool.name,
    description: tool.description,
    input_schema: {
      type: 'object',
      properties,
      ...(required.length > 0 && { required }),
    },
  }
}

export function userContentToString(content: UserContent): string {
  if (typeof content === 'string') {
    return content
  }
  return content
    .map((item) => {
      if ('text' in item) {
        return item.text
      }
      return ''
    })
    .join('')
}
