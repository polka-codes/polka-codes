/**
 * File search utility using ripgrep for performant code search
 * Generated by polka.codes
 */
import { spawn } from 'node:child_process'

/**
 * Performs a regex search across files using ripgrep.
 * Respects .gitignore and provides context-rich results.
 *
 * @param path - Directory to search in
 * @param regex - Regular expression pattern to search for
 * @param filePattern - Optional glob pattern to filter files. Can be a comma-separated string (e.g., "*.ts,*.js")
 * @param cwd - Working directory for relative paths
 * @param excludeFiles - Additional patterns to exclude
 * @returns Array of search results with context
 */
export async function searchFiles(
  path: string,
  regex: string,
  filePattern: string,
  cwd: string,
  excludeFiles?: string[],
): Promise<string[]> {
  // Build ripgrep arguments
  const args = [
    '--line-number', // Show line numbers
    '--context=5', // Show 2 lines before and after matches
    '--color=never', // No color codes in output
    '--with-filename', // Show filenames
    '--smart-case', // Smart case sensitivity
  ]

  // Add file pattern filter if specified
  if (filePattern && filePattern !== '*') {
    // Handle comma-separated patterns
    const patterns = filePattern
      .split(',')
      .map((p) => p.trim())
      .filter(Boolean)

    // Add each pattern as a separate --glob argument
    for (const pattern of patterns) {
      if (pattern) {
        args.push('--glob', pattern)
      }
    }
  }

  // Add custom ignore patterns
  if (excludeFiles) {
    for (const pattern of excludeFiles) {
      args.push('--glob', `!${pattern}`)
    }
  }

  // Add the search pattern and path
  args.push(regex, path)

  return new Promise((resolve, reject) => {
    const results: string[] = []

    const rg = spawn('rg', args, {
      cwd,
      stdio: ['ignore', 'pipe', 'pipe'],
    })

    rg.stdout.on('data', (data) => {
      const lines = data.toString().split('\n').filter(Boolean)
      results.push(...lines)
    })

    rg.on('error', (error) => {
      reject(new Error(`Failed to execute ripgrep: ${error.message}`))
    })

    rg.on('close', (code) => {
      if (code !== 0 && code !== 1) {
        // code 1 means no matches found, which is not an error
        reject(new Error(`Ripgrep process exited with code ${code}`))
        return
      }
      resolve(results)
    })
  })
}
