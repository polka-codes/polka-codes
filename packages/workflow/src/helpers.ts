// generated by polka.codes
import type { JSONValue } from '@ai-sdk/provider'
import type { StepFn, ToolRegistry } from './workflow'

export const makeStepFn = <TTools extends ToolRegistry = any>(fns?: {
  onEnterStep?: (name: string) => void | Promise<void>
  getStepResult?: (key: string) => Promise<{ found: true; value: JSONValue | undefined } | { found: false }>
  setStepResult?: (key: string, value: JSONValue | undefined) => Promise<void>
}): StepFn<TTools> => {
  const resolvedFns =
    fns?.getStepResult && fns?.setStepResult
      ? { getStepResult: fns.getStepResult, setStepResult: fns.setStepResult }
      : (() => {
          const results: Map<string, JSONValue | undefined> = new Map()
          return {
            getStepResult: async (key: string) => {
              if (results.has(key)) {
                return { found: true, value: results.get(key) }
              }
              return { found: false }
            },
            setStepResult: async (key: string, value: JSONValue | undefined) => {
              results.set(key, value)
            },
          }
        })()

  return async function* (name, fn) {
    fns?.onEnterStep?.(name)
    const existingResult = await resolvedFns.getStepResult(name)
    if (existingResult.found) {
      return existingResult.value as any
    }

    const result = yield* fn()
    await resolvedFns.setStepResult(name, result as any)
    return result
  }
}
