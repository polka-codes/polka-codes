// generated by polka.codes
import type { PlainJson, StepFn } from './workflow'

export const makeStepFn = (fns?: {
  getStepResult: (key: string) => Promise<{ found: true; value: PlainJson | undefined } | { found: false }>
  setStepResult: (key: string, value: PlainJson | undefined) => Promise<void>
  getAndIncrementCounts: (key: string) => Promise<number>
}): StepFn => {
  const resolvedFns =
    fns ??
    (() => {
      const results: Record<string, PlainJson | undefined> = {}
      const counts: Record<string, number> = {}
      return {
        getStepResult: async (key: string) => {
          if (Object.hasOwn(results, key)) {
            return { found: true, value: results[key] }
          }
          return { found: false }
        },
        setStepResult: async (key: string, value: PlainJson | undefined) => {
          results[key] = value
        },
        getAndIncrementCounts: async (key: string) => {
          counts[key] = (counts[key] || 0) + 1
          return counts[key]
        },
      }
    })()

  return async (name, fn) => {
    const currentCounts = await resolvedFns.getAndIncrementCounts(name)

    const key = `${name}#${currentCounts}`
    const existingResult = await resolvedFns.getStepResult(key)
    if (existingResult.found) {
      return existingResult.value as any
    }
    const result = await fn()
    await resolvedFns.setStepResult(key, result ?? undefined)
    return result
  }
}
