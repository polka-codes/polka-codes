// generated by polka.codes

import { describe, expect, it } from 'bun:test'
import type { FilesystemProvider } from '@polka-codes/core'
import { readFile, ToolResponseType } from '@polka-codes/core'
import { createCoreToolsExecutor } from './tool-adapter'

describe('tool-adapter', () => {
  it('should create an executor from core tools', async () => {
    const mockProvider: FilesystemProvider = {
      readFile: async (path: string) => `content of ${path}`,
    }

    const tools = {
      readFile,
    }

    const executor = createCoreToolsExecutor(tools, mockProvider)

    const result = await executor.readFile({ path: 'test.txt' })

    expect(result).toEqual({
      type: ToolResponseType.Reply,
      message: {
        type: 'text',
        value: '<read_file_file_content path="test.txt">content of test.txt</read_file_file_content>',
      },
    })
  })

  it('should handle errors from tool handler', async () => {
    const mockProvider: FilesystemProvider = {
      readFile: async (_path: string) => {
        throw new Error('File not found')
      },
    }

    const tools = {
      readFile,
    }

    const executor = createCoreToolsExecutor(tools, mockProvider)

    await expect(executor.readFile({ path: 'test.txt' })).rejects.toThrow('File not found')
  })
})
