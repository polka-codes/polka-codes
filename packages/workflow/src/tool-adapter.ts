// generated by polka.codes
import type { FullToolInfoV2, ToolParameterValue, ToolResponse } from '@polka-codes/core'
import type { z } from 'zod'
import type { ToolRegistry, ToolsExecutor } from './workflow'

function coreToolToWorkflowTool<T extends FullToolInfoV2, P>(
  tool: T,
  provider: P,
): (input: z.infer<T['parameters']>) => Promise<ToolResponse> {
  return async (input) => {
    return await tool.handler(provider, input as Partial<Record<string, ToolParameterValue>>)
  }
}

export function createCoreToolsExecutor<T extends Record<string, FullToolInfoV2>, P, TR extends ToolRegistry>(
  coreTools: T,
  provider: P,
): ToolsExecutor<TR> {
  const executor: ToolsExecutor<any> = {}
  for (const toolName in coreTools) {
    const tool = coreTools[toolName]
    executor[toolName] = coreToolToWorkflowTool(tool, provider)
  }
  return executor
}
