// generated by polka.codes
import { expect, test } from 'bun:test'
import { type FullToolInfoV2, type ToolResponse, ToolResponseType } from '@polka-codes/core'
import type { ModelMessage, UserModelMessage } from 'ai'
import { z } from 'zod'
import { type AgentWorkflowInput, agentWorkflow } from './agent.workflow'
import { type JsonResponseMessage, toJsonModelMessage } from './json-ai-types'
import { run, type WorkflowResult } from './workflow'

const createMockTool = (name: string, description: string, handler: (args: any) => Promise<ToolResponse>): FullToolInfoV2 => ({
  name,
  description,
  parameters: z.object({
    path: z.string().describe('The path to list files from'),
  }),
  handler,
  isAvailable: () => true,
})

const listFilesTool = createMockTool('listFiles', 'List files in a directory', async ({ path }: { path: string }) => {
  if (path === './src') {
    return {
      type: ToolResponseType.Reply,
      message: {
        type: 'json',
        value: ['index.ts', 'agent.workflow.ts'],
      },
    }
  }
  return {
    type: ToolResponseType.Reply,
    message: { type: 'json', value: [] },
  }
})

const exitTool = createMockTool('exitTool', 'Exit the workflow', async () => ({
  type: ToolResponseType.Exit,
  message: 'Workflow exited',
}))

const handOverTool = createMockTool('handOverTool', 'Hand over to another agent', async () => ({
  type: ToolResponseType.HandOver,
  agentName: 'test-agent',
  task: 'test-task',
}))

const delegateTool = createMockTool('delegateTool', 'Delegate to another agent', async () => ({
  type: ToolResponseType.Delegate,
  agentName: 'test-agent',
  task: 'test-task',
}))

const errorTool = createMockTool('errorTool', 'Return an error', async () => ({
  type: ToolResponseType.Error,
  message: { type: 'error-text', value: 'Something went wrong' },
}))

const invalidTool = createMockTool('invalidTool', 'Return invalid', async () => ({
  type: ToolResponseType.Invalid,
  message: { type: 'error-text', value: 'Invalid arguments' },
}))

test('should run agent workflow with a tool call and reply', async () => {
  const mockResponses: ModelMessage[] = [
    {
      role: 'assistant',
      content: [
        {
          type: 'tool-call',
          toolCallId: 'tool-call-1',
          toolName: 'listFiles',
          input: { path: './src' },
        },
      ],
    },
    {
      role: 'assistant',
      content: 'The files are index.ts and agent.workflow.ts',
    },
  ]

  const initialMessages: UserModelMessage[] = [{ role: 'user', content: 'What are the files in the src directory?' }]

  const tools = [listFilesTool]

  const result1 = await run(agentWorkflow, {
    userMessage: initialMessages.map(toJsonModelMessage) as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
  })

  expect(result1.status).toBe('pending')
  if (result1.status !== 'pending') return
  expect(result1.tool.tool).toBe('taskEvent')

  const result2 = await result1.next()
  expect(result2.status).toBe('pending')
  if (result2.status !== 'pending') return
  expect(result2.tool.tool).toBe('taskEvent')

  const result3 = await result2.next()
  expect(result3.status).toBe('pending')
  if (result3.status !== 'pending') return
  expect(result3.tool.tool).toBe('generateText')

  const result4 = await result3.next(mockResponses.slice(0, 1) as JsonResponseMessage[])
  expect(result4.status).toBe('pending')
  if (result4.status !== 'pending') return
  expect(result4.tool.tool).toBe('invokeTool')
  expect(result4.tool.input).toEqual({ toolName: 'listFiles', input: { path: './src' } })

  const listFilesResponse = await listFilesTool.handler({} as any, (result4.tool.input as any).input)
  const result5 = await result4.next(listFilesResponse)
  expect(result5.status).toBe('pending')
  if (result5.status !== 'pending') return
  expect(result5.tool.tool).toBe('taskEvent')

  const result6 = await result5.next()
  expect(result6.status).toBe('pending')
  if (result6.status !== 'pending') return
  expect(result6.tool.tool).toBe('generateText')

  const result7 = await result6.next(mockResponses.slice(1, 2) as JsonResponseMessage[])
  expect(result7.status).toBe('completed')
  if (result7.status !== 'completed') return

  expect(result7.output).toEqual({
    type: ToolResponseType.Exit,
    message: 'The files are index.ts and agent.workflow.ts',
  })
})

test('should exit when a tool returns an Exit response', async () => {
  const mockResponses: ModelMessage[] = [
    {
      role: 'assistant',
      content: [
        {
          type: 'tool-call',
          toolCallId: 'tool-call-1',
          toolName: 'exitTool',
          input: {},
        },
      ],
    },
  ]

  const tools = [exitTool]

  const result1 = await run(agentWorkflow, {
    userMessage: [toJsonModelMessage({ role: 'user', content: 'Please exit.' })] as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
  })
  expect(result1.status).toBe('pending')
  if (result1.status !== 'pending') return
  expect(result1.tool.tool).toBe('taskEvent')

  const result2 = await result1.next()
  expect(result2.status).toBe('pending')
  if (result2.status !== 'pending') return
  expect(result2.tool.tool).toBe('taskEvent')

  const result3 = await result2.next()
  expect(result3.status).toBe('pending')
  if (result3.status !== 'pending') return
  expect(result3.tool.tool).toBe('generateText')

  const result4 = await result3.next(mockResponses as JsonResponseMessage[])
  if (result4.status !== 'pending') throw new Error('Expected pending status')
  expect(result4.tool.tool).toBe('invokeTool')

  const toolResponse = await exitTool.handler({} as any, (result4.tool.input as any).input)
  const finalResult = await result4.next(toolResponse)

  expect(finalResult.status).toBe('completed')
  if (finalResult.status !== 'completed') return

  expect(finalResult.output).toEqual({
    type: ToolResponseType.Exit,
    message: 'Workflow exited',
  })
})

test('should exit when a tool returns a HandOver response', async () => {
  const mockResponses: ModelMessage[] = [
    {
      role: 'assistant',
      content: [
        {
          type: 'tool-call',
          toolCallId: 'tool-call-1',
          toolName: 'handOverTool',
          input: {},
        },
      ],
    },
  ]

  const tools = [handOverTool]

  const result1 = await run(agentWorkflow, {
    userMessage: [toJsonModelMessage({ role: 'user', content: 'Please hand over.' })] as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
  })
  expect(result1.status).toBe('pending')
  if (result1.status !== 'pending') return
  expect(result1.tool.tool).toBe('taskEvent')

  const result2 = await result1.next()
  expect(result2.status).toBe('pending')
  if (result2.status !== 'pending') return
  expect(result2.tool.tool).toBe('taskEvent')

  const result3 = await result2.next()
  expect(result3.status).toBe('pending')
  if (result3.status !== 'pending') return
  expect(result3.tool.tool).toBe('generateText')

  const result4 = await result3.next(mockResponses as JsonResponseMessage[])
  if (result4.status !== 'pending') throw new Error('Expected pending status')

  const toolResponse = await handOverTool.handler({} as any, (result4.tool.input as any).input)
  const finalResult = await result4.next(toolResponse)

  expect(finalResult.status).toBe('completed')
  if (finalResult.status !== 'completed') return

  expect(finalResult.output).toEqual({
    type: ToolResponseType.HandOver,
    agentName: 'test-agent',
    task: 'test-task',
  })
})

test('should exit when a tool returns a Delegate response', async () => {
  const mockResponses: ModelMessage[] = [
    {
      role: 'assistant',
      content: [
        {
          type: 'tool-call',
          toolCallId: 'tool-call-1',
          toolName: 'delegateTool',
          input: {},
        },
      ],
    },
  ]

  const tools = [delegateTool]

  const result1 = await run(agentWorkflow, {
    userMessage: [toJsonModelMessage({ role: 'user', content: 'Please delegate.' })] as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
  })
  expect(result1.status).toBe('pending')
  if (result1.status !== 'pending') return
  expect(result1.tool.tool).toBe('taskEvent')

  const result2 = await result1.next()
  expect(result2.status).toBe('pending')
  if (result2.status !== 'pending') return
  expect(result2.tool.tool).toBe('taskEvent')

  const result3 = await result2.next()
  expect(result3.status).toBe('pending')
  if (result3.status !== 'pending') return
  expect(result3.tool.tool).toBe('generateText')

  const result4 = await result3.next(mockResponses as JsonResponseMessage[])
  if (result4.status !== 'pending') throw new Error('Expected pending status')

  const toolResponse = await delegateTool.handler({} as any, (result4.tool.input as any).input)
  const finalResult = await result4.next(toolResponse)

  expect(finalResult.status).toBe('completed')
  if (finalResult.status !== 'completed') return

  expect(finalResult.output).toEqual({
    type: ToolResponseType.Delegate,
    agentName: 'test-agent',
    task: 'test-task',
  })
})

test('should handle Error and Invalid tool responses', async () => {
  const mockResponses: ModelMessage[] = [
    {
      role: 'assistant',
      content: [
        {
          type: 'tool-call',
          toolCallId: 'tool-call-1',
          toolName: 'errorTool',
          input: {},
        },
        {
          type: 'tool-call',
          toolCallId: 'tool-call-2',
          toolName: 'invalidTool',
          input: {},
        },
      ],
    },
    {
      role: 'assistant',
      content: 'Done.',
    },
  ]

  const tools = [errorTool, invalidTool]

  const result1 = await run(agentWorkflow, {
    userMessage: [toJsonModelMessage({ role: 'user', content: 'Run tools that fail.' })] as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
  })
  expect(result1.status).toBe('pending')
  if (result1.status !== 'pending') return
  expect(result1.tool.tool).toBe('taskEvent')

  const result2 = await result1.next()
  expect(result2.status).toBe('pending')
  if (result2.status !== 'pending') return
  expect(result2.tool.tool).toBe('taskEvent')

  const result3 = await result2.next()
  expect(result3.status).toBe('pending')
  if (result3.status !== 'pending') return
  expect(result3.tool.tool).toBe('generateText')

  const result4 = await result3.next(mockResponses.slice(0, 1) as JsonResponseMessage[])
  if (result4.status !== 'pending') throw new Error('Expected pending status')
  expect(result4.tool.tool).toBe('invokeTool')

  const errorResponse = await errorTool.handler({} as any, (result4.tool.input as any).input)
  const result5 = await result4.next(errorResponse)
  if (result5.status !== 'pending') throw new Error('Expected pending status')
  expect(result5.tool.tool).toBe('invokeTool')

  const invalidResponse = await invalidTool.handler({} as any, (result5.tool.input as any).input)
  const result6 = await result5.next(invalidResponse)
  if (result6.status !== 'pending') throw new Error('Expected pending status')
  expect(result6.tool.tool).toBe('taskEvent')

  const result7 = await result6.next()
  if (result7.status !== 'pending') throw new Error('Expected pending status')
  expect(result7.tool.tool).toBe('generateText')
})

test('should fail if maxToolRoundTrips is exceeded', async () => {
  const mockResponses: ModelMessage[] = Array(12).fill({
    role: 'assistant',
    content: [
      {
        type: 'tool-call',
        toolCallId: 'tool-call-1',
        toolName: 'listFiles',
        input: { path: './src' },
      },
    ],
  })

  const tools = [listFilesTool]

  let currentResult: WorkflowResult<AgentWorkflowInput, any, any> = await run(agentWorkflow, {
    userMessage: [toJsonModelMessage({ role: 'user', content: 'List files.' })] as any,
    tools,
    systemPrompt: 'You are a helpful assistant.',
    maxToolRoundTrips: 10,
  })

  for (let i = 0; i < 40; i++) {
    if (currentResult.status !== 'pending') {
      break
    }
    let toolResponse: any
    if (currentResult.tool.tool === 'generateText') {
      toolResponse = mockResponses.shift() ? [mockResponses.shift()!] : []
    } else if (currentResult.tool.tool === 'invokeTool') {
      toolResponse = await listFilesTool.handler({} as any, (currentResult.tool.input as any).input)
    }
    currentResult = await currentResult.next(toolResponse as any)
  }

  expect(currentResult.status).toBe('failed')
  if (currentResult.status === 'failed') {
    expect((currentResult.error as Error).message).toBe('Maximum number of tool round trips reached.')
  }
})
