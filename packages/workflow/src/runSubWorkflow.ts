// packages/workflow/src/runSubWorkflow.ts

// generated by polka.codes

import type { PlainJson, ToolRegistry, Workflow, WorkflowTools } from './workflow'
import { run } from './workflow'

/**
 * Helper function to run a sub-workflow within the current workflow context.
 * This allows code.workflow to invoke fix.workflow without duplicating its logic.
 */
export async function* runSubWorkflow<TInput extends PlainJson, TOutput extends PlainJson, TTools extends ToolRegistry>(
  tools: WorkflowTools<TTools>,
  workflow: Workflow<TInput, TOutput, TTools>,
  input: TInput,
): AsyncGenerator<any, TOutput | undefined, any> {
  // Start the sub-workflow
  let state = await run(workflow, input)

  // Process tool calls from the sub-workflow
  while (state.status === 'pending') {
    const toolName = state.tool.tool as keyof TTools
    const toolInput = state.tool.input as any

    // Delegate the tool call to the parent workflow's tools
    const toolFn = tools[toolName] as any
    const toolResult = yield* toolFn(toolInput)

    // Continue the sub-workflow with the tool result
    state = await state.next(toolResult)
  }

  // Handle the final state
  if (state.status === 'completed') {
    return state.output
  }

  if (state.status === 'failed') {
    console.log('⚠️  Warning: Sub-workflow encountered errors.\n')
    const error = state.error as Error
    console.error('Error details:', error.message)
    return undefined
  }

  return undefined
}
