// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`github fetchIssue 1`] = `
"#1: Test issue
some body

> quote

\`\`\`ts
const someCode = 'test'
\`\`\`


============ Comments ============
2025-02-11T00:42:46Z @xlc:
this is a comment

========================
2025-02-11T00:43:02Z @xlc:
another reply

========================
"
`;

exports[`github fetchPR 1`] = `
"#95: Refactor CLI Init Command and Simplify Test Cases
**Summary of Changes**:

* Refactored the CLI \`init\` command to handle base directory configuration
* Updated project config generation logic
* Simplified test cases for \`generateProjectConfig\` tool
* Removed redundant whitespace trimming in output parsing

**Highlights of Changed Code**:

* Added base directory handling in \`init.ts\` with proper directory change logging
* Updated \`generateProjectConfig.ts\` to remove redundant output trimming
* Simplified test cases in \`generateProjectConfig.test.ts\` by removing redundant whitespace test
* Modified \`makeAgentTool\` return type in \`index.ts\` to simplify tool execution

**Additional Information**:

* The changes improve maintainability and reduce unnecessary complexity in the codebase
* Test coverage remains comprehensive while being more focused on essential functionality

============ Diff ============
diff --git a/packages/cli/src/commands/init.ts b/packages/cli/src/commands/init.ts
index 982ddea..dd2a71a 100644
--- a/packages/cli/src/commands/init.ts
+++ b/packages/cli/src/commands/init.ts
@@ -25,6 +25,11 @@ export const initCommand = new Command('init')
 
 initCommand.action(async (options, command: Command) => {
   const cmdOptions = command.parent?.opts() ?? {}
+
+  parseOptions(cmdOptions) // process --base-dir
+
+  cmdOptions.baseDir = undefined // so it won't be processed again later
+
   const globalConfigPath = getGlobalConfigPath()
 
   let gloabl = options.global
@@ -76,7 +81,7 @@ initCommand.action(async (options, command: Command) => {
       }
     }
 
-    const { config, providerConfig, verbose, maxMessageCount, budget } = parseOptions(cmdOptions)
+    const { providerConfig, verbose, maxMessageCount, budget } = parseOptions(cmdOptions)
     let { provider, model, apiKey } = providerConfig.getConfigForCommand('init') ?? {}
 
     // Get provider configuration
@@ -161,8 +166,7 @@ initCommand.action(async (options, command: Command) => {
       // Generate project config
       console.log('Analyzing project files...')
 
-      const { response } = await generateProjectConfig(runner.multiAgent, undefined)
-      console.log(response)
+      const response = await generateProjectConfig(runner.multiAgent, undefined)
       generatedConfig = response ? parse(response) : {}
     }
 
diff --git a/packages/cli/src/options.ts b/packages/cli/src/options.ts
index 08f6699..e5c59d0 100644
--- a/packages/cli/src/options.ts
+++ b/packages/cli/src/options.ts
@@ -36,6 +36,7 @@ export function parseOptions(options: CliOptions, cwdArg?: string, home: string
   if (options.baseDir) {
     process.chdir(options.baseDir)
     cwd = options.baseDir
+    console.log('Changed working directory to', cwd)
   } else {
     cwd = process.cwd()
   }
diff --git a/packages/core/src/AiTool/createNewProject.ts b/packages/core/src/AiTool/createNewProject.ts
index 1f283e8..0a14026 100644
--- a/packages/core/src/AiTool/createNewProject.ts
+++ b/packages/core/src/AiTool/createNewProject.ts
@@ -30,7 +30,7 @@ const prompt = \`You are an AiTool designed to assist users in creating new proje
    - Based on the collected information, generate a .polkacodes.yml configuration file that includes:
      - scripts section with common development commands (test, format, check, etc.)
      - rules section reflecting project conventions and tools
-     - excludeFiles section for sensitive and generated files
+     - excludeFiles section for sensitive files only
    - Example structure:
      \\\`\\\`\\\`yaml
      scripts:
diff --git a/packages/core/src/AiTool/generateProjectConfig.test.ts b/packages/core/src/AiTool/generateProjectConfig.test.ts
index a1d70b2..41013ff 100644
--- a/packages/core/src/AiTool/generateProjectConfig.test.ts
+++ b/packages/core/src/AiTool/generateProjectConfig.test.ts
@@ -26,25 +26,6 @@ excludeFiles:
     expect(result).toBe(output)
   })
 
-  test('should trim whitespace in output', () => {
-    const output = \`
-scripts:
-  test:
-    command: "bun test"
-    description: "Run tests"
-
-rules:
-  - "Use bun as package manager"
-
-excludeFiles:
-  - ".env"
-  - "dist/"
-    \`
-
-    const result = generateProjectConfig.parseOutput(output)
-    expect(result).toBe(output.trim())
-  })
-
   test('should handle output with empty excludeFiles section', () => {
     const output = \`scripts:
   test:
diff --git a/packages/core/src/AiTool/generateProjectConfig.ts b/packages/core/src/AiTool/generateProjectConfig.ts
index c3ed668..a7cf9cc 100644
--- a/packages/core/src/AiTool/generateProjectConfig.ts
+++ b/packages/core/src/AiTool/generateProjectConfig.ts
@@ -73,7 +73,7 @@ export default {
     return ''
   },
   parseOutput: (output: string) => {
-    return output.trim()
+    return output
   },
   agent: 'analyzer',
 } as const satisfies AiToolDefinition<void>
diff --git a/packages/core/src/AiTool/index.ts b/packages/core/src/AiTool/index.ts
index 772bcc2..031b0ec 100644
--- a/packages/core/src/AiTool/index.ts
+++ b/packages/core/src/AiTool/index.ts
@@ -51,7 +51,7 @@ export const makeTool = <T extends AiToolDefinition<any, any>>(definition: T) =>
 }
 
 export const makeAgentTool = <T extends AiToolDefinition<any, any>>(definition: T) => {
-  return async (agent: MultiAgent, params: GetInput<T>): Promise<{ response: GetOutput<T>; usage: ApiUsage }> => {
+  return async (agent: MultiAgent, params: GetInput<T>): Promise<GetOutput<T>> => {
     return executeAgentTool(definition, agent, params)
   }
 }


============ Comments ============
2025-02-11T01:51:40Z @xlc:
test comment

========================

============ Reviews ============
2025-02-11T01:51:51Z @xlc:
review


------------ Review Comments ------------
2025-02-11T01:51:51Z @xlc:
Diff:
@@ -76,7 +81,7 @@ initCommand.action(async (options, command: Command) => {
       }
     }
 
-    const { config, providerConfig, verbose, maxMessageCount, budget } = parseOptions(cmdOptions)
+    const { providerConfig, verbose, maxMessageCount, budget } = parseOptions(cmdOptions)
Comment:
test review

-----------------------
2025-02-11T01:52:15Z @xlc:
Diff:
@@ -30,7 +30,7 @@ const prompt = \`You are an AiTool designed to assist users in creating new proje
    - Based on the collected information, generate a .polkacodes.yml configuration file that includes:
      - scripts section with common development commands (test, format, check, etc.)
      - rules section reflecting project conventions and tools
Comment:
some comment

-----------------------
2025-02-11T01:52:21Z @xlc:
Diff:
@@ -30,7 +30,7 @@ const prompt = \`You are an AiTool designed to assist users in creating new proje
    - Based on the collected information, generate a .polkacodes.yml configuration file that includes:
      - scripts section with common development commands (test, format, check, etc.)
      - rules section reflecting project conventions and tools
Comment:
some reply

-----------------------
========================
"
`;
